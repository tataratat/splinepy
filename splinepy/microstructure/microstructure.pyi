from _typeshed import Incomplete
from splinepy._base import SplinepyBase as _SplinepyBase

class Microstructure(_SplinepyBase):
    def __init__(self, deformation_function: Incomplete | None = None, tiling: Incomplete | None = None, microtile: Incomplete | None = None, parametrization_function: Incomplete | None = None) -> None: ...
    @property
    def deformation_function(self): ...
    @deformation_function.setter
    def deformation_function(self, deformation_function) -> None: ...
    @property
    def tiling(self): ...
    @tiling.setter
    def tiling(self, tiling) -> None: ...
    @property
    def microtile(self): ...
    @microtile.setter
    def microtile(self, microtile) -> None: ...
    @property
    def parametrization_function(self): ...
    @parametrization_function.setter
    def parametrization_function(self, parametrization_function) -> None: ...
    @property
    def parameter_sensitivity_function(self): ...
    @parameter_sensitivity_function.setter
    def parameter_sensitivity_function(self, parameter_sensitivity_function) -> None: ...
    def create(self, closing_face: Incomplete | None = None, knot_span_wise: Incomplete | None = None, macro_sensitivities: Incomplete | None = None, **kwargs): ...
    def show(self, use_saved: bool = False, **kwargs): ...

class _UserTile(_SplinepyBase):
    def __init__(self, microtile) -> None: ...
    @property
    def dim(self): ...
    def create_tile(self, **kwargs): ...
