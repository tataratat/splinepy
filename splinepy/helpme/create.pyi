import numpy.typing as _npt
from _typeshed import Incomplete

def embedded(spline, new_dimension): ...
def extruded(spline, extrusion_vector: Incomplete | None = None): ...
def revolved(
    spline,
    axis: Incomplete | None = None,
    center: Incomplete | None = None,
    angle: Incomplete | None = None,
    n_knot_spans: Incomplete | None = None,
    degree: bool = True,
): ...
def from_bounds(parametric_bounds, physical_bounds): ...
def determinant_spline(spline): ...
def parametric_view(spline, axes: bool = True, conform: bool = False): ...
def line(points: _npt.ArrayLike): ...
def arc(
    radius: float = 1.0,
    angle: float = 90.0,
    n_knot_spans: int = -1,
    start_angle: float = 0.0,
    degree: bool = True,
): ...
def circle(radius: float = 1.0, n_knot_spans: int = 3): ...
def box(*lengths): ...
def plate(radius: float = 1.0): ...
def disk(
    outer_radius,
    inner_radius: Incomplete | None = None,
    angle: float = 360.0,
    n_knot_spans: int = 4,
    degree: bool = True,
): ...
def torus(
    torus_radius,
    section_outer_radius,
    section_inner_radius: Incomplete | None = None,
    torus_angle: Incomplete | None = None,
    section_angle: Incomplete | None = None,
    section_n_knot_spans: int = 4,
    torus_n_knot_spans: int = 4,
    degree: bool = True,
): ...
def sphere(
    outer_radius,
    inner_radius: Incomplete | None = None,
    angle: float = 360.0,
    n_knot_spans: int = -1,
    degree: bool = True,
): ...
def surface_circle(outer_radius): ...
def cone(
    outer_radius,
    height,
    inner_radius: Incomplete | None = None,
    volumetric: bool = True,
    angle: float = 360.0,
    degree: bool = True,
): ...
def pyramid(width, length, height): ...

class Creator:
    def __init__(self, spl) -> None: ...
    def extruded(self, *args, **kwargs): ...
    def embedded(self, *args, **kwargs): ...
    def revolved(self, *args, **kwargs): ...
    def parametric_view(self, *args, **kwargs): ...
    def determinant_spline(self, *args, **kwargs): ...
