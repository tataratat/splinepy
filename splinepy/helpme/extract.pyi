from _typeshed import Incomplete

def edges(spline, resolution: int = 100, all_knots: bool = True): ...
def faces(spline, resolution, watertight: bool = True): ...
def volumes(spline, resolution, watertight: bool = False): ...
def control_points(spline): ...
def control_edges(spline): ...
def control_faces(spline): ...
def control_volumes(spline): ...
def control_mesh(spline): ...
def spline(spline, para_dim, split_plane): ...
def boundaries(spline, boundary_ids: Incomplete | None = None): ...
def arrow_data(spline, adata_name): ...

class Extractor:
    def __init__(self, spl) -> None: ...
    def edges(self, *args, **kwargs): ...
    def faces(self, *args, **kwargs): ...
    def volumes(self, *args, **kwargs): ...
    def control_points(self): ...
    def control_edges(self): ...
    def control_faces(self): ...
    def control_volumes(self): ...
    def control_mesh(self): ...
    def beziers(self): ...
    def boundaries(self, *args, **kwargs): ...
    def spline(
        self,
        splitting_plane: Incomplete | None = None,
        interval: Incomplete | None = None,
    ): ...
    def arrow_data(self, *args, **kwargs): ...
