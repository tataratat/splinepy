<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="extract_8hpp" kind="file" language="C++">
    <compoundname>extract.hpp</compoundname>
    <includes local="no">array</includes>
    <includes local="no">vector</includes>
    <includes refid="properties_8hpp" local="yes">splinepy/splines/helpers/properties.hpp</includes>
    <includes refid="splinepy__base_8hpp" local="yes">splinepy/splines/splinepy_base.hpp</includes>
    <includes refid="arrays_8hpp" local="yes">splinepy/utils/arrays.hpp</includes>
    <includes refid="grid__points_8hpp" local="yes">splinepy/utils/grid_points.hpp</includes>
    <includes refid="print_8hpp" local="yes">splinepy/utils/print.hpp</includes>
    <includedby refid="bezier_8inl" local="yes">bezier.inl</includedby>
    <includedby refid="splines_2bspline_8hpp" local="yes">bspline.hpp</includedby>
    <includedby refid="extract_8cpp" local="yes">extract.cpp</includedby>
    <includedby refid="splines_2nurbs_8hpp" local="no">nurbs.hpp</includedby>
    <includedby refid="py__knot__insertion__matrix_8cpp" local="yes">py_knot_insertion_matrix.cpp</includedby>
    <includedby refid="rational__bezier_8inl" local="no">rational_bezier.inl</includedby>
    <incdepgraph>
      <node id="1">
        <label>extract.hpp</label>
        <link refid="extract_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>splinepy/splines/helpers/properties.hpp</label>
        <link refid="properties_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>splinepy/splines/splinepy_base.hpp</label>
        <link refid="splinepy__base_8hpp"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>splinepy/utils/arrays.hpp</label>
        <link refid="arrays_8hpp"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>splinepy/utils/coordinate_pointers.hpp</label>
        <link refid="coordinate__pointers_8hpp"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>splinepy/utils/default_initialization_allocator.hpp</label>
        <link refid="default__initialization__allocator_8hpp"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>splinepy/utils/grid_points.hpp</label>
        <link refid="grid__points_8hpp"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>splinepy/utils/print.hpp</label>
        <link refid="print_8hpp"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>BSplineLib/Utilities/index.hpp</label>
      </node>
      <node id="15">
        <label>algorithm</label>
      </node>
      <node id="2">
        <label>array</label>
      </node>
      <node id="9">
        <label>cassert</label>
      </node>
      <node id="16">
        <label>cmath</label>
      </node>
      <node id="11">
        <label>iostream</label>
      </node>
      <node id="17">
        <label>iterator</label>
      </node>
      <node id="7">
        <label>memory</label>
      </node>
      <node id="18">
        <label>numeric</label>
      </node>
      <node id="12">
        <label>sstream</label>
      </node>
      <node id="13">
        <label>stdexcept</label>
      </node>
      <node id="19">
        <label>type_traits</label>
      </node>
      <node id="21">
        <label>utility</label>
      </node>
      <node id="3">
        <label>vector</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="3">
        <label>bezier.hpp</label>
        <link refid="splines_2bezier_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>bezier.inl</label>
        <link refid="bezier_8inl"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>bspline.hpp</label>
        <link refid="splines_2bspline_8hpp"/>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>create_bezier.hpp</label>
        <link refid="create__bezier_8hpp"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>create_rational_bezier.hpp</label>
        <link refid="create__rational__bezier_8hpp"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>extract.hpp</label>
        <link refid="extract_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>nurbs.hpp</label>
        <link refid="splines_2nurbs_8hpp"/>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>rational_bezier.hpp</label>
        <link refid="splines_2rational__bezier_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>rational_bezier.inl</label>
        <link refid="rational__bezier_8inl"/>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>bezier_explicit1.cpp</label>
        <link refid="bezier__explicit1_8cpp"/>
      </node>
      <node id="5">
        <label>bezier_explicit10.cpp</label>
        <link refid="bezier__explicit10_8cpp"/>
      </node>
      <node id="6">
        <label>bezier_explicit2.cpp</label>
        <link refid="bezier__explicit2_8cpp"/>
      </node>
      <node id="7">
        <label>bezier_explicit3.cpp</label>
        <link refid="bezier__explicit3_8cpp"/>
      </node>
      <node id="8">
        <label>bezier_explicit4.cpp</label>
        <link refid="bezier__explicit4_8cpp"/>
      </node>
      <node id="9">
        <label>bezier_explicit5.cpp</label>
        <link refid="bezier__explicit5_8cpp"/>
      </node>
      <node id="10">
        <label>bezier_explicit6.cpp</label>
        <link refid="bezier__explicit6_8cpp"/>
      </node>
      <node id="11">
        <label>bezier_explicit7.cpp</label>
        <link refid="bezier__explicit7_8cpp"/>
      </node>
      <node id="12">
        <label>bezier_explicit8.cpp</label>
        <link refid="bezier__explicit8_8cpp"/>
      </node>
      <node id="13">
        <label>bezier_explicit9.cpp</label>
        <link refid="bezier__explicit9_8cpp"/>
      </node>
      <node id="37">
        <label>bspline_explicit.cpp</label>
        <link refid="bspline__explicit_8cpp"/>
      </node>
      <node id="41">
        <label>nurbs_explicit.cpp</label>
        <link refid="nurbs__explicit_8cpp"/>
      </node>
      <node id="26">
        <label>rational_bezier_explicit1.cpp</label>
        <link refid="rational__bezier__explicit1_8cpp"/>
      </node>
      <node id="27">
        <label>rational_bezier_explicit10.cpp</label>
        <link refid="rational__bezier__explicit10_8cpp"/>
      </node>
      <node id="28">
        <label>rational_bezier_explicit2.cpp</label>
        <link refid="rational__bezier__explicit2_8cpp"/>
      </node>
      <node id="29">
        <label>rational_bezier_explicit3.cpp</label>
        <link refid="rational__bezier__explicit3_8cpp"/>
      </node>
      <node id="30">
        <label>rational_bezier_explicit4.cpp</label>
        <link refid="rational__bezier__explicit4_8cpp"/>
      </node>
      <node id="31">
        <label>rational_bezier_explicit5.cpp</label>
        <link refid="rational__bezier__explicit5_8cpp"/>
      </node>
      <node id="32">
        <label>rational_bezier_explicit6.cpp</label>
        <link refid="rational__bezier__explicit6_8cpp"/>
      </node>
      <node id="33">
        <label>rational_bezier_explicit7.cpp</label>
        <link refid="rational__bezier__explicit7_8cpp"/>
      </node>
      <node id="34">
        <label>rational_bezier_explicit8.cpp</label>
        <link refid="rational__bezier__explicit8_8cpp"/>
      </node>
      <node id="35">
        <label>rational_bezier_explicit9.cpp</label>
        <link refid="rational__bezier__explicit9_8cpp"/>
      </node>
      <node id="42">
        <label>py_knot_insertion_matrix.cpp</label>
        <link refid="py__knot__insertion__matrix_8cpp"/>
      </node>
      <node id="19">
        <label>py_spline.cpp</label>
        <link refid="py__spline_8cpp"/>
      </node>
      <node id="38">
        <label>py_spline_reader.cpp</label>
        <link refid="py__spline__reader_8cpp"/>
      </node>
      <node id="15">
        <label>bezier1.cpp</label>
        <link refid="bezier1_8cpp"/>
      </node>
      <node id="16">
        <label>bezier2.cpp</label>
        <link refid="bezier2_8cpp"/>
      </node>
      <node id="17">
        <label>bezier3.cpp</label>
        <link refid="bezier3_8cpp"/>
      </node>
      <node id="23">
        <label>rational_bezier1.cpp</label>
        <link refid="rational__bezier1_8cpp"/>
      </node>
      <node id="24">
        <label>rational_bezier2.cpp</label>
        <link refid="rational__bezier2_8cpp"/>
      </node>
      <node id="25">
        <label>rational_bezier3.cpp</label>
        <link refid="rational__bezier3_8cpp"/>
      </node>
      <node id="39">
        <label>extract.cpp</label>
        <link refid="extract_8cpp"/>
      </node>
      <node id="18">
        <label>splinepy_base.cpp</label>
        <link refid="splinepy__base_8cpp"/>
      </node>
    </invincdepgraph>
    <innernamespace refid="namespacesplinepy">splinepy</innernamespace>
    <innernamespace refid="namespacesplinepy_1_1splines">splinepy::splines</innernamespace>
    <innernamespace refid="namespacesplinepy_1_1splines_1_1helpers">splinepy::splines::helpers</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment">MIT<sp/>License</highlight></codeline>
<codeline lineno="3"><highlight class="comment"></highlight></codeline>
<codeline lineno="4"><highlight class="comment">Copyright<sp/>(c)<sp/>2021<sp/>Jaewook<sp/>Lee</highlight></codeline>
<codeline lineno="5"><highlight class="comment"></highlight></codeline>
<codeline lineno="6"><highlight class="comment">Permission<sp/>is<sp/>hereby<sp/>granted,<sp/>free<sp/>of<sp/>charge,<sp/>to<sp/>any<sp/>person<sp/>obtaining<sp/>a<sp/>copy</highlight></codeline>
<codeline lineno="7"><highlight class="comment">of<sp/>this<sp/>software<sp/>and<sp/>associated<sp/>documentation<sp/>files<sp/>(the<sp/>&quot;Software&quot;),<sp/>to<sp/>deal</highlight></codeline>
<codeline lineno="8"><highlight class="comment">in<sp/>the<sp/>Software<sp/>without<sp/>restriction,<sp/>including<sp/>without<sp/>limitation<sp/>the<sp/>rights</highlight></codeline>
<codeline lineno="9"><highlight class="comment">to<sp/>use,<sp/>copy,<sp/>modify,<sp/>merge,<sp/>publish,<sp/>distribute,<sp/>sublicense,<sp/>and/or<sp/>sell</highlight></codeline>
<codeline lineno="10"><highlight class="comment">copies<sp/>of<sp/>the<sp/>Software,<sp/>and<sp/>to<sp/>permit<sp/>persons<sp/>to<sp/>whom<sp/>the<sp/>Software<sp/>is</highlight></codeline>
<codeline lineno="11"><highlight class="comment">furnished<sp/>to<sp/>do<sp/>so,<sp/>subject<sp/>to<sp/>the<sp/>following<sp/>conditions:</highlight></codeline>
<codeline lineno="12"><highlight class="comment"></highlight></codeline>
<codeline lineno="13"><highlight class="comment">The<sp/>above<sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>shall<sp/>be<sp/>included<sp/>in<sp/>all</highlight></codeline>
<codeline lineno="14"><highlight class="comment">copies<sp/>or<sp/>substantial<sp/>portions<sp/>of<sp/>the<sp/>Software.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"></highlight></codeline>
<codeline lineno="16"><highlight class="comment">THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/>IS&quot;,<sp/>WITHOUT<sp/>WARRANTY<sp/>OF<sp/>ANY<sp/>KIND,<sp/>EXPRESS<sp/>OR</highlight></codeline>
<codeline lineno="17"><highlight class="comment">IMPLIED,<sp/>INCLUDING<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO<sp/>THE<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY,</highlight></codeline>
<codeline lineno="18"><highlight class="comment">FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND<sp/>NONINFRINGEMENT.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE</highlight></codeline>
<codeline lineno="19"><highlight class="comment">AUTHORS<sp/>OR<sp/>COPYRIGHT<sp/>HOLDERS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>CLAIM,<sp/>DAMAGES<sp/>OR<sp/>OTHER</highlight></codeline>
<codeline lineno="20"><highlight class="comment">LIABILITY,<sp/>WHETHER<sp/>IN<sp/>AN<sp/>ACTION<sp/>OF<sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING<sp/>FROM,</highlight></codeline>
<codeline lineno="21"><highlight class="comment">OUT<sp/>OF<sp/>OR<sp/>IN<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>SOFTWARE<sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/>OTHER<sp/>DEALINGS<sp/>IN<sp/>THE</highlight></codeline>
<codeline lineno="22"><highlight class="comment">SOFTWARE.</highlight></codeline>
<codeline lineno="23"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;array&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="properties_8hpp" kindref="compound">splinepy/splines/helpers/properties.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="splinepy__base_8hpp" kindref="compound">splinepy/splines/splinepy_base.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="arrays_8hpp" kindref="compound">splinepy/utils/arrays.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="grid__points_8hpp" kindref="compound">splinepy/utils/grid_points.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="print_8hpp" kindref="compound">splinepy/utils/print.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacesplinepy_1_1splines_1_1helpers" kindref="compound">splinepy::splines::helpers</ref><sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="39" refid="namespacesplinepy_1_1splines_1_1helpers_1ac6319f0a68ca229fdd1f75ed366eccf2" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespacesplinepy_1_1splines_1_1helpers_1ac6319f0a68ca229fdd1f75ed366eccf2" kindref="member">ExtractBoundaryFromAxisAndExtrema</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">axis</ref>,</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">extreme</ref>)<sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Determine<sp/>corresponding<sp/>ID</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">extreme</ref><sp/>&gt;<sp/>0)<sp/>?<sp/>2<sp/>*<sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">axis</ref><sp/>+<sp/>1<sp/>:<sp/>2<sp/>*<sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">axis</ref>;</highlight></codeline>
<codeline lineno="43"><highlight class="normal">}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>SplineType,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>VectorType&gt;</highlight></codeline>
<codeline lineno="46"><highlight class="normal">std::shared_ptr&lt;splinepy::splines::SplinepyBase&gt;</highlight></codeline>
<codeline lineno="47" refid="namespacesplinepy_1_1splines_1_1helpers_1adedbea6623aea6743b2b49c336d71558" refkind="member"><highlight class="normal"><ref refid="namespacesplinepy_1_1splines_1_1helpers_1adedbea6623aea6743b2b49c336d71558" kindref="member">ExtractControlMeshSliceFromIDs</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">SplineType</ref>&amp;<sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">spline</ref>,</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">VectorType</ref>&amp;<sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">indices</ref>,</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">plane_normal_axis</ref>)<sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Perform<sp/>sanity<sp/>check</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(SplineType::kParaDim<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacesplinepy_1_1utils_1a5cecf9742e7280b5aa80c1f817191cb2" kindref="member">splinepy::utils::PrintWarning</ref>(</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Sorry,<sp/>we<sp/>don&apos;t<sp/>support<sp/>control<sp/>mesh<sp/>slicing&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;of<sp/>1-Parametric<sp/>Dim<sp/>splines.<sp/>Returning<sp/>empty<sp/>spline.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_shared&lt;SplineType&gt;();</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>boundary<sp/>spline<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">SelfBoundary</ref><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>SplineType::BoundaryType_;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>prepare<sp/>return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;SelfBoundary&gt;<sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">boundary_spline</ref>;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>new<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(SplineType::kHasKnotVectors)<sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>hola<sp/>BSpline<sp/>families</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">VSpace</ref><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>SelfBoundary::PhysicalSpace_;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>slices<sp/>splines<sp/>can<sp/>use<sp/>parent&apos;s<sp/>parameter<sp/>space<sp/>without</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>recreating<sp/>basis.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>RemoveOneParametricDimension()<sp/>creates<sp/>a<sp/>new<sp/>parameter<sp/>space<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>same<sp/>shared<sp/>pointers<sp/>to<sp/>all<sp/>the<sp/>required<sp/>properties.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">pspace</ref><sp/>=<sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">spline</ref>.<ref refid="classsplinepy_1_1splines_1_1BSpline_1a9e4b9f65410e7ecd17951d6b4bf48273" kindref="member">GetParameterSpace</ref>().RemoveOneParametricDimension(</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">plane_normal_axis</ref>);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>size<sp/>-<sp/>dim<sp/>should<sp/>come<sp/>from<sp/>the<sp/>coordinate<sp/>itself,<sp/>since<sp/>nurbs<sp/>have</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>dim<sp/>+<sp/>1<sp/>shape</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">from_coordinates</ref><sp/>=<sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">spline</ref>.<ref refid="classsplinepy_1_1splines_1_1BSpline_1aadbd788036e3de139a5009efe83d8e42" kindref="member">GetCoordinates</ref>();</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim<sp/>=<sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">from_coordinates</ref>.Shape()[1];</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">n_cps</ref><sp/>=<sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">indices</ref>.size();</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>VSpace<sp/>-<sp/>maybe<sp/>it<sp/>is<sp/>also</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>(weighted)<sp/>vector<sp/>space<sp/>and<sp/>allocate<sp/>space<sp/>for<sp/>cps</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">vspace</ref><sp/>=<sp/>std::make_shared&lt;VSpace&gt;();</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">coords</ref><sp/>=<sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">vspace</ref>-&gt;<ref refid="classsplinepy_1_1splines_1_1BSpline_1aadbd788036e3de139a5009efe83d8e42" kindref="member">GetCoordinates</ref>();</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">coords</ref>.Reallocate(<ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">n_cps</ref><sp/>*<sp/>dim);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">coords</ref>.SetShape(<ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">n_cps</ref>,<sp/>dim);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>loop<sp/>-<sp/>copy<sp/>each<sp/>rows</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">local_counter</ref>{};</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>:<sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">indices</ref>)<sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::copy_n(&amp;<ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">from_coordinates</ref>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>0),<sp/>dim,<sp/>&amp;<ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">coords</ref>(<ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">local_counter</ref>++,<sp/>0));</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>assign<sp/>boundary<sp/>spline<sp/>-<sp/>uses<sp/>base&apos;<sp/>ctor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">boundary_spline</ref><sp/>=<sp/>std::make_shared&lt;SelfBoundary&gt;(<ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">pspace</ref>,<sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">vspace</ref>);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>hola<sp/>bezier<sp/>families</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>form<sp/>degrees</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">Degrees</ref><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>SelfBoundary::Degrees_;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">Degrees</ref><sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">b_degrees</ref>{};</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">ncps</ref>{1};</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">counter</ref>{};</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">i</ref>{};<sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">i</ref><sp/>&lt;<sp/>SplineType::kParaDim;<sp/>++<ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">i</ref>)<sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">i</ref><sp/>==<sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">plane_normal_axis</ref>)<sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">ds</ref><sp/>=<sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">spline</ref>.<ref refid="classsplinepy_1_1splines_1_1BSpline_1ae5849b2a4fd2d20449a37c940d175c83" kindref="member">GetDegrees</ref>();</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">d</ref><sp/>=<sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">ds</ref>[<ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">i</ref>];</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">b_degrees</ref>[<ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">counter</ref>]<sp/>=<sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">d</ref>;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">ncps</ref><sp/>*=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">d</ref><sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">counter</ref>++;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(SplineType::kIsRational)<sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>only<sp/>way<sp/>to<sp/>avoid<sp/>unweight<sp/>-&gt;<sp/>reweight<sp/>is<sp/>to<sp/>init<sp/>first<sp/>with<sp/>degrees</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>assign<sp/>boundary<sp/>spline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">boundary_spline</ref><sp/>=<sp/>std::make_shared&lt;SelfBoundary&gt;(<ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">b_degrees</ref>);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">b_cps</ref><sp/>=<sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">boundary_spline</ref>-&gt;GetWeightedControlPoints();</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">b_ws</ref><sp/>=<sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">boundary_spline</ref>-&gt;GetWeights();</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>copy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">i</ref>{};<sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">i</ref><sp/>&lt;<sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">ncps</ref>;<sp/>++<ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">i</ref>)<sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">indices</ref>[<ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">i</ref>];</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">b_cps</ref>[<ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">i</ref>]<sp/>=<sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">spline</ref>.GetWeightedControlPoints()[<ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">id</ref>];</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">b_ws</ref>[<ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">i</ref>]<sp/>=<sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">spline</ref>.GetWeights()[<ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">id</ref>];</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>non-rational<sp/>bezier</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">Coordinates</ref><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>SelfBoundary::Coordinates_;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">Coordinates</ref><sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">b_coords</ref>;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">b_coords</ref>.reserve(<ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">ncps</ref>);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>:<sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">indices</ref>)<sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>control<sp/>points</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">b_coords</ref>.push_back(<ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">spline</ref>.GetControlPoints()[<ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">id</ref>]);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>assign<sp/>boundary<sp/>spline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">boundary_spline</ref><sp/>=<sp/>std::make_shared&lt;SelfBoundary&gt;(<ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">b_degrees</ref>,<sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">b_coords</ref>);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>here,<sp/>this<sp/>way<sp/>compiler<sp/>is<sp/>happy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">boundary_spline</ref>;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="144"><highlight class="normal">}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>SplineType&gt;</highlight></codeline>
<codeline lineno="147"><highlight class="normal">std::shared_ptr&lt;splinepy::splines::SplinepyBase&gt;</highlight></codeline>
<codeline lineno="148" refid="namespacesplinepy_1_1splines_1_1helpers_1a8f7d70c32275230dd17b4479f8b5d320" refkind="member"><highlight class="normal"><ref refid="namespacesplinepy_1_1splines_1_1helpers_1a8f7d70c32275230dd17b4479f8b5d320" kindref="member">ExtractBoundaryMeshSlice</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">SplineType</ref>&amp;<sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">spline</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">boundary_id</ref>)<sp/>{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(SplineType::kParaDim<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacesplinepy_1_1utils_1a5cecf9742e7280b5aa80c1f817191cb2" kindref="member">splinepy::utils::PrintWarning</ref>(</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Sorry,<sp/>we<sp/>don&apos;t<sp/>support<sp/>control<sp/>mesh<sp/>slicing&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;of<sp/>1-Parametric<sp/>Dim<sp/>splines.<sp/>Returning<sp/>empty<sp/>spline.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_shared&lt;SplineType&gt;();</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>ids<sp/>on<sp/>boundary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">cmr</ref><sp/>=</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>splinepy::splines::helpers::template<sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">GetControlMeshResolutions&lt;int&gt;</ref>(</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">spline</ref>);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">plane_normal_axis</ref><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">boundary_id</ref><sp/>/<sp/>2);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">plane_id</ref><sp/>=</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((<ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">boundary_id</ref><sp/>%<sp/>2)<sp/>==<sp/>0)<sp/>?<sp/>0<sp/>:<sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">cmr</ref>[<ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">plane_normal_axis</ref>]<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">ids_on_boundary</ref><sp/>=<sp/><ref refid="classsplinepy_1_1utils_1_1GridPoints_1a38a7d35e4d312659d74078a3262428e0" kindref="member">splinepy::utils::GridPoints::IdsOnHyperPlane</ref>(</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">cmr</ref>.data(),</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">cmr</ref>.size()),</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">plane_normal_axis</ref>,</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">plane_id</ref>);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacesplinepy_1_1splines_1_1helpers_1adedbea6623aea6743b2b49c336d71558" kindref="member">ExtractControlMeshSliceFromIDs</ref>(<ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">spline</ref>,</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">ids_on_boundary</ref>,</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">plane_normal_axis</ref>);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="172"><highlight class="normal">}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>SplineType&gt;</highlight></codeline>
<codeline lineno="176"><highlight class="normal">std::shared_ptr&lt;splinepy::splines::SplinepyBase&gt;</highlight></codeline>
<codeline lineno="177" refid="namespacesplinepy_1_1splines_1_1helpers_1abde64cb35991da416313105000f70c85" refkind="member"><highlight class="normal"><ref refid="namespacesplinepy_1_1splines_1_1helpers_1abde64cb35991da416313105000f70c85" kindref="member">ExtractControlMeshSlice</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">SplineType</ref>&amp;<sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">spline</ref>,</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">plane_normal_axis</ref>,</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">plane_id</ref>)<sp/>{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(SplineType::kParaDim<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacesplinepy_1_1utils_1a5cecf9742e7280b5aa80c1f817191cb2" kindref="member">splinepy::utils::PrintWarning</ref>(</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Sorry,<sp/>we<sp/>don&apos;t<sp/>support<sp/>control<sp/>mesh<sp/>slicing&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;of<sp/>1-Parametric<sp/>Dim<sp/>splines.<sp/>Returning<sp/>empty<sp/>spline.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>SplineType::template<sp/>SelfTemplate_&lt;SplineType::kParaDim,</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SplineType::kDim&gt;&gt;{};</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>ids<sp/>on<sp/>boundary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">cmr</ref><sp/>=</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacesplinepy_1_1splines_1_1helpers_1a4232babd776b3fe98f06d804ef050669" kindref="member">splinepy::splines::helpers::GetControlMeshResolutions</ref>(<ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">spline</ref>);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">ids_on_boundary</ref><sp/>=<sp/><ref refid="classsplinepy_1_1utils_1_1GridPoints_1a38a7d35e4d312659d74078a3262428e0" kindref="member">splinepy::utils::GridPoints::IdsOnHyperPlane</ref>(</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">cmr</ref>.data(),</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">cmr</ref>.size()),</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">plane_normal_axis</ref>,</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">plane_id</ref>);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacesplinepy_1_1splines_1_1helpers_1adedbea6623aea6743b2b49c336d71558" kindref="member">ExtractControlMeshSliceFromIDs</ref>(<ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">spline</ref>,</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">ids_on_boundary</ref>,</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">plane_normal_axis</ref>);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="200"><highlight class="normal">}</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal">std::vector&lt;std::vector&lt;int&gt;&gt;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><ref refid="namespacesplinepy_1_1splines_1_1helpers_1a2cdf12123838ad703b58e369f120b83f" kindref="member">ExtractBezierPatchIDs</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::vector&lt;int&gt;&gt;&amp;<sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">knot_multiplicities</ref>,</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">degrees</ref>);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>SplineType&gt;</highlight></codeline>
<codeline lineno="226"><highlight class="normal">std::vector&lt;std::shared_ptr&lt;splinepy::splines::SplinepyBase&gt;&gt;</highlight></codeline>
<codeline lineno="227" refid="namespacesplinepy_1_1splines_1_1helpers_1adaefa093328da4859a3430ceffcfc9db" refkind="member"><highlight class="normal"><ref refid="namespacesplinepy_1_1splines_1_1helpers_1adaefa093328da4859a3430ceffcfc9db" kindref="member">ExtractBezierPatches</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">SplineType</ref>&amp;<sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">spline</ref>)<sp/>{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(SplineType::kHasKnotVectors,</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>type<sp/>for<sp/>ExtractBezierPatches&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>make<sp/>copy<sp/>of<sp/>input<sp/>spline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">input_ptr</ref><sp/>=<sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">spline</ref>.<ref refid="classsplinepy_1_1splines_1_1BSpline_1aa1d06bf774a2ad58d3a3fe6e6e032cca" kindref="member">SplinepyDeepCopy</ref>();</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">SplineType</ref>&amp;<sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">input</ref><sp/>=<sp/>*(std::dynamic_pointer_cast&lt;SplineType&gt;(<ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">input_ptr</ref>));</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Start<sp/>by<sp/>identifying<sp/>types</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>para_dim<sp/>=<sp/>SplineType::kParaDim;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">is_rational</ref><sp/>=<sp/>SplineType::kIsRational;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim<sp/>=<sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">input</ref>.<ref refid="classsplinepy_1_1splines_1_1BSpline_1addafa95d18f804ff9b6565cc69b9b441" kindref="member">SplinepyDim</ref>();</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Predetermine<sp/>some<sp/>auxiliary<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Access<sp/>spline<sp/>degrees<sp/>and<sp/>determine<sp/>offsets</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/>std::array&lt;int,<sp/>para_dim&gt;<sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">degrees</ref>{};</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">input</ref>.<ref refid="classsplinepy_1_1splines_1_1BSpline_1a3a75c63c8c16b8cbebdb077b75bb4094" kindref="member">SplinepyCurrentProperties</ref>(<ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">degrees</ref>.data(),<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/>std::array&lt;int,<sp/>para_dim&gt;<sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">n_ctps_per_para_dim</ref>{};</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Identify<sp/>all<sp/>internal<sp/>knots<sp/>and<sp/>the<sp/>number<sp/>of<sp/>required<sp/>Bezier<sp/>patches</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">parameter_space</ref><sp/>=<sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">input</ref>.<ref refid="classsplinepy_1_1splines_1_1BSpline_1a9e4b9f65410e7ecd17951d6b4bf48273" kindref="member">GetParameterSpace</ref>();</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">i_p_dim</ref>{};<sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">i_p_dim</ref><sp/>&lt;<sp/>para_dim;<sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">i_p_dim</ref>++)<sp/>{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Need<sp/>to<sp/>use<sp/>BSplineLib&apos;s<sp/>infamous<sp/>NamedType</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>bsplinelib::Dimension<sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">pd_query</ref>{<ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">i_p_dim</ref>};</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Extract<sp/>internal<sp/>knots</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">bezier_information</ref><sp/>=</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">parameter_space</ref>.DetermineBezierExtractionKnots(<ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">pd_query</ref>);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">required_knot_insertions</ref><sp/>=<sp/>std::get&lt;1&gt;(<ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">bezier_information</ref>);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Insert<sp/>knot<sp/>into<sp/>the<sp/>copy<sp/>of<sp/>the<sp/>spline<sp/>before<sp/>extraction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>is<sp/>the<sp/>most<sp/>costly<sp/>part<sp/>of<sp/>the<sp/>calculation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">knot_to_insert</ref><sp/>:<sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">required_knot_insertions</ref>)<sp/>{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">input</ref>.InsertKnot(<ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">pd_query</ref>,<sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">knot_to_insert</ref>);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Retrieve<sp/>id<sp/>information</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::vector&lt;int&gt;&gt;&amp;<sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">ids</ref><sp/>=</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacesplinepy_1_1splines_1_1helpers_1a2cdf12123838ad703b58e369f120b83f" kindref="member">ExtractBezierPatchIDs</ref>(<ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">input</ref>.<ref refid="classsplinepy_1_1splines_1_1BSpline_1abc7b15cb985887663bee98475bfbb20e" kindref="member">SplinepyKnotMultiplicities</ref>(),<sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">degrees</ref>.data());</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Number<sp/>of<sp/>total<sp/>patches</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">n_total_patches</ref><sp/>=<sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">ids</ref>.size();</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">n_ctps_per_patch</ref><sp/>=<sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">ids</ref>[0].size();</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Init<sp/>return<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/>std::vector&lt;std::shared_ptr&lt;splinepy::splines::SplinepyBase&gt;&gt;<sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">bezier_list</ref>{};</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">bezier_list</ref>.reserve(<ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">n_total_patches</ref>);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>base<sp/>control<sp/>points<sp/>to<sp/>copy<sp/>-<sp/>in<sp/>case<sp/>of<sp/>NURBS,<sp/>this<sp/>will<sp/>be<sp/>weighted</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>coordinates<sp/>with<sp/>the<sp/>weights<sp/>at<sp/>the<sp/>last<sp/>column</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">bspline_cps</ref><sp/>=<sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">input</ref>.<ref refid="classsplinepy_1_1splines_1_1BSpline_1aadbd788036e3de139a5009efe83d8e42" kindref="member">GetCoordinates</ref>();</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>prepare<sp/>temporary<sp/>space<sp/>to<sp/>copy<sp/>control<sp/>point<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><ref refid="classsplinepy_1_1utils_1_1Array" kindref="compound">splinepy::utils::Array&lt;double, 2&gt;</ref><sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">extracted_cps</ref>(<ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">n_ctps_per_patch</ref>,<sp/>dim);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><ref refid="classsplinepy_1_1utils_1_1Array" kindref="compound">splinepy::utils::Array&lt;double&gt;</ref><sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">extracted_weights</ref>;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">extracted_weights_data</ref>{</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(<ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">is_rational</ref>)<sp/>{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">extracted_weights</ref>.Reallocate(<ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">n_ctps_per_patch</ref>);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">extracted_weights_data</ref><sp/>=<sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">extracted_weights</ref>.data();</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Loop<sp/>over<sp/>the<sp/>individual<sp/>patches</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;int&gt;&amp;<sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">cp_ids</ref><sp/>:<sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">ids</ref>)<sp/>{</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>loop<sp/>over<sp/>cp<sp/>ids<sp/>to<sp/>extract</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">local_counter</ref>{};</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">cp_id</ref><sp/>:<sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">cp_ids</ref>)<sp/>{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(<ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">is_rational</ref>)<sp/>{</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>have<sp/>to<sp/>un-weight</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>beginning<sp/>of<sp/>from<sp/>and<sp/>to<sp/>row</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">from_ptr</ref><sp/>=<sp/>&amp;<ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">bspline_cps</ref>(<ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">cp_id</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">to_ptr</ref><sp/>=<sp/>&amp;<ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">extracted_cps</ref>(<ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">local_counter</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>invert<sp/>weight</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">w_inv</ref><sp/>=<sp/>1.<sp/>/<sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">from_ptr</ref>[dim];</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>apply<sp/>inverted<sp/>weight<sp/>and<sp/>save<sp/>to<sp/>temporary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">i</ref>{};<sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">i</ref><sp/>&lt;<sp/>dim;<sp/>++<ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">i</ref>)<sp/>{</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">to_ptr</ref>[<ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">i</ref>]<sp/>=<sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">from_ptr</ref>[<ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">i</ref>]<sp/>*<sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">w_inv</ref>;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>weight</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">extracted_weights</ref>[<ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">local_counter</ref>]<sp/>=<sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">from_ptr</ref>[dim];</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++<ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">local_counter</ref>;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>non-rational<sp/>bspline,<sp/>we<sp/>can<sp/>just<sp/>copy<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::copy_n(&amp;<ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">bspline_cps</ref>(<ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">cp_id</ref>,<sp/>0),</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dim,</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">extracted_cps</ref>(<ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">local_counter</ref>++,<sp/>0));</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>use<sp/>dynamic<sp/>spline<sp/>creator<sp/>to<sp/>create<sp/>beziers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>weights&apos;s<sp/>data<sp/>will<sp/>be<sp/>nullptr<sp/>if<sp/>it<sp/>is<sp/>non<sp/>rational.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>all<sp/>the<sp/>values<sp/>are<sp/>copied<sp/>by<sp/>bezier<sp/>and<sp/>rational<sp/>bezier</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">bezier_list</ref>.push_back(<ref refid="classsplinepy_1_1splines_1_1SplinepyBase_1a2e9c51442eb4e2c6f083bbdf4a55bf4c" kindref="member">splinepy::splines::SplinepyBase::SplinepyCreate</ref>(</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>para_dim,</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dim,</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">degrees</ref>.data(),</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">extracted_cps</ref>.data(),</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">extracted_weights_data</ref>));</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">bezier_list</ref>;</highlight></codeline>
<codeline lineno="332"><highlight class="normal">}</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal">}<sp/></highlight><highlight class="comment">/*<sp/>namespace<sp/>splinepy::splines::helpers<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/runner/work/splinepy/splinepy/include/splinepy/splines/helpers/extract.hpp"/>
  </compounddef>
</doxygen>
