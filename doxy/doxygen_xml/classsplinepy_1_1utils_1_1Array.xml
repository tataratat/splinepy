<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classsplinepy_1_1utils_1_1Array" kind="class" language="C++" prot="public">
    <compoundname>splinepy::utils::Array</compoundname>
    <includes refid="arrays_8hpp" local="no">arrays.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename DataType</type>
      </param>
      <param>
        <type>int</type>
        <declname>dim</declname>
        <defname>dim</defname>
        <defval>1</defval>
      </param>
      <param>
        <type>typename IndexType</type>
        <defval>int</defval>
      </param>
    </templateparamlist>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classsplinepy_1_1utils_1_1Array_1ace8c7b9eba68e41a0d6c21ea971637f6" prot="public" static="no">
        <type>std::array&lt; IndexType, dim &gt;</type>
        <definition>using ShapeType_ =  std::array&lt;IndexType, dim&gt;</definition>
        <argsstring></argsstring>
        <name>ShapeType_</name>
        <qualifiedname>splinepy::utils::Array::ShapeType_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/utils/arrays.hpp" line="48" column="3" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/utils/arrays.hpp" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classsplinepy_1_1utils_1_1Array_1a844c863e21272c53f7a12829e69d8c59" prot="public" static="no">
        <type>std::array&lt; IndexType, dim - 1 &gt;</type>
        <definition>using StridesType_ =  std::array&lt;IndexType, dim - 1&gt;</definition>
        <argsstring></argsstring>
        <name>StridesType_</name>
        <qualifiedname>splinepy::utils::Array::StridesType_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/utils/arrays.hpp" line="49" column="3" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/utils/arrays.hpp" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classsplinepy_1_1utils_1_1Array_1a7df28105bea7ae6d0d78a1a4da44e86b" prot="public" static="no">
        <type>DataType</type>
        <definition>using DataType_ =  DataType</definition>
        <argsstring></argsstring>
        <name>DataType_</name>
        <qualifiedname>splinepy::utils::Array::DataType_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/utils/arrays.hpp" line="52" column="3" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/utils/arrays.hpp" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classsplinepy_1_1utils_1_1Array_1a95d51f45162d74c83a7e3c20471dcd6e" prot="public" static="no">
        <type>IndexType</type>
        <definition>using IndexType_ =  IndexType</definition>
        <argsstring></argsstring>
        <name>IndexType_</name>
        <qualifiedname>splinepy::utils::Array::IndexType_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/utils/arrays.hpp" line="53" column="3" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/utils/arrays.hpp" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classsplinepy_1_1utils_1_1Array_1a12946efe528d48c02aa751c0d42f3017" prot="public" static="no">
        <type>DataType</type>
        <definition>using value_type =  DataType</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <qualifiedname>splinepy::utils::Array::value_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/utils/arrays.hpp" line="56" column="3" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/utils/arrays.hpp" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classsplinepy_1_1utils_1_1Array_1a1ed20642c504789b157f2aa44832ada2" prot="public" static="no">
        <type>IndexType</type>
        <definition>using size_type =  IndexType</definition>
        <argsstring></argsstring>
        <name>size_type</name>
        <qualifiedname>splinepy::utils::Array::size_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/utils/arrays.hpp" line="57" column="3" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/utils/arrays.hpp" bodystart="57" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classsplinepy_1_1utils_1_1Array_1a0ada8d0106954f4b35edcd9ffe678686" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const IndexType</type>
        <definition>constexpr const IndexType kDim</definition>
        <argsstring></argsstring>
        <name>kDim</name>
        <qualifiedname>splinepy::utils::Array::kDim</qualifiedname>
        <initializer>= static_cast&lt;IndexType&gt;(dim)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/utils/arrays.hpp" line="50" column="36" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/utils/arrays.hpp" bodystart="50" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classsplinepy_1_1utils_1_1Array_1aa0a52906d4a2a37abafe4fd8e2b40668" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool own_data_</definition>
        <argsstring></argsstring>
        <name>own_data_</name>
        <qualifiedname>splinepy::utils::Array::own_data_</qualifiedname>
        <initializer>{false}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/utils/arrays.hpp" line="60" column="8" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/utils/arrays.hpp" bodystart="60" bodyend="60"/>
      </memberdef>
      <memberdef kind="variable" id="classsplinepy_1_1utils_1_1Array_1a446297c547ebaf652c826cae0dcb96e8" prot="protected" static="no" mutable="no">
        <type>DataType *</type>
        <definition>DataType* data_</definition>
        <argsstring></argsstring>
        <name>data_</name>
        <qualifiedname>splinepy::utils::Array::data_</qualifiedname>
        <initializer>{nullptr}</initializer>
        <briefdescription>
<para>beginning of the array pointer that this object manages </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/utils/arrays.hpp" line="62" column="12" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/utils/arrays.hpp" bodystart="62" bodyend="62"/>
      </memberdef>
      <memberdef kind="variable" id="classsplinepy_1_1utils_1_1Array_1a88aa79a90b0954ba0d578f5c3c40cd21" prot="protected" static="no" mutable="no">
        <type>IndexType</type>
        <definition>IndexType size_</definition>
        <argsstring></argsstring>
        <name>size_</name>
        <qualifiedname>splinepy::utils::Array::size_</qualifiedname>
        <initializer>{}</initializer>
        <briefdescription>
<para>size of this <ref refid="classsplinepy_1_1utils_1_1Array" kindref="compound">Array</ref> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/utils/arrays.hpp" line="65" column="13" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/utils/arrays.hpp" bodystart="65" bodyend="65"/>
      </memberdef>
      <memberdef kind="variable" id="classsplinepy_1_1utils_1_1Array_1af8dc82d16f06e9409cc71ff795f9bd05" prot="protected" static="no" mutable="no">
        <type><ref refid="classsplinepy_1_1utils_1_1Array_1a844c863e21272c53f7a12829e69d8c59" kindref="member">StridesType_</ref></type>
        <definition>StridesType_ strides_</definition>
        <argsstring></argsstring>
        <name>strides_</name>
        <qualifiedname>splinepy::utils::Array::strides_</qualifiedname>
        <briefdescription>
<para>strides in case this is a higher dim. last entry should be the same as size_ </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/utils/arrays.hpp" line="69" column="16" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/utils/arrays.hpp" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classsplinepy_1_1utils_1_1Array_1a7baad4f9456800401f5dd9fc0991fbf4" prot="protected" static="no" mutable="no">
        <type><ref refid="classsplinepy_1_1utils_1_1Array_1ace8c7b9eba68e41a0d6c21ea971637f6" kindref="member">ShapeType_</ref></type>
        <definition>ShapeType_ shape_</definition>
        <argsstring></argsstring>
        <name>shape_</name>
        <qualifiedname>splinepy::utils::Array::shape_</qualifiedname>
        <briefdescription>
<para>shape of the array </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/utils/arrays.hpp" line="72" column="14" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/utils/arrays.hpp" bodystart="72" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-func">
      <memberdef kind="function" id="classsplinepy_1_1utils_1_1Array_1a517efc7086142a8b2b4be72a184dd4e7" prot="protected" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type>constexpr void</type>
        <definition>constexpr void ComputeRemainingOffset</definition>
        <argsstring>(IndexType &amp;index, IndexType &amp;counter, const IndexType &amp;id0, const Ts &amp;... id) const</argsstring>
        <name>ComputeRemainingOffset</name>
        <qualifiedname>splinepy::utils::Array::ComputeRemainingOffset</qualifiedname>
        <param>
          <type>IndexType &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>IndexType &amp;</type>
          <declname>counter</declname>
        </param>
        <param>
          <type>const IndexType &amp;</type>
          <declname>id0</declname>
        </param>
        <param>
          <type>const Ts &amp;...</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>helper to find id offset </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>...Ts</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>counter</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id0</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...id</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/utils/arrays.hpp" line="81" column="18" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/utils/arrays.hpp" bodystart="81" bodyend="100"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classsplinepy_1_1utils_1_1Array_1a0d0cd9e243926ae8f9f0e13144e7f5ad" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr DataType *</type>
        <definition>constexpr DataType * data</definition>
        <argsstring>()</argsstring>
        <name>data</name>
        <qualifiedname>splinepy::utils::Array::data</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/utils/arrays.hpp" line="103" column="22" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/utils/arrays.hpp" bodystart="103" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1utils_1_1Array_1ab46285c56bb025fccc33d39d05e0a60f" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr const DataType *</type>
        <definition>constexpr const DataType * data</definition>
        <argsstring>() const</argsstring>
        <name>data</name>
        <qualifiedname>splinepy::utils::Array::data</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/utils/arrays.hpp" line="108" column="28" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/utils/arrays.hpp" bodystart="108" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1utils_1_1Array_1a40fdb350a061dc85e4f5729d013e701c" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr DataType *</type>
        <definition>constexpr DataType * begin</definition>
        <argsstring>() const</argsstring>
        <name>begin</name>
        <qualifiedname>splinepy::utils::Array::begin</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/utils/arrays.hpp" line="113" column="22" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/utils/arrays.hpp" bodystart="113" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1utils_1_1Array_1af84a72c8309221e4487f0089cefea1c7" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr DataType *</type>
        <definition>constexpr DataType * end</definition>
        <argsstring>() const</argsstring>
        <name>end</name>
        <qualifiedname>splinepy::utils::Array::end</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/utils/arrays.hpp" line="118" column="22" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/utils/arrays.hpp" bodystart="118" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1utils_1_1Array_1a708367ba8eb3d60de426241f8b74ccae" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr const DataType *</type>
        <definition>constexpr const DataType * cbegin</definition>
        <argsstring>() const</argsstring>
        <name>cbegin</name>
        <qualifiedname>splinepy::utils::Array::cbegin</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/utils/arrays.hpp" line="124" column="28" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/utils/arrays.hpp" bodystart="124" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1utils_1_1Array_1ae252bc8d9bbfda005dc6a1bd7314bf96" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr const DataType *</type>
        <definition>constexpr const DataType * cend</definition>
        <argsstring>() const</argsstring>
        <name>cend</name>
        <qualifiedname>splinepy::utils::Array::cend</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/utils/arrays.hpp" line="129" column="28" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/utils/arrays.hpp" bodystart="129" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1utils_1_1Array_1ae6357bd53aff150a8d3c7b28c434bae9" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr IndexType</type>
        <definition>constexpr IndexType size</definition>
        <argsstring>() const</argsstring>
        <name>size</name>
        <qualifiedname>splinepy::utils::Array::size</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/utils/arrays.hpp" line="135" column="23" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/utils/arrays.hpp" bodystart="135" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1utils_1_1Array_1a03613a20fdeae22f60eaac6bf7fab4b7" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool OwnsData</definition>
        <argsstring>() const</argsstring>
        <name>OwnsData</name>
        <qualifiedname>splinepy::utils::Array::OwnsData</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/utils/arrays.hpp" line="137" column="18" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/utils/arrays.hpp" bodystart="137" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1utils_1_1Array_1af7f370671a60aa288380d6a31f28d12d" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr void</type>
        <definition>constexpr void DestroyData</definition>
        <argsstring>()</argsstring>
        <name>DestroyData</name>
        <qualifiedname>splinepy::utils::Array::DestroyData</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/utils/arrays.hpp" line="139" column="18" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/utils/arrays.hpp" bodystart="139" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1utils_1_1Array_1ab18e11dbcf6d82749f74437b18ca1341" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr void</type>
        <definition>constexpr void SetData</definition>
        <argsstring>(DataType *data_pointer)</argsstring>
        <name>SetData</name>
        <qualifiedname>splinepy::utils::Array::SetData</qualifiedname>
        <param>
          <type>DataType *</type>
          <declname>data_pointer</declname>
        </param>
        <briefdescription>
<para>clears current data and sets given pointer as beginning of data </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data_pointer</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/utils/arrays.hpp" line="150" column="18" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/utils/arrays.hpp" bodystart="150" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1utils_1_1Array_1a57a41e6c9403d8093ff5bbb1a61ca8d9" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type>constexpr void</type>
        <definition>constexpr void SetData</definition>
        <argsstring>(DataType *data_pointer, const Ts &amp;... shape)</argsstring>
        <name>SetData</name>
        <qualifiedname>splinepy::utils::Array::SetData</qualifiedname>
        <param>
          <type>DataType *</type>
          <declname>data_pointer</declname>
        </param>
        <param>
          <type>const Ts &amp;...</type>
          <declname>shape</declname>
        </param>
        <briefdescription>
<para>clears current data and sets given pointer as beginning of data sets shape of the array at the same time. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data_pointer</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...shape</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/utils/arrays.hpp" line="160" column="18" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/utils/arrays.hpp" bodystart="160" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1utils_1_1Array_1a89e795b04534e87e863089160f2c7a4c" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type>constexpr void</type>
        <definition>constexpr void SetOrReallocateData</definition>
        <argsstring>(DataType *data_pointer, const Ts &amp;... shape)</argsstring>
        <name>SetOrReallocateData</name>
        <qualifiedname>splinepy::utils::Array::SetOrReallocateData</qualifiedname>
        <param>
          <type>DataType *</type>
          <declname>data_pointer</declname>
        </param>
        <param>
          <type>const Ts &amp;...</type>
          <declname>shape</declname>
        </param>
        <briefdescription>
<para>similar to SetData, but checks if data_pointer is nullptr. If it is nullptr, it will reallocate instead. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data_pointer</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...shape</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/utils/arrays.hpp" line="171" column="18" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/utils/arrays.hpp" bodystart="171" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1utils_1_1Array_1a574182e5d66d9245406e3943f28a69f3" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr DataType *</type>
        <definition>constexpr DataType * GetData</definition>
        <argsstring>()</argsstring>
        <name>GetData</name>
        <qualifiedname>splinepy::utils::Array::GetData</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/utils/arrays.hpp" line="180" column="22" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/utils/arrays.hpp" bodystart="180" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1utils_1_1Array_1a0d2ddc103cb10577f04df4dd5c1984df" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr const DataType *</type>
        <definition>constexpr const DataType * GetData</definition>
        <argsstring>() const</argsstring>
        <name>GetData</name>
        <qualifiedname>splinepy::utils::Array::GetData</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/utils/arrays.hpp" line="185" column="28" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/utils/arrays.hpp" bodystart="185" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1utils_1_1Array_1acac93cd450c2b162dcc058a7850e5d7f" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr DataType *</type>
        <definition>constexpr DataType * TransferOwnership</definition>
        <argsstring>()</argsstring>
        <name>TransferOwnership</name>
        <qualifiedname>splinepy::utils::Array::TransferOwnership</qualifiedname>
        <briefdescription>
<para>Returns Data pointer and sets ownership to false. No error if this wasn&apos;t it&apos;s own data - then it&apos;d be same as <ref refid="classsplinepy_1_1utils_1_1Array_1a574182e5d66d9245406e3943f28a69f3" kindref="member">GetData()</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para></para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/utils/arrays.hpp" line="193" column="22" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/utils/arrays.hpp" bodystart="193" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1utils_1_1Array_1a68c19a2b0c830726dc9070fc61e054c6" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr void</type>
        <definition>constexpr void Reallocate</definition>
        <argsstring>(const IndexType &amp;size)</argsstring>
        <name>Reallocate</name>
        <qualifiedname>splinepy::utils::Array::Reallocate</qualifiedname>
        <param>
          <type>const IndexType &amp;</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>reallocates space. After this call, own_data_ should be true </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/utils/arrays.hpp" line="201" column="18" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/utils/arrays.hpp" bodystart="201" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1utils_1_1Array_1a5936300d802fdbb05407bcd51d53c8b5" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type>constexpr void</type>
        <definition>constexpr void Reallocate</definition>
        <argsstring>(const Ts &amp;... shape)</argsstring>
        <name>Reallocate</name>
        <qualifiedname>splinepy::utils::Array::Reallocate</qualifiedname>
        <param>
          <type>const Ts &amp;...</type>
          <declname>shape</declname>
        </param>
        <briefdescription>
<para>reallocate based on shape </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>...shape</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/utils/arrays.hpp" line="219" column="18" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/utils/arrays.hpp" bodystart="219" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1utils_1_1Array_1a34f61cd94ee615fbf76f998c21e50c77" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type>constexpr void</type>
        <definition>constexpr void SetShape</definition>
        <argsstring>(const IndexType &amp;shape0, const Ts &amp;... shape)</argsstring>
        <name>SetShape</name>
        <qualifiedname>splinepy::utils::Array::SetShape</qualifiedname>
        <param>
          <type>const IndexType &amp;</type>
          <declname>shape0</declname>
        </param>
        <param>
          <type>const Ts &amp;...</type>
          <declname>shape</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/utils/arrays.hpp" line="225" column="18" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/utils/arrays.hpp" bodystart="225" bodyend="255"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1utils_1_1Array_1aa097499ba4e6215595411f02110c6e16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Array</definition>
        <argsstring>()=default</argsstring>
        <name>Array</name>
        <qualifiedname>splinepy::utils::Array::Array</qualifiedname>
        <briefdescription>
<para>default. use <ref refid="classsplinepy_1_1utils_1_1Array_1ab18e11dbcf6d82749f74437b18ca1341" kindref="member">SetData()</ref> and SetShape&lt;false&gt; </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/utils/arrays.hpp" line="258" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1utils_1_1Array_1a6b50ed29ea8e97fdd0510a4fee427fa6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type></type>
        <definition>Array</definition>
        <argsstring>(const Ts &amp;... shape)</argsstring>
        <name>Array</name>
        <qualifiedname>splinepy::utils::Array::Array</qualifiedname>
        <param>
          <type>const Ts &amp;...</type>
          <declname>shape</declname>
        </param>
        <briefdescription>
<para>basic array ctor </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>...Ts</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>...shape</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/utils/arrays.hpp" line="264" column="3" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/utils/arrays.hpp" bodystart="264" bodyend="267"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1utils_1_1Array_1a1af0d7406b19289d4821975af1289061" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type></type>
        <definition>Array</definition>
        <argsstring>(DataType *data_pointer, const Ts &amp;... shape)</argsstring>
        <name>Array</name>
        <qualifiedname>splinepy::utils::Array::Array</qualifiedname>
        <param>
          <type>DataType *</type>
          <declname>data_pointer</declname>
        </param>
        <param>
          <type>const Ts &amp;...</type>
          <declname>shape</declname>
        </param>
        <briefdescription>
<para>data wrapping array </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>...Ts</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data_pointer</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...shape</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/utils/arrays.hpp" line="274" column="3" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/utils/arrays.hpp" bodystart="274" bodyend="277"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1utils_1_1Array_1a0b2d2aba2e64b58c980399838f60205c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Array</definition>
        <argsstring>(const Array &amp;other)</argsstring>
        <name>Array</name>
        <qualifiedname>splinepy::utils::Array::Array</qualifiedname>
        <param>
          <type>const <ref refid="classsplinepy_1_1utils_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>copy ctor </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/utils/arrays.hpp" line="281" column="3" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/utils/arrays.hpp" bodystart="281" bodyend="290"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1utils_1_1Array_1a2306865a953375e882f08d37e2ec3612" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Array</definition>
        <argsstring>(Array &amp;&amp;other)</argsstring>
        <name>Array</name>
        <qualifiedname>splinepy::utils::Array::Array</qualifiedname>
        <param>
          <type><ref refid="classsplinepy_1_1utils_1_1Array" kindref="compound">Array</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>move ctor </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/utils/arrays.hpp" line="294" column="3" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/utils/arrays.hpp" bodystart="294" bodyend="301"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1utils_1_1Array_1a3a5ccbef9e99b2b924031b41581915b6" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="classsplinepy_1_1utils_1_1Array" kindref="compound">Array</ref> &amp;</type>
        <definition>constexpr Array &amp; operator=</definition>
        <argsstring>(const Array &amp;rhs)</argsstring>
        <name>operator=</name>
        <qualifiedname>splinepy::utils::Array::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classsplinepy_1_1utils_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>copy assignment - need to make sure that you have enough space </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/utils/arrays.hpp" line="306" column="19" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/utils/arrays.hpp" bodystart="306" bodyend="319"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1utils_1_1Array_1acb8f743733b16d62d90621e05c767ae5" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="classsplinepy_1_1utils_1_1Array" kindref="compound">Array</ref> &amp;</type>
        <definition>constexpr Array &amp; operator=</definition>
        <argsstring>(Array &amp;&amp;rhs)</argsstring>
        <name>operator=</name>
        <qualifiedname>splinepy::utils::Array::operator=</qualifiedname>
        <param>
          <type><ref refid="classsplinepy_1_1utils_1_1Array" kindref="compound">Array</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>move assignment. currently same as ctor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/utils/arrays.hpp" line="324" column="19" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/utils/arrays.hpp" bodystart="324" bodyend="334"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1utils_1_1Array_1a9338ffdafb6c90a0d192ade96b24550a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>~Array</definition>
        <argsstring>()</argsstring>
        <name>~Array</name>
        <qualifiedname>splinepy::utils::Array::~Array</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/utils/arrays.hpp" line="337" column="3" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/utils/arrays.hpp" bodystart="337" bodyend="337"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1utils_1_1Array_1a02db495ee010f9bece0253abd19be955" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr const <ref refid="classsplinepy_1_1utils_1_1Array_1ace8c7b9eba68e41a0d6c21ea971637f6" kindref="member">ShapeType_</ref> &amp;</type>
        <definition>constexpr const ShapeType_ &amp; Shape</definition>
        <argsstring>() const</argsstring>
        <name>Shape</name>
        <qualifiedname>splinepy::utils::Array::Shape</qualifiedname>
        <briefdescription>
<para>Returns const shape object. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para></para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/utils/arrays.hpp" line="341" column="30" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/utils/arrays.hpp" bodystart="341" bodyend="341"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1utils_1_1Array_1a844d2ec67b63cbe3e7f52c229f148c77" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr const <ref refid="classsplinepy_1_1utils_1_1Array_1a844c863e21272c53f7a12829e69d8c59" kindref="member">StridesType_</ref> &amp;</type>
        <definition>constexpr const StridesType_ &amp; Strides</definition>
        <argsstring>() const</argsstring>
        <name>Strides</name>
        <qualifiedname>splinepy::utils::Array::Strides</qualifiedname>
        <briefdescription>
<para>Returns const strides object. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para></para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/utils/arrays.hpp" line="345" column="32" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/utils/arrays.hpp" bodystart="345" bodyend="345"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1utils_1_1Array_1afdf4f712668b497a832e44e9af958bd2" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr DataType &amp;</type>
        <definition>constexpr DataType &amp; operator[]</definition>
        <argsstring>(const IndexType &amp;index)</argsstring>
        <name>operator[]</name>
        <qualifiedname>splinepy::utils::Array::operator[]</qualifiedname>
        <param>
          <type>const IndexType &amp;</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>flat indexed array access </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/utils/arrays.hpp" line="350" column="22" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/utils/arrays.hpp" bodystart="350" bodyend="354"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1utils_1_1Array_1a0a18fa8d9a07d6e81de831272ff86e75" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr const DataType &amp;</type>
        <definition>constexpr const DataType &amp; operator[]</definition>
        <argsstring>(const IndexType &amp;index) const</argsstring>
        <name>operator[]</name>
        <qualifiedname>splinepy::utils::Array::operator[]</qualifiedname>
        <param>
          <type>const IndexType &amp;</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>flat indexed array access </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/utils/arrays.hpp" line="359" column="28" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/utils/arrays.hpp" bodystart="359" bodyend="363"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1utils_1_1Array_1a5a23bd1dcb38a3d875ff0a683dc3c76d" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type>constexpr DataType &amp;</type>
        <definition>constexpr DataType &amp; operator()</definition>
        <argsstring>(const IndexType &amp;id0, const Ts &amp;... id)</argsstring>
        <name>operator()</name>
        <qualifiedname>splinepy::utils::Array::operator()</qualifiedname>
        <param>
          <type>const IndexType &amp;</type>
          <declname>id0</declname>
        </param>
        <param>
          <type>const Ts &amp;...</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>multi-indexed array access </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>...Ts</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id0</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...id</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/utils/arrays.hpp" line="371" column="22" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/utils/arrays.hpp" bodystart="371" bodyend="387"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1utils_1_1Array_1ac0e7a6495d26c5ca09d3fc43442aa6db" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type>constexpr const DataType &amp;</type>
        <definition>constexpr const DataType &amp; operator()</definition>
        <argsstring>(const IndexType &amp;id0, const Ts &amp;... id) const</argsstring>
        <name>operator()</name>
        <qualifiedname>splinepy::utils::Array::operator()</qualifiedname>
        <param>
          <type>const IndexType &amp;</type>
          <declname>id0</declname>
        </param>
        <param>
          <type>const Ts &amp;...</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>multi-indexed array access </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>...Ts</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id0</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...id</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/utils/arrays.hpp" line="395" column="28" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/utils/arrays.hpp" bodystart="395" bodyend="413"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1utils_1_1Array_1a2a3ae24956524ab6b4b09d26074dd4a9" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr void</type>
        <definition>constexpr void Fill</definition>
        <argsstring>(const DataType &amp;v)</argsstring>
        <name>Fill</name>
        <qualifiedname>splinepy::utils::Array::Fill</qualifiedname>
        <param>
          <type>const DataType &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>this[:] = v </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/utils/arrays.hpp" line="417" column="18" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/utils/arrays.hpp" bodystart="417" bodyend="421"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1utils_1_1Array_1a20a0c63283fd0ead1d700b1cfdb9197e" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Iterable</type>
          </param>
        </templateparamlist>
        <type>constexpr void</type>
        <definition>constexpr void Add</definition>
        <argsstring>(const Iterable &amp;a)</argsstring>
        <name>Add</name>
        <qualifiedname>splinepy::utils::Array::Add</qualifiedname>
        <param>
          <type>const Iterable &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>this[i] += a[i] </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Iterable</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/utils/arrays.hpp" line="427" column="18" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/utils/arrays.hpp" bodystart="427" bodyend="434"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1utils_1_1Array_1a7661b3f6307753f2d8a977462aba7833" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Iterable</type>
          </param>
        </templateparamlist>
        <type>constexpr void</type>
        <definition>constexpr void Subtract</definition>
        <argsstring>(const Iterable &amp;a)</argsstring>
        <name>Subtract</name>
        <qualifiedname>splinepy::utils::Array::Subtract</qualifiedname>
        <param>
          <type>const Iterable &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>this[i] -= a[i] </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Iterable</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/utils/arrays.hpp" line="440" column="18" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/utils/arrays.hpp" bodystart="440" bodyend="447"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1utils_1_1Array_1ae8cfd9d9b04b87cff9ff818f960e5b3e" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Iterable</type>
          </param>
        </templateparamlist>
        <type>constexpr DataType</type>
        <definition>constexpr DataType InnerProduct</definition>
        <argsstring>(const Iterable &amp;a) const</argsstring>
        <name>InnerProduct</name>
        <qualifiedname>splinepy::utils::Array::InnerProduct</qualifiedname>
        <param>
          <type>const Iterable &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>c = (this) dot (a). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Iterable</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/utils/arrays.hpp" line="454" column="22" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/utils/arrays.hpp" bodystart="454" bodyend="466"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1utils_1_1Array_1ac133624a314eb42f8d550c9342670f54" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr DataType</type>
        <definition>constexpr DataType InnerProduct</definition>
        <argsstring>(const DataType *a) const</argsstring>
        <name>InnerProduct</name>
        <qualifiedname>splinepy::utils::Array::InnerProduct</qualifiedname>
        <param>
          <type>const DataType *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>c = (this) dot (*a). Assumes a is at least as long as this. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/utils/arrays.hpp" line="471" column="22" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/utils/arrays.hpp" bodystart="471" bodyend="482"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1utils_1_1Array_1a1dd42fb743734067f2f27248c16fb0c4" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr void</type>
        <definition>constexpr void AAt</definition>
        <argsstring>(Array &amp;aa_t) const</argsstring>
        <name>AAt</name>
        <qualifiedname>splinepy::utils::Array::AAt</qualifiedname>
        <param>
          <type><ref refid="classsplinepy_1_1utils_1_1Array" kindref="compound">Array</ref> &amp;</type>
          <declname>aa_t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/utils/arrays.hpp" line="484" column="18" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/utils/arrays.hpp" bodystart="484" bodyend="511"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1utils_1_1Array_1ae1ebfece8e76a5f9b074691cc6928845" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Iterable</type>
          </param>
          <param>
            <type>typename IntegerType</type>
          </param>
        </templateparamlist>
        <type>constexpr void</type>
        <definition>constexpr void Clip</definition>
        <argsstring>(const Iterable &amp;lower_bound, const Iterable &amp;upper_bound, Array&lt; IntegerType, dim, IndexType &gt; &amp;clipped)</argsstring>
        <name>Clip</name>
        <qualifiedname>splinepy::utils::Array::Clip</qualifiedname>
        <param>
          <type>const Iterable &amp;</type>
          <declname>lower_bound</declname>
        </param>
        <param>
          <type>const Iterable &amp;</type>
          <declname>upper_bound</declname>
        </param>
        <param>
          <type><ref refid="classsplinepy_1_1utils_1_1Array" kindref="compound">Array</ref>&lt; IntegerType, dim, IndexType &gt; &amp;</type>
          <declname>clipped</declname>
        </param>
        <briefdescription>
<para>given upper and lower bounds, clips data values inplace. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Iterable</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IntegerType</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lower_bound</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>upper_bound</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>clipped</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/utils/arrays.hpp" line="520" column="18" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/utils/arrays.hpp" bodystart="520" bodyend="550"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1utils_1_1Array_1ae833ba8788874c754dd5f98bdbe00519" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr DataType</type>
        <definition>constexpr DataType NormL2</definition>
        <argsstring>() const</argsstring>
        <name>NormL2</name>
        <qualifiedname>splinepy::utils::Array::NormL2</qualifiedname>
        <briefdescription>
<para>L2 norm. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para></para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/utils/arrays.hpp" line="554" column="22" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/utils/arrays.hpp" bodystart="554" bodyend="554"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1utils_1_1Array_1a7a904d0bfdde84468684f346057524de" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr DataType</type>
        <definition>constexpr DataType NormL2Squared</definition>
        <argsstring>() const</argsstring>
        <name>NormL2Squared</name>
        <qualifiedname>splinepy::utils::Array::NormL2Squared</qualifiedname>
        <briefdescription>
<para>squared euclidean norm </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para></para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/utils/arrays.hpp" line="558" column="22" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/utils/arrays.hpp" bodystart="558" bodyend="565"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1utils_1_1Array_1ac0db01798eb38c7569046d27e38065f0" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr IndexType</type>
        <definition>constexpr IndexType NonZeros</definition>
        <argsstring>() const</argsstring>
        <name>NonZeros</name>
        <qualifiedname>splinepy::utils::Array::NonZeros</qualifiedname>
        <briefdescription>
<para>returns number of non (exact) zero elements. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para></para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/utils/arrays.hpp" line="569" column="23" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/utils/arrays.hpp" bodystart="569" bodyend="577"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1utils_1_1Array_1a5f7ec1968ea2e9be6e8a783eb60cdf33" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr void</type>
        <definition>constexpr void FlipSign</definition>
        <argsstring>()</argsstring>
        <name>FlipSign</name>
        <qualifiedname>splinepy::utils::Array::FlipSign</qualifiedname>
        <briefdescription>
<para>flip sign of each elements </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/utils/arrays.hpp" line="580" column="18" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/utils/arrays.hpp" bodystart="580" bodyend="585"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1utils_1_1Array_1ac3d8d88fe12b48b6dde88e47255cb591" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename OutIndexType</type>
          </param>
        </templateparamlist>
        <type>constexpr void</type>
        <definition>constexpr void ArgSort</definition>
        <argsstring>(Array&lt; OutIndexType, 1, OutIndexType &gt; &amp;arg_sorted) const</argsstring>
        <name>ArgSort</name>
        <qualifiedname>splinepy::utils::Array::ArgSort</qualifiedname>
        <param>
          <type><ref refid="classsplinepy_1_1utils_1_1Array" kindref="compound">Array</ref>&lt; OutIndexType, 1, OutIndexType &gt; &amp;</type>
          <declname>arg_sorted</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/utils/arrays.hpp" line="589" column="3" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/utils/arrays.hpp" bodystart="589" bodyend="601"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>fully dynamic array </para>
    </briefdescription>
    <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>DataType</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dim</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>Array&lt; DataType, dim, IndexType &gt;</label>
        <link refid="classsplinepy_1_1utils_1_1Array"/>
      </node>
      <node id="7">
        <label>Array&lt; IndexType, 1, IndexType &gt;</label>
        <link refid="classsplinepy_1_1utils_1_1Array"/>
        <childnode refid="1" relation="template-instance">
          <edgelabel>&lt; IndexType, 1, IndexType &gt;</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>Array&lt; const double &gt;</label>
        <link refid="classsplinepy_1_1utils_1_1Array"/>
        <childnode refid="1" relation="template-instance">
          <edgelabel>&lt; const double &gt;</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>Array&lt; double &gt;</label>
        <link refid="classsplinepy_1_1utils_1_1Array"/>
        <childnode refid="1" relation="template-instance">
          <edgelabel>&lt; double &gt;</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>Array&lt; double, 2 &gt;</label>
        <link refid="classsplinepy_1_1utils_1_1Array"/>
        <childnode refid="1" relation="template-instance">
          <edgelabel>&lt; double, 2 &gt;</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>Array&lt; double, 3 &gt;</label>
        <link refid="classsplinepy_1_1utils_1_1Array"/>
        <childnode refid="1" relation="template-instance">
          <edgelabel>&lt; double, 3 &gt;</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>Array&lt; int &gt;</label>
        <link refid="classsplinepy_1_1utils_1_1Array"/>
        <childnode refid="1" relation="template-instance">
          <edgelabel>&lt; int &gt;</edgelabel>
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>Array&lt; DataType, dim, IndexType &gt;</label>
        <link refid="classsplinepy_1_1utils_1_1Array"/>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/splinepy/splinepy/include/splinepy/utils/arrays.hpp" line="42" column="1" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/utils/arrays.hpp" bodystart="42" bodyend="602"/>
    <listofallmembers>
      <member refid="classsplinepy_1_1utils_1_1Array_1a1dd42fb743734067f2f27248c16fb0c4" prot="public" virt="non-virtual"><scope>splinepy::utils::Array</scope><name>AAt</name></member>
      <member refid="classsplinepy_1_1utils_1_1Array_1a20a0c63283fd0ead1d700b1cfdb9197e" prot="public" virt="non-virtual"><scope>splinepy::utils::Array</scope><name>Add</name></member>
      <member refid="classsplinepy_1_1utils_1_1Array_1ac3d8d88fe12b48b6dde88e47255cb591" prot="public" virt="non-virtual"><scope>splinepy::utils::Array</scope><name>ArgSort</name></member>
      <member refid="classsplinepy_1_1utils_1_1Array_1aa097499ba4e6215595411f02110c6e16" prot="public" virt="non-virtual"><scope>splinepy::utils::Array</scope><name>Array</name></member>
      <member refid="classsplinepy_1_1utils_1_1Array_1a6b50ed29ea8e97fdd0510a4fee427fa6" prot="public" virt="non-virtual"><scope>splinepy::utils::Array</scope><name>Array</name></member>
      <member refid="classsplinepy_1_1utils_1_1Array_1a1af0d7406b19289d4821975af1289061" prot="public" virt="non-virtual"><scope>splinepy::utils::Array</scope><name>Array</name></member>
      <member refid="classsplinepy_1_1utils_1_1Array_1a0b2d2aba2e64b58c980399838f60205c" prot="public" virt="non-virtual"><scope>splinepy::utils::Array</scope><name>Array</name></member>
      <member refid="classsplinepy_1_1utils_1_1Array_1a2306865a953375e882f08d37e2ec3612" prot="public" virt="non-virtual"><scope>splinepy::utils::Array</scope><name>Array</name></member>
      <member refid="classsplinepy_1_1utils_1_1Array_1a40fdb350a061dc85e4f5729d013e701c" prot="public" virt="non-virtual"><scope>splinepy::utils::Array</scope><name>begin</name></member>
      <member refid="classsplinepy_1_1utils_1_1Array_1a708367ba8eb3d60de426241f8b74ccae" prot="public" virt="non-virtual"><scope>splinepy::utils::Array</scope><name>cbegin</name></member>
      <member refid="classsplinepy_1_1utils_1_1Array_1ae252bc8d9bbfda005dc6a1bd7314bf96" prot="public" virt="non-virtual"><scope>splinepy::utils::Array</scope><name>cend</name></member>
      <member refid="classsplinepy_1_1utils_1_1Array_1ae1ebfece8e76a5f9b074691cc6928845" prot="public" virt="non-virtual"><scope>splinepy::utils::Array</scope><name>Clip</name></member>
      <member refid="classsplinepy_1_1utils_1_1Array_1a517efc7086142a8b2b4be72a184dd4e7" prot="protected" virt="non-virtual"><scope>splinepy::utils::Array</scope><name>ComputeRemainingOffset</name></member>
      <member refid="classsplinepy_1_1utils_1_1Array_1a0d0cd9e243926ae8f9f0e13144e7f5ad" prot="public" virt="non-virtual"><scope>splinepy::utils::Array</scope><name>data</name></member>
      <member refid="classsplinepy_1_1utils_1_1Array_1ab46285c56bb025fccc33d39d05e0a60f" prot="public" virt="non-virtual"><scope>splinepy::utils::Array</scope><name>data</name></member>
      <member refid="classsplinepy_1_1utils_1_1Array_1a446297c547ebaf652c826cae0dcb96e8" prot="protected" virt="non-virtual"><scope>splinepy::utils::Array</scope><name>data_</name></member>
      <member refid="classsplinepy_1_1utils_1_1Array_1a7df28105bea7ae6d0d78a1a4da44e86b" prot="public" virt="non-virtual"><scope>splinepy::utils::Array</scope><name>DataType_</name></member>
      <member refid="classsplinepy_1_1utils_1_1Array_1af7f370671a60aa288380d6a31f28d12d" prot="public" virt="non-virtual"><scope>splinepy::utils::Array</scope><name>DestroyData</name></member>
      <member refid="classsplinepy_1_1utils_1_1Array_1af84a72c8309221e4487f0089cefea1c7" prot="public" virt="non-virtual"><scope>splinepy::utils::Array</scope><name>end</name></member>
      <member refid="classsplinepy_1_1utils_1_1Array_1a2a3ae24956524ab6b4b09d26074dd4a9" prot="public" virt="non-virtual"><scope>splinepy::utils::Array</scope><name>Fill</name></member>
      <member refid="classsplinepy_1_1utils_1_1Array_1a5f7ec1968ea2e9be6e8a783eb60cdf33" prot="public" virt="non-virtual"><scope>splinepy::utils::Array</scope><name>FlipSign</name></member>
      <member refid="classsplinepy_1_1utils_1_1Array_1a574182e5d66d9245406e3943f28a69f3" prot="public" virt="non-virtual"><scope>splinepy::utils::Array</scope><name>GetData</name></member>
      <member refid="classsplinepy_1_1utils_1_1Array_1a0d2ddc103cb10577f04df4dd5c1984df" prot="public" virt="non-virtual"><scope>splinepy::utils::Array</scope><name>GetData</name></member>
      <member refid="classsplinepy_1_1utils_1_1Array_1a95d51f45162d74c83a7e3c20471dcd6e" prot="public" virt="non-virtual"><scope>splinepy::utils::Array</scope><name>IndexType_</name></member>
      <member refid="classsplinepy_1_1utils_1_1Array_1ae8cfd9d9b04b87cff9ff818f960e5b3e" prot="public" virt="non-virtual"><scope>splinepy::utils::Array</scope><name>InnerProduct</name></member>
      <member refid="classsplinepy_1_1utils_1_1Array_1ac133624a314eb42f8d550c9342670f54" prot="public" virt="non-virtual"><scope>splinepy::utils::Array</scope><name>InnerProduct</name></member>
      <member refid="classsplinepy_1_1utils_1_1Array_1a0ada8d0106954f4b35edcd9ffe678686" prot="public" virt="non-virtual"><scope>splinepy::utils::Array</scope><name>kDim</name></member>
      <member refid="classsplinepy_1_1utils_1_1Array_1ac0db01798eb38c7569046d27e38065f0" prot="public" virt="non-virtual"><scope>splinepy::utils::Array</scope><name>NonZeros</name></member>
      <member refid="classsplinepy_1_1utils_1_1Array_1ae833ba8788874c754dd5f98bdbe00519" prot="public" virt="non-virtual"><scope>splinepy::utils::Array</scope><name>NormL2</name></member>
      <member refid="classsplinepy_1_1utils_1_1Array_1a7a904d0bfdde84468684f346057524de" prot="public" virt="non-virtual"><scope>splinepy::utils::Array</scope><name>NormL2Squared</name></member>
      <member refid="classsplinepy_1_1utils_1_1Array_1a5a23bd1dcb38a3d875ff0a683dc3c76d" prot="public" virt="non-virtual"><scope>splinepy::utils::Array</scope><name>operator()</name></member>
      <member refid="classsplinepy_1_1utils_1_1Array_1ac0e7a6495d26c5ca09d3fc43442aa6db" prot="public" virt="non-virtual"><scope>splinepy::utils::Array</scope><name>operator()</name></member>
      <member refid="classsplinepy_1_1utils_1_1Array_1a3a5ccbef9e99b2b924031b41581915b6" prot="public" virt="non-virtual"><scope>splinepy::utils::Array</scope><name>operator=</name></member>
      <member refid="classsplinepy_1_1utils_1_1Array_1acb8f743733b16d62d90621e05c767ae5" prot="public" virt="non-virtual"><scope>splinepy::utils::Array</scope><name>operator=</name></member>
      <member refid="classsplinepy_1_1utils_1_1Array_1afdf4f712668b497a832e44e9af958bd2" prot="public" virt="non-virtual"><scope>splinepy::utils::Array</scope><name>operator[]</name></member>
      <member refid="classsplinepy_1_1utils_1_1Array_1a0a18fa8d9a07d6e81de831272ff86e75" prot="public" virt="non-virtual"><scope>splinepy::utils::Array</scope><name>operator[]</name></member>
      <member refid="classsplinepy_1_1utils_1_1Array_1aa0a52906d4a2a37abafe4fd8e2b40668" prot="protected" virt="non-virtual"><scope>splinepy::utils::Array</scope><name>own_data_</name></member>
      <member refid="classsplinepy_1_1utils_1_1Array_1a03613a20fdeae22f60eaac6bf7fab4b7" prot="public" virt="non-virtual"><scope>splinepy::utils::Array</scope><name>OwnsData</name></member>
      <member refid="classsplinepy_1_1utils_1_1Array_1a68c19a2b0c830726dc9070fc61e054c6" prot="public" virt="non-virtual"><scope>splinepy::utils::Array</scope><name>Reallocate</name></member>
      <member refid="classsplinepy_1_1utils_1_1Array_1a5936300d802fdbb05407bcd51d53c8b5" prot="public" virt="non-virtual"><scope>splinepy::utils::Array</scope><name>Reallocate</name></member>
      <member refid="classsplinepy_1_1utils_1_1Array_1ab18e11dbcf6d82749f74437b18ca1341" prot="public" virt="non-virtual"><scope>splinepy::utils::Array</scope><name>SetData</name></member>
      <member refid="classsplinepy_1_1utils_1_1Array_1a57a41e6c9403d8093ff5bbb1a61ca8d9" prot="public" virt="non-virtual"><scope>splinepy::utils::Array</scope><name>SetData</name></member>
      <member refid="classsplinepy_1_1utils_1_1Array_1a89e795b04534e87e863089160f2c7a4c" prot="public" virt="non-virtual"><scope>splinepy::utils::Array</scope><name>SetOrReallocateData</name></member>
      <member refid="classsplinepy_1_1utils_1_1Array_1a34f61cd94ee615fbf76f998c21e50c77" prot="public" virt="non-virtual"><scope>splinepy::utils::Array</scope><name>SetShape</name></member>
      <member refid="classsplinepy_1_1utils_1_1Array_1a02db495ee010f9bece0253abd19be955" prot="public" virt="non-virtual"><scope>splinepy::utils::Array</scope><name>Shape</name></member>
      <member refid="classsplinepy_1_1utils_1_1Array_1a7baad4f9456800401f5dd9fc0991fbf4" prot="protected" virt="non-virtual"><scope>splinepy::utils::Array</scope><name>shape_</name></member>
      <member refid="classsplinepy_1_1utils_1_1Array_1ace8c7b9eba68e41a0d6c21ea971637f6" prot="public" virt="non-virtual"><scope>splinepy::utils::Array</scope><name>ShapeType_</name></member>
      <member refid="classsplinepy_1_1utils_1_1Array_1ae6357bd53aff150a8d3c7b28c434bae9" prot="public" virt="non-virtual"><scope>splinepy::utils::Array</scope><name>size</name></member>
      <member refid="classsplinepy_1_1utils_1_1Array_1a88aa79a90b0954ba0d578f5c3c40cd21" prot="protected" virt="non-virtual"><scope>splinepy::utils::Array</scope><name>size_</name></member>
      <member refid="classsplinepy_1_1utils_1_1Array_1a1ed20642c504789b157f2aa44832ada2" prot="public" virt="non-virtual"><scope>splinepy::utils::Array</scope><name>size_type</name></member>
      <member refid="classsplinepy_1_1utils_1_1Array_1a844d2ec67b63cbe3e7f52c229f148c77" prot="public" virt="non-virtual"><scope>splinepy::utils::Array</scope><name>Strides</name></member>
      <member refid="classsplinepy_1_1utils_1_1Array_1af8dc82d16f06e9409cc71ff795f9bd05" prot="protected" virt="non-virtual"><scope>splinepy::utils::Array</scope><name>strides_</name></member>
      <member refid="classsplinepy_1_1utils_1_1Array_1a844c863e21272c53f7a12829e69d8c59" prot="public" virt="non-virtual"><scope>splinepy::utils::Array</scope><name>StridesType_</name></member>
      <member refid="classsplinepy_1_1utils_1_1Array_1a7661b3f6307753f2d8a977462aba7833" prot="public" virt="non-virtual"><scope>splinepy::utils::Array</scope><name>Subtract</name></member>
      <member refid="classsplinepy_1_1utils_1_1Array_1acac93cd450c2b162dcc058a7850e5d7f" prot="public" virt="non-virtual"><scope>splinepy::utils::Array</scope><name>TransferOwnership</name></member>
      <member refid="classsplinepy_1_1utils_1_1Array_1a12946efe528d48c02aa751c0d42f3017" prot="public" virt="non-virtual"><scope>splinepy::utils::Array</scope><name>value_type</name></member>
      <member refid="classsplinepy_1_1utils_1_1Array_1a9338ffdafb6c90a0d192ade96b24550a" prot="public" virt="non-virtual"><scope>splinepy::utils::Array</scope><name>~Array</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
