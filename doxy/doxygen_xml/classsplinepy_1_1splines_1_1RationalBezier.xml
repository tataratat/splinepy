<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classsplinepy_1_1splines_1_1RationalBezier" kind="class" language="C++" prot="public">
    <compoundname>splinepy::splines::RationalBezier</compoundname>
    <basecompoundref refid="classsplinepy_1_1splines_1_1SplinepyBase" prot="public" virt="non-virtual">SplinepyBase</basecompoundref>
    <basecompoundref prot="public" virt="non-virtual">RationalBezierSplineType&lt; para_dim, dim &gt;</basecompoundref>
    <includes refid="splines_2rational__bezier_8hpp" local="no">rational_bezier.hpp</includes>
    <templateparamlist>
      <param>
        <type>std::size_t</type>
        <declname>para_dim</declname>
        <defname>para_dim</defname>
      </param>
      <param>
        <type>std::size_t</type>
        <declname>dim</declname>
        <defname>dim</defname>
      </param>
    </templateparamlist>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classsplinepy_1_1splines_1_1RationalBezier_1ad0d9b5c506ab3573df65a8d5a14ad73a" prot="public" static="no">
        <type><ref refid="classsplinepy_1_1splines_1_1SplinepyBase" kindref="compound">splinepy::splines::SplinepyBase</ref></type>
        <definition>using SplinepyBase_ =  splinepy::splines::SplinepyBase</definition>
        <argsstring></argsstring>
        <name>SplinepyBase_</name>
        <qualifiedname>splinepy::splines::RationalBezier::SplinepyBase_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.hpp" line="61" column="3" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.hpp" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classsplinepy_1_1splines_1_1RationalBezier_1ad07398d0d22bba77389b66e5ade57d10" prot="public" static="no">
        <type><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">typename</ref> <ref refid="classsplinepy_1_1splines_1_1SplinepyBase_1adc055961fdb5902289317a57a4e01a1b" kindref="member">SplinepyBase_::WeightedControlPointPointers_</ref></type>
        <definition>using WeightedControlPointPointers_ =  typename SplinepyBase_::WeightedControlPointPointers_</definition>
        <argsstring></argsstring>
        <name>WeightedControlPointPointers_</name>
        <qualifiedname>splinepy::splines::RationalBezier::WeightedControlPointPointers_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.hpp" line="62" column="3" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.hpp" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classsplinepy_1_1splines_1_1RationalBezier_1a8b515a4638167cbb3d30b30105ed49e4" prot="public" static="no">
        <type><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">typename</ref> <ref refid="classsplinepy_1_1splines_1_1SplinepyBase_1a4f5e1e4fe61bfc1f496d90985e18a938" kindref="member">SplinepyBase_::WeightPointers_</ref></type>
        <definition>using WeightPointers_ =  typename SplinepyBase_::WeightPointers_</definition>
        <argsstring></argsstring>
        <name>WeightPointers_</name>
        <qualifiedname>splinepy::splines::RationalBezier::WeightPointers_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.hpp" line="64" column="3" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.hpp" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classsplinepy_1_1splines_1_1RationalBezier_1aac7f3625301a8ac787db50365049177a" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>std::size_t</type>
            <declname>s_para_dim</declname>
            <defname>s_para_dim</defname>
          </param>
          <param>
            <type>std::size_t</type>
            <declname>s_dim</declname>
            <defname>s_dim</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classsplinepy_1_1splines_1_1RationalBezier" kindref="compound">RationalBezier</ref>&lt; <ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">s_para_dim</ref>, <ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">s_dim</ref> &gt;</type>
        <definition>using SelfTemplate_ =  RationalBezier&lt;s_para_dim, s_dim&gt;</definition>
        <argsstring></argsstring>
        <name>SelfTemplate_</name>
        <qualifiedname>splinepy::splines::RationalBezier::SelfTemplate_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.hpp" line="68" column="3" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.hpp" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classsplinepy_1_1splines_1_1RationalBezier_1a4901bd43907ea496221048f74d61f402" prot="public" static="no">
        <type><ref refid="classsplinepy_1_1splines_1_1RationalBezier" kindref="compound">RationalBezier</ref>&lt; para_dim - 1, dim &gt;</type>
        <definition>using BoundaryType_ =  RationalBezier&lt;para_dim - 1, dim&gt;</definition>
        <argsstring></argsstring>
        <name>BoundaryType_</name>
        <qualifiedname>splinepy::splines::RationalBezier::BoundaryType_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.hpp" line="70" column="3" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.hpp" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classsplinepy_1_1splines_1_1RationalBezier_1a1be695544b8f365ecfde807473a48087" prot="public" static="no">
        <type><ref refid="namespacesplinepy_1_1splines_1ac7d6d249cbfbd419edc7324547215a62" kindref="member">RationalBezierSplineType</ref>&lt; para_dim, dim &gt;</type>
        <definition>using Base_ =  RationalBezierSplineType&lt;para_dim, dim&gt;</definition>
        <argsstring></argsstring>
        <name>Base_</name>
        <qualifiedname>splinepy::splines::RationalBezier::Base_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.hpp" line="73" column="3" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.hpp" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classsplinepy_1_1splines_1_1RationalBezier_1a105d5d135cd13dfc2bdaaa5d518807c8" prot="public" static="no">
        <type><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">typename</ref> bezman::Point&lt; para_dim, <ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">double</ref> &gt;</type>
        <definition>using ParametricCoordinate_ =  typename bezman::Point&lt;para_dim, double&gt;</definition>
        <argsstring></argsstring>
        <name>ParametricCoordinate_</name>
        <qualifiedname>splinepy::splines::RationalBezier::ParametricCoordinate_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.hpp" line="75" column="3" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.hpp" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classsplinepy_1_1splines_1_1RationalBezier_1abcf87a110cc88b5bd29c8d3ef1ff0c3b" prot="public" static="no">
        <type><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">typename</ref> std::array&lt; std::size_t, para_dim &gt;</type>
        <definition>using Degrees_ =  typename std::array&lt;std::size_t, para_dim&gt;</definition>
        <argsstring></argsstring>
        <name>Degrees_</name>
        <qualifiedname>splinepy::splines::RationalBezier::Degrees_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.hpp" line="76" column="3" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.hpp" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classsplinepy_1_1splines_1_1RationalBezier_1aaca1d2c801d643e6975e97e82cb9b68b" prot="public" static="no">
        <type><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">typename</ref> <ref refid="classsplinepy_1_1splines_1_1BSpline_1a5a569c31db6125022ae6673be3e3ba52" kindref="member">Base_::PhysicalPointType_</ref></type>
        <definition>using Coordinate_ =  typename Base_::PhysicalPointType_</definition>
        <argsstring></argsstring>
        <name>Coordinate_</name>
        <qualifiedname>splinepy::splines::RationalBezier::Coordinate_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.hpp" line="77" column="3" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.hpp" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classsplinepy_1_1splines_1_1RationalBezier_1a5ffc4405bae9fc25b79b0f9959d57ee2" prot="public" static="no">
        <type><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">typename</ref> std::vector&lt; <ref refid="classsplinepy_1_1splines_1_1RationalBezier_1aaca1d2c801d643e6975e97e82cb9b68b" kindref="member">Coordinate_</ref> &gt;</type>
        <definition>using Coordinates_ =  typename std::vector&lt;Coordinate_&gt;</definition>
        <argsstring></argsstring>
        <name>Coordinates_</name>
        <qualifiedname>splinepy::splines::RationalBezier::Coordinates_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.hpp" line="78" column="3" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.hpp" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classsplinepy_1_1splines_1_1RationalBezier_1a3431b783fae0066f058e1834f52ca36e" prot="public" static="no">
        <type><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">typename</ref> <ref refid="classsplinepy_1_1splines_1_1BSpline_1a5a569c31db6125022ae6673be3e3ba52" kindref="member">Base_::ScalarType_</ref></type>
        <definition>using Weight_ =  typename Base_::ScalarType_</definition>
        <argsstring></argsstring>
        <name>Weight_</name>
        <qualifiedname>splinepy::splines::RationalBezier::Weight_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.hpp" line="79" column="3" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.hpp" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classsplinepy_1_1splines_1_1RationalBezier_1aa1b46e064c187fc4dcc6489713c5b69c" prot="public" static="no">
        <type><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">typename</ref> std::array&lt; std::size_t, para_dim &gt;</type>
        <definition>using Derivative_ =  typename std::array&lt;std::size_t, para_dim&gt;</definition>
        <argsstring></argsstring>
        <name>Derivative_</name>
        <qualifiedname>splinepy::splines::RationalBezier::Derivative_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.hpp" line="80" column="3" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.hpp" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classsplinepy_1_1splines_1_1RationalBezier_1aee53aa3b3dab35b50d619eb6d7d64940" prot="public" static="no">
        <type>std::size_t</type>
        <definition>using Dimension_ =  std::size_t</definition>
        <argsstring></argsstring>
        <name>Dimension_</name>
        <qualifiedname>splinepy::splines::RationalBezier::Dimension_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.hpp" line="81" column="3" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.hpp" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classsplinepy_1_1splines_1_1RationalBezier_1af25be4433e4f4a2cdaba20195b042eff" prot="public" static="no">
        <type><ref refid="classsplinepy_1_1proximity_1_1Proximity" kindref="compound">splinepy::proximity::Proximity</ref></type>
        <definition>using Proximity_ =  splinepy::proximity::Proximity</definition>
        <argsstring></argsstring>
        <name>Proximity_</name>
        <qualifiedname>splinepy::splines::RationalBezier::Proximity_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.hpp" line="83" column="3" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.hpp" bodystart="83" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classsplinepy_1_1splines_1_1RationalBezier_1a8032d06d9c896fd0a551f5070eea21c5" prot="public" static="yes" constexpr="yes" mutable="no">
        <type><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">constexpr</ref> <ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">int</ref></type>
        <definition>constexpr int kParaDim</definition>
        <argsstring></argsstring>
        <name>kParaDim</name>
        <qualifiedname>splinepy::splines::RationalBezier::kParaDim</qualifiedname>
        <initializer>= <ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">static_cast</ref>&lt;<ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">int</ref>&gt;(para_dim)</initializer>
        <briefdescription>
<para>Parametric dimension. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.hpp" line="53" column="24" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.hpp" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classsplinepy_1_1splines_1_1RationalBezier_1a09f7e0710eaf58e3a373b2c514e41967" prot="public" static="yes" constexpr="yes" mutable="no">
        <type><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">constexpr</ref> <ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">int</ref></type>
        <definition>constexpr int kDim</definition>
        <argsstring></argsstring>
        <name>kDim</name>
        <qualifiedname>splinepy::splines::RationalBezier::kDim</qualifiedname>
        <initializer>= <ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">static_cast</ref>&lt;<ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">int</ref>&gt;(dim)</initializer>
        <briefdescription>
<para>Physical dimension. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.hpp" line="55" column="24" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.hpp" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classsplinepy_1_1splines_1_1RationalBezier_1a61ce0c82e3321630130cde7c22bba55d" prot="public" static="yes" constexpr="yes" mutable="no">
        <type><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">constexpr</ref> <ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">bool</ref></type>
        <definition>constexpr bool kIsRational</definition>
        <argsstring></argsstring>
        <name>kIsRational</name>
        <qualifiedname>splinepy::splines::RationalBezier::kIsRational</qualifiedname>
        <initializer>= <ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">true</ref></initializer>
        <briefdescription>
<para>True iff it is rational <ref refid="classsplinepy_1_1splines_1_1Bezier" kindref="compound">Bezier</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.hpp" line="57" column="25" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.hpp" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classsplinepy_1_1splines_1_1RationalBezier_1a2f325b26d4ab0f18cd453c784ff1d0c9" prot="public" static="yes" constexpr="yes" mutable="no">
        <type><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">constexpr</ref> <ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">bool</ref></type>
        <definition>constexpr bool kHasKnotVectors</definition>
        <argsstring></argsstring>
        <name>kHasKnotVectors</name>
        <qualifiedname>splinepy::splines::RationalBezier::kHasKnotVectors</qualifiedname>
        <initializer>= <ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">false</ref></initializer>
        <briefdescription>
<para>True iff it has knot vectors. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.hpp" line="59" column="25" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.hpp" bodystart="59" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classsplinepy_1_1splines_1_1RationalBezier_1a39f7fc544822bdc30499730036603f1c" prot="protected" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="classsplinepy_1_1splines_1_1RationalBezier_1af25be4433e4f4a2cdaba20195b042eff" kindref="member">Proximity_</ref> &gt;</type>
        <definition>std::shared_ptr&lt;Proximity_&gt; proximity_</definition>
        <argsstring></argsstring>
        <name>proximity_</name>
        <qualifiedname>splinepy::splines::RationalBezier::proximity_</qualifiedname>
        <initializer>= std::make_shared&lt;<ref refid="classsplinepy_1_1splines_1_1RationalBezier_1af25be4433e4f4a2cdaba20195b042eff" kindref="member">Proximity_</ref>&gt;(*<ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">this</ref>)</initializer>
        <briefdescription>
<para>Shared pointer to proximity. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.hpp" line="315" column="19" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.hpp" bodystart="315" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classsplinepy_1_1splines_1_1RationalBezier_1af2418b2cbb12d2ce9df0a3a3cd7a2e1b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsplinepy_1_1splines_1_1RationalBezier_1a1be695544b8f365ecfde807473a48087" kindref="member">Base_</ref></type>
        <definition>RationalBezier&lt; para_dim, dim &gt;::Base_ CreateBase</definition>
        <argsstring>(const int *degrees, const double *control_points, const double *weights)</argsstring>
        <name>CreateBase</name>
        <qualifiedname>splinepy::splines::RationalBezier::CreateBase</qualifiedname>
        <param>
          <type><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">const</ref> <ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">int</ref> *</type>
          <declname>degrees</declname>
        </param>
        <param>
          <type><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">const</ref> <ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">double</ref> *</type>
          <declname>control_points</declname>
        </param>
        <param>
          <type><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">const</ref> <ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">double</ref> *</type>
          <declname>weights</declname>
        </param>
        <briefdescription>
<para>Create base. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>degrees</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>control_points</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weights</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.hpp" line="90" column="16" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.inl" bodystart="36" bodyend="65"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classsplinepy_1_1splines_1_1RationalBezier_1a2195be1cb2827491a2cbb4f5d41f0d56" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>RationalBezier</definition>
        <argsstring>(const int *degrees, const double *control_points, const double *weights)</argsstring>
        <name>RationalBezier</name>
        <qualifiedname>splinepy::splines::RationalBezier::RationalBezier</qualifiedname>
        <param>
          <type><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">const</ref> <ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">int</ref> *</type>
          <declname>degrees</declname>
        </param>
        <param>
          <type><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">const</ref> <ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">double</ref> *</type>
          <declname>control_points</declname>
        </param>
        <param>
          <type><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">const</ref> <ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">double</ref> *</type>
          <declname>weights</declname>
        </param>
        <briefdescription>
<para>Construct a new Rational <ref refid="classsplinepy_1_1splines_1_1Bezier" kindref="compound">Bezier</ref> spline based on raw pointer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>degrees</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>control_points</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weights</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.hpp" line="98" column="3" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.hpp" bodystart="98" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1splines_1_1RationalBezier_1aebc814e7556505fdbffacf8d70b18201" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>RationalBezier</definition>
        <argsstring>(const Base_ &amp;rhs)</argsstring>
        <name>RationalBezier</name>
        <qualifiedname>splinepy::splines::RationalBezier::RationalBezier</qualifiedname>
        <param>
          <type><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">const</ref> <ref refid="classsplinepy_1_1splines_1_1RationalBezier_1a1be695544b8f365ecfde807473a48087" kindref="member">Base_</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Base (copy) constructor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.hpp" line="105" column="3" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.hpp" bodystart="105" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1splines_1_1RationalBezier_1ac866d368a93d910cd1e150bc2ceeba2f" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">constexpr</ref> <ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">auto</ref></type>
        <definition>constexpr auto operator()</definition>
        <argsstring>(const ParametricCoordinate_ &amp;query) const</argsstring>
        <name>operator()</name>
        <qualifiedname>splinepy::splines::RationalBezier::operator()</qualifiedname>
        <param>
          <type><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">const</ref> <ref refid="classsplinepy_1_1splines_1_1RationalBezier_1a105d5d135cd13dfc2bdaaa5d518807c8" kindref="member">ParametricCoordinate_</ref> &amp;</type>
          <declname>query</declname>
        </param>
        <briefdescription>
<para>Function wrapper, also for helper functions. Evaluates query parametric coordinate. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>query</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.hpp" line="113" column="18" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.inl" bodystart="68" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1splines_1_1RationalBezier_1ab10a0286f45741df4e09ab99300feef0" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">constexpr</ref> <ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">auto</ref></type>
        <definition>constexpr auto operator()</definition>
        <argsstring>(const ParametricCoordinate_ &amp;query, const Derivative_ &amp;order) const</argsstring>
        <name>operator()</name>
        <qualifiedname>splinepy::splines::RationalBezier::operator()</qualifiedname>
        <param>
          <type><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">const</ref> <ref refid="classsplinepy_1_1splines_1_1RationalBezier_1a105d5d135cd13dfc2bdaaa5d518807c8" kindref="member">ParametricCoordinate_</ref> &amp;</type>
          <declname>query</declname>
        </param>
        <param>
          <type><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">const</ref> <ref refid="classsplinepy_1_1splines_1_1RationalBezier_1aa1b46e064c187fc4dcc6489713c5b69c" kindref="member">Derivative_</ref> &amp;</type>
          <declname>order</declname>
        </param>
        <briefdescription>
<para>Evaluates derivative of spline. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>query</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>order</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.hpp" line="118" column="18" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.inl" bodystart="75" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1splines_1_1RationalBezier_1a295928c8177dccebb36ad246b2af01af" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">constexpr</ref> <ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">auto</ref></type>
        <definition>constexpr auto ElevateDegree</definition>
        <argsstring>(const Dimension_ p_dim)</argsstring>
        <name>ElevateDegree</name>
        <qualifiedname>splinepy::splines::RationalBezier::ElevateDegree</qualifiedname>
        <param>
          <type><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">const</ref> <ref refid="classsplinepy_1_1splines_1_1RationalBezier_1aee53aa3b3dab35b50d619eb6d7d64940" kindref="member">Dimension_</ref></type>
          <declname>p_dim</declname>
        </param>
        <briefdescription>
<para>Elevate degree. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_dim</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.hpp" line="123" column="18" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.inl" bodystart="82" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1splines_1_1RationalBezier_1ad0b0e5b72a509032ee74ce3af1df08ca" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">int</ref></type>
        <definition>virtual int SplinepyParaDim</definition>
        <argsstring>() const</argsstring>
        <name>SplinepyParaDim</name>
        <qualifiedname>splinepy::splines::RationalBezier::SplinepyParaDim</qualifiedname>
        <reimplements refid="classsplinepy_1_1splines_1_1SplinepyBase_1a997118cc64f6c3d827933652a0e06a25">SplinepyParaDim</reimplements>
        <briefdescription>
<para>Parametric dimension. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.hpp" line="127" column="15" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.hpp" bodystart="127" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1splines_1_1RationalBezier_1addafa95d18f804ff9b6565cc69b9b441" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">int</ref></type>
        <definition>virtual int SplinepyDim</definition>
        <argsstring>() const</argsstring>
        <name>SplinepyDim</name>
        <qualifiedname>splinepy::splines::RationalBezier::SplinepyDim</qualifiedname>
        <reimplements refid="classsplinepy_1_1splines_1_1SplinepyBase_1ae2dd295617527f88b933ca007619ba06">SplinepyDim</reimplements>
        <briefdescription>
<para>Physical dimension. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.hpp" line="130" column="15" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.hpp" bodystart="130" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1splines_1_1RationalBezier_1ae9e589febdb3931dc5edf33b83e6ed81" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>std::string</type>
        <definition>virtual std::string SplinepySplineName</definition>
        <argsstring>() const</argsstring>
        <name>SplinepySplineName</name>
        <qualifiedname>splinepy::splines::RationalBezier::SplinepySplineName</qualifiedname>
        <reimplements refid="classsplinepy_1_1splines_1_1SplinepyBase_1a96f3192b27218f7d53d83cf18bf5ee81">SplinepySplineName</reimplements>
        <briefdescription>
<para>Name of <ref refid="classsplinepy_1_1splines_1_1Bezier" kindref="compound">Bezier</ref> curve. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.hpp" line="133" column="23" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.hpp" bodystart="133" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1splines_1_1RationalBezier_1a0164ebf3b3d2364894b747ab27772bfe" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>std::string</type>
        <definition>virtual std::string SplinepyWhatAmI</definition>
        <argsstring>() const</argsstring>
        <name>SplinepyWhatAmI</name>
        <qualifiedname>splinepy::splines::RationalBezier::SplinepyWhatAmI</qualifiedname>
        <reimplements refid="classsplinepy_1_1splines_1_1SplinepyBase_1abefc95435c3aa85747558d2f74cfd1f3">SplinepyWhatAmI</reimplements>
        <briefdescription>
<para>What am I? </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>String </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.hpp" line="137" column="23" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.hpp" bodystart="137" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1splines_1_1RationalBezier_1a11ac3093e1244d3bcf9e8434acc37a5f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">bool</ref></type>
        <definition>virtual bool SplinepyHasKnotVectors</definition>
        <argsstring>() const</argsstring>
        <name>SplinepyHasKnotVectors</name>
        <qualifiedname>splinepy::splines::RationalBezier::SplinepyHasKnotVectors</qualifiedname>
        <reimplements refid="classsplinepy_1_1splines_1_1SplinepyBase_1af3bd0735a49bd8e375b06f562d3f3341">SplinepyHasKnotVectors</reimplements>
        <briefdescription>
<para>Returns true iff <ref refid="classsplinepy_1_1splines_1_1Bezier" kindref="compound">Bezier</ref> curve has knot vectors. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.hpp" line="144" column="16" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.hpp" bodystart="144" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1splines_1_1RationalBezier_1aa69c5b2aa3411e4f1b78332e0b6a2265" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">bool</ref></type>
        <definition>virtual bool SplinepyIsRational</definition>
        <argsstring>() const</argsstring>
        <name>SplinepyIsRational</name>
        <qualifiedname>splinepy::splines::RationalBezier::SplinepyIsRational</qualifiedname>
        <reimplements refid="classsplinepy_1_1splines_1_1SplinepyBase_1a94e746bab5a7210db8dae6981a6aef14">SplinepyIsRational</reimplements>
        <briefdescription>
<para>Returns true iff <ref refid="classsplinepy_1_1splines_1_1Bezier" kindref="compound">Bezier</ref> curve is rational. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Bool </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.hpp" line="148" column="16" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.hpp" bodystart="148" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1splines_1_1RationalBezier_1a7b497cd52107288f7bf90fefbfb313e2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">int</ref></type>
        <definition>int SplinepyNumberOfControlPoints</definition>
        <argsstring>() const</argsstring>
        <name>SplinepyNumberOfControlPoints</name>
        <qualifiedname>splinepy::splines::RationalBezier::SplinepyNumberOfControlPoints</qualifiedname>
        <reimplements refid="classsplinepy_1_1splines_1_1SplinepyBase_1ae1c06aea93c8a42d13959c78481416b8">SplinepyNumberOfControlPoints</reimplements>
        <briefdescription>
<para>Number of control points. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>int </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.hpp" line="152" column="15" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.inl" bodystart="87" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1splines_1_1RationalBezier_1a14e0d96a5aa8c07d510779cc6b4a2d1c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">int</ref></type>
        <definition>int SplinepyNumberOfSupports</definition>
        <argsstring>() const</argsstring>
        <name>SplinepyNumberOfSupports</name>
        <qualifiedname>splinepy::splines::RationalBezier::SplinepyNumberOfSupports</qualifiedname>
        <reimplements refid="classsplinepy_1_1splines_1_1SplinepyBase_1ade6ccd2d2e8897dab6f3950b4b905f48">SplinepyNumberOfSupports</reimplements>
        <briefdescription>
<para>Number of supports. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>int </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.hpp" line="156" column="15" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.inl" bodystart="92" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1splines_1_1RationalBezier_1a8da72da204720cf17f091b5de850ad14" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">void</ref></type>
        <definition>void SplinepyCurrentProperties</definition>
        <argsstring>(int *degrees, std::vector&lt; std::vector&lt; double &gt; &gt; *knot_vectors, double *control_points, double *weights) const</argsstring>
        <name>SplinepyCurrentProperties</name>
        <qualifiedname>splinepy::splines::RationalBezier::SplinepyCurrentProperties</qualifiedname>
        <reimplements refid="classsplinepy_1_1splines_1_1SplinepyBase_1a564417931b0928831766ba61a5ac1ab6">SplinepyCurrentProperties</reimplements>
        <param>
          <type><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">int</ref> *</type>
          <declname>degrees</declname>
        </param>
        <param>
          <type>std::vector&lt; std::vector&lt; <ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">double</ref> &gt; &gt; *</type>
          <declname>knot_vectors</declname>
        </param>
        <param>
          <type><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">double</ref> *</type>
          <declname>control_points</declname>
        </param>
        <param>
          <type><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">double</ref> *</type>
          <declname>weights</declname>
        </param>
        <briefdescription>
<para>Current properties. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.hpp" line="159" column="16" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.inl" bodystart="97" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1splines_1_1RationalBezier_1a8e0889eaef9c19858a2518d7ec702ee8" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>std::shared_ptr&lt; <ref refid="classsplinepy_1_1splines_1_1RationalBezier_1ad07398d0d22bba77389b66e5ade57d10" kindref="member">WeightedControlPointPointers_</ref> &gt;</type>
        <definition>std::shared_ptr&lt; typename RationalBezier&lt; para_dim, dim &gt;::WeightedControlPointPointers_ &gt; SplinepyWeightedControlPointPointers</definition>
        <argsstring>()</argsstring>
        <name>SplinepyWeightedControlPointPointers</name>
        <qualifiedname>splinepy::splines::RationalBezier::SplinepyWeightedControlPointPointers</qualifiedname>
        <reimplements refid="classsplinepy_1_1splines_1_1SplinepyBase_1a34564c79b8de33a2ad8bbbc2b7499c23">SplinepyWeightedControlPointPointers</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.hpp" line="166" column="3" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.inl" bodystart="136" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1splines_1_1RationalBezier_1a1098dc0849393b10e09095c96f55d8d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>std::shared_ptr&lt; <ref refid="classsplinepy_1_1splines_1_1RationalBezier_1a8b515a4638167cbb3d30b30105ed49e4" kindref="member">WeightPointers_</ref> &gt;</type>
        <definition>std::shared_ptr&lt; typename RationalBezier&lt; para_dim, dim &gt;::WeightPointers_ &gt; SplinepyWeightPointers</definition>
        <argsstring>()</argsstring>
        <name>SplinepyWeightPointers</name>
        <qualifiedname>splinepy::splines::RationalBezier::SplinepyWeightPointers</qualifiedname>
        <reimplements refid="classsplinepy_1_1splines_1_1SplinepyBase_1a955f6e0c10f3df22e8d13034b9b619f7">SplinepyWeightPointers</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.hpp" line="168" column="27" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.inl" bodystart="176" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1splines_1_1RationalBezier_1ad2869f6460d00786e925884afda6ab16" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">void</ref></type>
        <definition>void SplinepyParametricBounds</definition>
        <argsstring>(double *para_bounds) const</argsstring>
        <name>SplinepyParametricBounds</name>
        <qualifiedname>splinepy::splines::RationalBezier::SplinepyParametricBounds</qualifiedname>
        <reimplements refid="classsplinepy_1_1splines_1_1SplinepyBase_1ad2869f6460d00786e925884afda6ab16">SplinepyParametricBounds</reimplements>
        <param>
          <type><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">double</ref> *</type>
          <declname>para_bounds</declname>
        </param>
        <briefdescription>
<para>Parameter space AABB. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>para_bounds</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.hpp" line="170" column="16" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.inl" bodystart="181" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1splines_1_1RationalBezier_1a82c7531c75207a9c4c1ce2ee287d6d80" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">void</ref></type>
        <definition>void SplinepyControlMeshResolutions</definition>
        <argsstring>(int *control_mesh_res) const</argsstring>
        <name>SplinepyControlMeshResolutions</name>
        <qualifiedname>splinepy::splines::RationalBezier::SplinepyControlMeshResolutions</qualifiedname>
        <reimplements refid="classsplinepy_1_1splines_1_1SplinepyBase_1a82c7531c75207a9c4c1ce2ee287d6d80">SplinepyControlMeshResolutions</reimplements>
        <param>
          <type><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">int</ref> *</type>
          <declname>control_mesh_res</declname>
        </param>
        <briefdescription>
<para>Control mesh resoltuons - number of control points per para dim. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>control_mesh_res</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.hpp" line="172" column="16" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.inl" bodystart="192" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1splines_1_1RationalBezier_1a937737f903b962b14b75911ad87ea980" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">void</ref></type>
        <definition>void SplinepyGrevilleAbscissae</definition>
        <argsstring>(double *greville_abscissae, const int &amp;i_para_dim, const double &amp;duplicate_tolerance) const</argsstring>
        <name>SplinepyGrevilleAbscissae</name>
        <qualifiedname>splinepy::splines::RationalBezier::SplinepyGrevilleAbscissae</qualifiedname>
        <reimplements refid="classsplinepy_1_1splines_1_1SplinepyBase_1a937737f903b962b14b75911ad87ea980">SplinepyGrevilleAbscissae</reimplements>
        <param>
          <type><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">double</ref> *</type>
          <declname>greville_abscissae</declname>
        </param>
        <param>
          <type><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">const</ref> <ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">int</ref> &amp;</type>
          <declname>i_para_dim</declname>
        </param>
        <param>
          <type><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">const</ref> <ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">double</ref> &amp;</type>
          <declname>duplicate_tolerance</declname>
        </param>
        <briefdescription>
<para>Calculate Greville abscissae for Rational <ref refid="classsplinepy_1_1splines_1_1Bezier" kindref="compound">Bezier</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">greville_abscissae</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to solution </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">i_para_dim</parametername>
</parameternamelist>
<parameterdescription>
<para>parametric dimension </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">duplicate_tolerance</parametername>
</parameternamelist>
<parameterdescription>
<para>if negative two greville abscissae can be equal, positive tolerance to avoid duplication of greville abscissae. Made to comply with C^(-1) splines. Tolerance represents difference between two greville abscissae for them to be considered equal </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.hpp" line="185" column="3" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.inl" bodystart="200" bodyend="208"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1splines_1_1RationalBezier_1af44d40483deab0f4f5d3901073b63c2c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">void</ref></type>
        <definition>void SplinepyEvaluate</definition>
        <argsstring>(const double *para_coord, double *evaluated) const</argsstring>
        <name>SplinepyEvaluate</name>
        <qualifiedname>splinepy::splines::RationalBezier::SplinepyEvaluate</qualifiedname>
        <reimplements refid="classsplinepy_1_1splines_1_1SplinepyBase_1af44d40483deab0f4f5d3901073b63c2c">SplinepyEvaluate</reimplements>
        <param>
          <type><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">const</ref> <ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">double</ref> *</type>
          <declname>para_coord</declname>
        </param>
        <param>
          <type><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">double</ref> *</type>
          <declname>evaluated</declname>
        </param>
        <briefdescription>
<para>Evaluate spline. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">para_coord</parametername>
</parameternamelist>
<parameterdescription>
<para>Parametric coordinates </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">evaluated</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.hpp" line="189" column="16" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.inl" bodystart="211" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1splines_1_1RationalBezier_1a1623b3917d83d47770045b0277ae0702" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">void</ref></type>
        <definition>void SplinepyDerivative</definition>
        <argsstring>(const double *para_coord, const int *orders, double *derived) const</argsstring>
        <name>SplinepyDerivative</name>
        <qualifiedname>splinepy::splines::RationalBezier::SplinepyDerivative</qualifiedname>
        <reimplements refid="classsplinepy_1_1splines_1_1SplinepyBase_1a1623b3917d83d47770045b0277ae0702">SplinepyDerivative</reimplements>
        <param>
          <type><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">const</ref> <ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">double</ref> *</type>
          <declname>para_coord</declname>
        </param>
        <param>
          <type><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">const</ref> <ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">int</ref> *</type>
          <declname>orders</declname>
        </param>
        <param>
          <type><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">double</ref> *</type>
          <declname>derived</declname>
        </param>
        <briefdescription>
<para>Evaluate spline derivatives. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">para_coord</parametername>
</parameternamelist>
<parameterdescription>
<para>Parametric coordinates </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">orders</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">derived</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.hpp" line="192" column="16" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.inl" bodystart="216" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1splines_1_1RationalBezier_1a082fa04363d7823b4657cb5a1b5669ac" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">void</ref></type>
        <definition>void SplinepyJacobian</definition>
        <argsstring>(const double *para_coord, double *jacobians) const</argsstring>
        <name>SplinepyJacobian</name>
        <qualifiedname>splinepy::splines::RationalBezier::SplinepyJacobian</qualifiedname>
        <reimplements refid="classsplinepy_1_1splines_1_1SplinepyBase_1a8a41f8be9a9f5508406f8fedbe5c0499">SplinepyJacobian</reimplements>
        <param>
          <type><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">const</ref> <ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">double</ref> *</type>
          <declname>para_coord</declname>
        </param>
        <param>
          <type><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">double</ref> *</type>
          <declname>jacobian</declname>
        </param>
        <briefdescription>
<para>Evaluate jacobians on spline. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">para_coord</parametername>
</parameternamelist>
<parameterdescription>
<para>Parametric coordinates </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">jacobian</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.hpp" line="196" column="16" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.inl" bodystart="226" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1splines_1_1RationalBezier_1afb7b9a66f7bb2a06001bbaa6fe4b059e" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">void</ref></type>
        <definition>void SplinepyElevateDegree</definition>
        <argsstring>(const int &amp;p_dim, const int multiplicity=1)</argsstring>
        <name>SplinepyElevateDegree</name>
        <qualifiedname>splinepy::splines::RationalBezier::SplinepyElevateDegree</qualifiedname>
        <reimplements refid="classsplinepy_1_1splines_1_1SplinepyBase_1a78beda53207c40f7f809f8bb3454d164">SplinepyElevateDegree</reimplements>
        <param>
          <type><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">const</ref> <ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">int</ref> &amp;</type>
          <declname>para_dims</declname>
        </param>
        <param>
          <type><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">const</ref> <ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">int</ref></type>
          <declname>multiplicity</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Spline degree elevation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.hpp" line="199" column="16" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.inl" bodystart="232" bodyend="238"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1splines_1_1RationalBezier_1a5c804a4b323dcae914442ef3836f5ec9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">void</ref></type>
        <definition>void SplinepyBasis</definition>
        <argsstring>(const double *para_coord, double *basis) const</argsstring>
        <name>SplinepyBasis</name>
        <qualifiedname>splinepy::splines::RationalBezier::SplinepyBasis</qualifiedname>
        <reimplements refid="classsplinepy_1_1splines_1_1SplinepyBase_1a5c804a4b323dcae914442ef3836f5ec9">SplinepyBasis</reimplements>
        <param>
          <type><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">const</ref> <ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">double</ref> *</type>
          <declname>para_coord</declname>
        </param>
        <param>
          <type><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">double</ref> *</type>
          <declname>basis</declname>
        </param>
        <briefdescription>
<para>Retrieve basis. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">para_coord</parametername>
</parameternamelist>
<parameterdescription>
<para>Parametric coordinates </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">basis</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.hpp" line="202" column="16" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.inl" bodystart="241" bodyend="244"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1splines_1_1RationalBezier_1a2858ead137ca708d2bfeccdae6e7ac45" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">void</ref></type>
        <definition>void SplinepyBasisDerivative</definition>
        <argsstring>(const double *para_coord, const int *order, double *basis_der) const</argsstring>
        <name>SplinepyBasisDerivative</name>
        <qualifiedname>splinepy::splines::RationalBezier::SplinepyBasisDerivative</qualifiedname>
        <reimplements refid="classsplinepy_1_1splines_1_1SplinepyBase_1a26f85766cf788dbcfc3b304900c18b49">SplinepyBasisDerivative</reimplements>
        <param>
          <type><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">const</ref> <ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">double</ref> *</type>
          <declname>para_coord</declname>
        </param>
        <param>
          <type><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">const</ref> <ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">int</ref> *</type>
          <declname>order</declname>
        </param>
        <param>
          <type><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">double</ref> *</type>
          <declname>basis</declname>
        </param>
        <briefdescription>
<para>Retrieve basis function derivative. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">para_coord</parametername>
</parameternamelist>
<parameterdescription>
<para>Parametric coordinates </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">order</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">basis</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.hpp" line="204" column="16" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.inl" bodystart="247" bodyend="255"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1splines_1_1RationalBezier_1a80ef44d7b6a5f9250fc26fd0fe2923aa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">void</ref></type>
        <definition>void SplinepySupport</definition>
        <argsstring>(const double *para_coord, int *support) const</argsstring>
        <name>SplinepySupport</name>
        <qualifiedname>splinepy::splines::RationalBezier::SplinepySupport</qualifiedname>
        <reimplements refid="classsplinepy_1_1splines_1_1SplinepyBase_1a80ef44d7b6a5f9250fc26fd0fe2923aa">SplinepySupport</reimplements>
        <param>
          <type><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">const</ref> <ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">double</ref> *</type>
          <declname>para_coord</declname>
        </param>
        <param>
          <type><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">int</ref> *</type>
          <declname>support</declname>
        </param>
        <briefdescription>
<para>Spline Support IDs. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.hpp" line="208" column="16" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.inl" bodystart="258" bodyend="261"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1splines_1_1RationalBezier_1a20722d779bdedf75284890abe61cce7f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">void</ref></type>
        <definition>void SplinepyBasisAndSupport</definition>
        <argsstring>(const double *para_coord, double *basis, int *support) const</argsstring>
        <name>SplinepyBasisAndSupport</name>
        <qualifiedname>splinepy::splines::RationalBezier::SplinepyBasisAndSupport</qualifiedname>
        <reimplements refid="classsplinepy_1_1splines_1_1SplinepyBase_1a20722d779bdedf75284890abe61cce7f">SplinepyBasisAndSupport</reimplements>
        <param>
          <type><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">const</ref> <ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">double</ref> *</type>
          <declname>para_coord</declname>
        </param>
        <param>
          <type><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">double</ref> *</type>
          <declname>basis</declname>
        </param>
        <param>
          <type><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">int</ref> *</type>
          <declname>support</declname>
        </param>
        <briefdescription>
<para>Basis Function values and their support IDs. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.hpp" line="211" column="16" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.inl" bodystart="264" bodyend="271"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1splines_1_1RationalBezier_1ac61583ad2cb14834fa073d1f0d58c604" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">void</ref></type>
        <definition>void SplinepyBasisDerivativeAndSupport</definition>
        <argsstring>(const double *para_coord, const int *orders, double *basis_der, int *support) const</argsstring>
        <name>SplinepyBasisDerivativeAndSupport</name>
        <qualifiedname>splinepy::splines::RationalBezier::SplinepyBasisDerivativeAndSupport</qualifiedname>
        <reimplements refid="classsplinepy_1_1splines_1_1SplinepyBase_1a7db518859493e6f59eddcfd643ac0fd9">SplinepyBasisDerivativeAndSupport</reimplements>
        <param>
          <type><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">const</ref> <ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">double</ref> *</type>
          <declname>para_coord</declname>
        </param>
        <param>
          <type><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">const</ref> <ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">int</ref> *</type>
          <declname>orders</declname>
        </param>
        <param>
          <type><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">double</ref> *</type>
          <declname>basis_der</declname>
        </param>
        <param>
          <type><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">int</ref> *</type>
          <declname>support</declname>
        </param>
        <briefdescription>
<para>Basis Function Derivative and their support IDs. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.hpp" line="216" column="16" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.inl" bodystart="274" bodyend="281"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1splines_1_1RationalBezier_1a655dd76f93a8a1ca02b8bb1fecb83c82" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">void</ref></type>
        <definition>void SplinepyPlantNewKdTreeForProximity</definition>
        <argsstring>(const int *resolutions, const int &amp;nthreads)</argsstring>
        <name>SplinepyPlantNewKdTreeForProximity</name>
        <qualifiedname>splinepy::splines::RationalBezier::SplinepyPlantNewKdTreeForProximity</qualifiedname>
        <reimplements refid="classsplinepy_1_1splines_1_1SplinepyBase_1a655dd76f93a8a1ca02b8bb1fecb83c82">SplinepyPlantNewKdTreeForProximity</reimplements>
        <param>
          <type><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">const</ref> <ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">int</ref> *</type>
          <declname>resolutions</declname>
        </param>
        <param>
          <type><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">const</ref> <ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">int</ref> &amp;</type>
          <declname>nthreads</declname>
        </param>
        <briefdescription>
<para>Plants KdTree of sampled spline with given resolution. KdTree is required for proximity queries. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.hpp" line="221" column="16" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.inl" bodystart="283" bodyend="288"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1splines_1_1RationalBezier_1a311f2f145c25efbf07a4127a93fd728f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">void</ref></type>
        <definition>void SplinepyVerboseProximity</definition>
        <argsstring>(const double *query, const double &amp;tolerance, const int &amp;max_iterations, const bool tight_bounds, double *para_coord, double *phys_coord, double *phys_diff, double &amp;distance, double &amp;convergence_norm, double *first_derivatives, double *second_derivatives) const</argsstring>
        <name>SplinepyVerboseProximity</name>
        <qualifiedname>splinepy::splines::RationalBezier::SplinepyVerboseProximity</qualifiedname>
        <reimplements refid="classsplinepy_1_1splines_1_1SplinepyBase_1a311f2f145c25efbf07a4127a93fd728f">SplinepyVerboseProximity</reimplements>
        <param>
          <type><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">const</ref> <ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">double</ref> *</type>
          <declname>query</declname>
        </param>
        <param>
          <type><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">const</ref> <ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">double</ref> &amp;</type>
          <declname>tolerance</declname>
        </param>
        <param>
          <type><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">const</ref> <ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">int</ref> &amp;</type>
          <declname>max_iterations</declname>
        </param>
        <param>
          <type><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">const</ref> <ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">bool</ref></type>
          <declname>tight_bounds</declname>
        </param>
        <param>
          <type><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">double</ref> *</type>
          <declname>para_coord</declname>
        </param>
        <param>
          <type><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">double</ref> *</type>
          <declname>phys_coord</declname>
        </param>
        <param>
          <type><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">double</ref> *</type>
          <declname>phys_diff</declname>
        </param>
        <param>
          <type><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">double</ref> &amp;</type>
          <declname>distance</declname>
        </param>
        <param>
          <type><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">double</ref> &amp;</type>
          <declname>convergence_norm</declname>
        </param>
        <param>
          <type><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">double</ref> *</type>
          <declname>first_derivatives</declname>
        </param>
        <param>
          <type><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">double</ref> *</type>
          <declname>second_derivatives</declname>
        </param>
        <briefdescription>
<para>Verbose proximity query - make sure to plant a kdtree first. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.hpp" line="225" column="16" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.inl" bodystart="291" bodyend="314"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1splines_1_1RationalBezier_1a99ff3ac5c14681c4a3410ac4fc15ec5a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::shared_ptr&lt; <ref refid="classsplinepy_1_1splines_1_1SplinepyBase" kindref="compound">SplinepyBase</ref> &gt;</type>
        <definition>std::shared_ptr&lt; SplinepyBase &gt; SplinepyMultiply</definition>
        <argsstring>(const std::shared_ptr&lt; SplinepyBase &gt; &amp;a) const</argsstring>
        <name>SplinepyMultiply</name>
        <qualifiedname>splinepy::splines::RationalBezier::SplinepyMultiply</qualifiedname>
        <reimplements refid="classsplinepy_1_1splines_1_1SplinepyBase_1a99ff3ac5c14681c4a3410ac4fc15ec5a">SplinepyMultiply</reimplements>
        <param>
          <type><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">const</ref> std::shared_ptr&lt; <ref refid="classsplinepy_1_1splines_1_1SplinepyBase" kindref="compound">SplinepyBase</ref> &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>only applicable to the splines of same para_dim, same type, and {1 or same} dim. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.hpp" line="240" column="3" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.inl" bodystart="317" bodyend="350"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1splines_1_1RationalBezier_1a115e11c597c41143a487bac1564f306f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::shared_ptr&lt; <ref refid="classsplinepy_1_1splines_1_1SplinepyBase" kindref="compound">SplinepyBase</ref> &gt;</type>
        <definition>std::shared_ptr&lt; SplinepyBase &gt; SplinepyAdd</definition>
        <argsstring>(const std::shared_ptr&lt; SplinepyBase &gt; &amp;a) const</argsstring>
        <name>SplinepyAdd</name>
        <qualifiedname>splinepy::splines::RationalBezier::SplinepyAdd</qualifiedname>
        <reimplements refid="classsplinepy_1_1splines_1_1SplinepyBase_1a115e11c597c41143a487bac1564f306f">SplinepyAdd</reimplements>
        <param>
          <type><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">const</ref> std::shared_ptr&lt; <ref refid="classsplinepy_1_1splines_1_1SplinepyBase" kindref="compound">SplinepyBase</ref> &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Spline addition. requires same type, para_dim, dim. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.hpp" line="245" column="3" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.inl" bodystart="353" bodyend="373"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1splines_1_1RationalBezier_1a555d25d480de53786027bda44ac4ae59" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">bool</ref></type>
            <declname>is_rational</declname>
            <defname>is_rational</defname>
          </param>
          <param>
            <type><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">size_t</ref></type>
            <declname>inner_para_dim</declname>
            <defname>inner_para_dim</defname>
          </param>
        </templateparamlist>
        <type>std::vector&lt; std::shared_ptr&lt; <ref refid="classsplinepy_1_1splines_1_1SplinepyBase" kindref="compound">SplinepyBase</ref> &gt; &gt;</type>
        <definition>std::vector&lt; std::shared_ptr&lt; SplinepyBase &gt; &gt; ConvertComposeToBase</definition>
        <argsstring>(const std::shared_ptr&lt; SplinepyBase &gt; &amp;inner_function) const</argsstring>
        <name>ConvertComposeToBase</name>
        <qualifiedname>splinepy::splines::RationalBezier::ConvertComposeToBase</qualifiedname>
        <param>
          <type><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">const</ref> std::shared_ptr&lt; <ref refid="classsplinepy_1_1splines_1_1SplinepyBase" kindref="compound">SplinepyBase</ref> &gt; &amp;</type>
          <declname>inner_function</declname>
        </param>
        <briefdescription>
<para>Convert the composed splines into base splines for python side. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>is_rational</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag for rational beziers </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inner_para_dim</parametername>
</parameternamelist>
<parameterdescription>
<para>parametric of inner function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inner_function</parametername>
</parameternamelist>
<parameterdescription>
<para>inner function of composition </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::vector&lt;std::shared_ptr&lt;SplinepyBase&gt;&gt; Vector of <ref refid="classsplinepy_1_1splines_1_1SplinepyBase" kindref="compound">SplinepyBase</ref> splines </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.hpp" line="257" column="15" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.inl" bodystart="378" bodyend="404"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1splines_1_1RationalBezier_1a8e0877c5aa9d0880e837c4f8e081d651" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::vector&lt; std::shared_ptr&lt; <ref refid="classsplinepy_1_1splines_1_1SplinepyBase" kindref="compound">SplinepyBase</ref> &gt; &gt;</type>
        <definition>std::vector&lt; std::shared_ptr&lt; SplinepyBase &gt; &gt; SplinepyComposeSensitivities</definition>
        <argsstring>(const std::shared_ptr&lt; SplinepyBase &gt; &amp;inner_function) const</argsstring>
        <name>SplinepyComposeSensitivities</name>
        <qualifiedname>splinepy::splines::RationalBezier::SplinepyComposeSensitivities</qualifiedname>
        <reimplements refid="classsplinepy_1_1splines_1_1SplinepyBase_1a8e0877c5aa9d0880e837c4f8e081d651">SplinepyComposeSensitivities</reimplements>
        <param>
          <type><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">const</ref> std::shared_ptr&lt; <ref refid="classsplinepy_1_1splines_1_1SplinepyBase" kindref="compound">SplinepyBase</ref> &gt; &amp;</type>
          <declname>inner_function</declname>
        </param>
        <briefdescription>
<para>Compute sensitivities of Composed splines with respect to outer functions control points. </para>
        </briefdescription>
        <detaileddescription>
<para>Spline composition. inner_function requirements:<orderedlist>
<listitem><para><ref refid="classsplinepy_1_1splines_1_1Bezier" kindref="compound">Bezier</ref> Types</para>
</listitem><listitem><para>dim is same as outer_function&apos;s par_dim</para>
</listitem></orderedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inner_function</parametername>
</parameternamelist>
<parameterdescription>
<para>inner function of composition </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::vector&lt;std::shared_ptr&lt;SplinepyBase&gt;&gt; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.hpp" line="273" column="3" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.inl" bodystart="408" bodyend="499"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1splines_1_1RationalBezier_1af05fe3b20aed88bea1f16b634e3ddb19" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::shared_ptr&lt; <ref refid="classsplinepy_1_1splines_1_1SplinepyBase" kindref="compound">SplinepyBase</ref> &gt;</type>
        <definition>std::shared_ptr&lt; SplinepyBase &gt; SplinepyCompose</definition>
        <argsstring>(const std::shared_ptr&lt; SplinepyBase &gt; &amp;inner_function) const</argsstring>
        <name>SplinepyCompose</name>
        <qualifiedname>splinepy::splines::RationalBezier::SplinepyCompose</qualifiedname>
        <reimplements refid="classsplinepy_1_1splines_1_1SplinepyBase_1af05fe3b20aed88bea1f16b634e3ddb19">SplinepyCompose</reimplements>
        <param>
          <type><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">const</ref> std::shared_ptr&lt; <ref refid="classsplinepy_1_1splines_1_1SplinepyBase" kindref="compound">SplinepyBase</ref> &gt; &amp;</type>
          <declname>inner_function</declname>
        </param>
        <briefdescription>
<para>Spline composition. inner_function requirements: </para>
        </briefdescription>
        <detaileddescription>
<para><orderedlist>
<listitem><para><ref refid="classsplinepy_1_1splines_1_1Bezier" kindref="compound">Bezier</ref> Types</para>
</listitem><listitem><para>dim is same as outer_function&apos;s par_dim </para>
</listitem></orderedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.hpp" line="281" column="3" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.inl" bodystart="502" bodyend="610"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1splines_1_1RationalBezier_1a58e861256bd97c949018429e88bf2df9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::vector&lt; std::shared_ptr&lt; <ref refid="classsplinepy_1_1splines_1_1SplinepyBase" kindref="compound">SplinepyBase</ref> &gt; &gt;</type>
        <definition>std::vector&lt; std::shared_ptr&lt; SplinepyBase &gt; &gt; SplinepySplit</definition>
        <argsstring>(const int &amp;p_dim, const double &amp;location) const</argsstring>
        <name>SplinepySplit</name>
        <qualifiedname>splinepy::splines::RationalBezier::SplinepySplit</qualifiedname>
        <reimplements refid="classsplinepy_1_1splines_1_1SplinepyBase_1aa14f7f52b84375357c04e829276386a8">SplinepySplit</reimplements>
        <param>
          <type><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">const</ref> <ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">int</ref> &amp;</type>
          <declname>para_dim</declname>
        </param>
        <param>
          <type><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">const</ref> <ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">double</ref> &amp;</type>
          <declname>location</declname>
        </param>
        <briefdescription>
<para>Spline Split - single split. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.hpp" line="284" column="3" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.inl" bodystart="614" bodyend="630"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1splines_1_1RationalBezier_1ad30620aeaaad6a9db0816696fbd87179" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::shared_ptr&lt; <ref refid="classsplinepy_1_1splines_1_1SplinepyBase" kindref="compound">SplinepyBase</ref> &gt;</type>
        <definition>std::shared_ptr&lt; SplinepyBase &gt; SplinepyDerivativeSpline</definition>
        <argsstring>(const int *orders) const</argsstring>
        <name>SplinepyDerivativeSpline</name>
        <qualifiedname>splinepy::splines::RationalBezier::SplinepyDerivativeSpline</qualifiedname>
        <reimplements refid="classsplinepy_1_1splines_1_1SplinepyBase_1ad30620aeaaad6a9db0816696fbd87179">SplinepyDerivativeSpline</reimplements>
        <param>
          <type><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">const</ref> <ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">int</ref> *</type>
          <declname>orders</declname>
        </param>
        <briefdescription>
<para>Derivative spline. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.hpp" line="287" column="3" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.inl" bodystart="634" bodyend="644"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1splines_1_1RationalBezier_1a50217282b435afd4c8db596f147f88ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>std::shared_ptr&lt; <ref refid="classsplinepy_1_1splines_1_1SplinepyBase" kindref="compound">SplinepyBase</ref> &gt;</type>
        <definition>std::shared_ptr&lt; SplinepyBase &gt; SplinepyExtractBoundary</definition>
        <argsstring>(const int &amp;boundary_id)</argsstring>
        <name>SplinepyExtractBoundary</name>
        <qualifiedname>splinepy::splines::RationalBezier::SplinepyExtractBoundary</qualifiedname>
        <reimplements refid="classsplinepy_1_1splines_1_1SplinepyBase_1a50217282b435afd4c8db596f147f88ce">SplinepyExtractBoundary</reimplements>
        <param>
          <type><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">const</ref> <ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">int</ref> &amp;</type>
          <declname>boundary_id</declname>
        </param>
        <briefdescription>
<para>Boundary spline extraction - TODO: const. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.hpp" line="290" column="3" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.inl" bodystart="648" bodyend="651"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1splines_1_1RationalBezier_1a89017250bfdb853c3bd01a41d7828a13" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::vector&lt; std::shared_ptr&lt; <ref refid="classsplinepy_1_1splines_1_1SplinepyBase" kindref="compound">SplinepyBase</ref> &gt; &gt;</type>
        <definition>std::vector&lt; std::shared_ptr&lt; SplinepyBase &gt; &gt; SplinepyExtractBezierPatches</definition>
        <argsstring>() const</argsstring>
        <name>SplinepyExtractBezierPatches</name>
        <qualifiedname>splinepy::splines::RationalBezier::SplinepyExtractBezierPatches</qualifiedname>
        <reimplements refid="classsplinepy_1_1splines_1_1SplinepyBase_1a89017250bfdb853c3bd01a41d7828a13">SplinepyExtractBezierPatches</reimplements>
        <briefdescription>
<para><ref refid="classsplinepy_1_1splines_1_1Bezier" kindref="compound">Bezier</ref> patch extraction. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.hpp" line="293" column="3" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.inl" bodystart="655" bodyend="658"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1splines_1_1RationalBezier_1a531c1b5ece7f10875a4d5dac7598668b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::shared_ptr&lt; <ref refid="classsplinepy_1_1splines_1_1SplinepyBase" kindref="compound">SplinepyBase</ref> &gt;</type>
        <definition>std::shared_ptr&lt; SplinepyBase &gt; SplinepyExtractDim</definition>
        <argsstring>(const int &amp;phys_dim) const</argsstring>
        <name>SplinepyExtractDim</name>
        <qualifiedname>splinepy::splines::RationalBezier::SplinepyExtractDim</qualifiedname>
        <reimplements refid="classsplinepy_1_1splines_1_1SplinepyBase_1a531c1b5ece7f10875a4d5dac7598668b">SplinepyExtractDim</reimplements>
        <param>
          <type><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">const</ref> <ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">int</ref> &amp;</type>
          <declname>phys_dim</declname>
        </param>
        <briefdescription>
<para>Scalar Spline extraction from dim - TODO: const. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.hpp" line="296" column="3" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.inl" bodystart="662" bodyend="665"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1splines_1_1RationalBezier_1a04cd334a9c81663a688f9a42f10348d4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::shared_ptr&lt; <ref refid="classsplinepy_1_1splines_1_1SplinepyBase" kindref="compound">SplinepyBase</ref> &gt;</type>
        <definition>std::shared_ptr&lt; SplinepyBase &gt; SplinepyCompositionDerivative</definition>
        <argsstring>(const std::shared_ptr&lt; SplinepyBase &gt; &amp;inner, const std::shared_ptr&lt; SplinepyBase &gt; &amp;inner_derivative) const</argsstring>
        <name>SplinepyCompositionDerivative</name>
        <qualifiedname>splinepy::splines::RationalBezier::SplinepyCompositionDerivative</qualifiedname>
        <reimplements refid="classsplinepy_1_1splines_1_1SplinepyBase_1a04cd334a9c81663a688f9a42f10348d4">SplinepyCompositionDerivative</reimplements>
        <param>
          <type><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">const</ref> std::shared_ptr&lt; <ref refid="classsplinepy_1_1splines_1_1SplinepyBase" kindref="compound">SplinepyBase</ref> &gt; &amp;</type>
          <declname>inner</declname>
        </param>
        <param>
          <type><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">const</ref> std::shared_ptr&lt; <ref refid="classsplinepy_1_1splines_1_1SplinepyBase" kindref="compound">SplinepyBase</ref> &gt; &amp;</type>
          <declname>inner_derivative</declname>
        </param>
        <briefdescription>
<para>Derivative of composition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.hpp" line="299" column="27" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.inl" bodystart="669" bodyend="708"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1splines_1_1RationalBezier_1a231be8c76cf795fc9f67fcc4db057bd8" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">constexpr</ref> <ref refid="classsplinepy_1_1splines_1_1RationalBezier_1af25be4433e4f4a2cdaba20195b042eff" kindref="member">Proximity_</ref> &amp;</type>
        <definition>constexpr Proximity_ &amp; GetProximity</definition>
        <argsstring>()</argsstring>
        <name>GetProximity</name>
        <qualifiedname>splinepy::splines::RationalBezier::GetProximity</qualifiedname>
        <briefdescription>
<para>Get proximity. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.hpp" line="304" column="24" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.hpp" bodystart="304" bodyend="304"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1splines_1_1RationalBezier_1abc017c743d0c493a479bc984f013c0a6" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">constexpr</ref> <ref refid="classsplinepy_1_1splines_1_1BSpline" kindref="compound">const</ref> <ref refid="classsplinepy_1_1splines_1_1RationalBezier_1af25be4433e4f4a2cdaba20195b042eff" kindref="member">Proximity_</ref> &amp;</type>
        <definition>constexpr const Proximity_ &amp; GetProximity</definition>
        <argsstring>() const</argsstring>
        <name>GetProximity</name>
        <qualifiedname>splinepy::splines::RationalBezier::GetProximity</qualifiedname>
        <briefdescription>
<para>Get proximity. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.hpp" line="306" column="30" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.hpp" bodystart="306" bodyend="306"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1splines_1_1RationalBezier_1aa1d06bf774a2ad58d3a3fe6e6e032cca" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>std::shared_ptr&lt; <ref refid="classsplinepy_1_1splines_1_1SplinepyBase" kindref="compound">SplinepyBase</ref> &gt;</type>
        <definition>virtual std::shared_ptr&lt; SplinepyBase &gt; SplinepyDeepCopy</definition>
        <argsstring>() const</argsstring>
        <name>SplinepyDeepCopy</name>
        <qualifiedname>splinepy::splines::RationalBezier::SplinepyDeepCopy</qualifiedname>
        <reimplements refid="classsplinepy_1_1splines_1_1SplinepyBase_1acc36e2767ff06648d5e325bb2bb61e8a">SplinepyDeepCopy</reimplements>
        <briefdescription>
<para>Deep copy of current spline. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.hpp" line="309" column="27" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.hpp" bodystart="309" bodyend="311"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Rational <ref refid="classsplinepy_1_1splines_1_1Bezier" kindref="compound">Bezier</ref> (Spline) </para>
    </briefdescription>
    <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>para_dim</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dim</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>RationalBezier&lt; para_dim, dim &gt;</label>
        <link refid="classsplinepy_1_1splines_1_1RationalBezier"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>RationalBezierSplineType&lt; para_dim, dim &gt;</label>
      </node>
      <node id="2">
        <label>SplinepyBase</label>
        <link refid="classsplinepy_1_1splines_1_1SplinepyBase"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>RationalBezier&lt; para_dim, dim &gt;</label>
        <link refid="classsplinepy_1_1splines_1_1RationalBezier"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>RationalBezierSplineType&lt; para_dim, dim &gt;</label>
      </node>
      <node id="2">
        <label>SplinepyBase</label>
        <link refid="classsplinepy_1_1splines_1_1SplinepyBase"/>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.hpp" line="49" column="1" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/splines/rational_bezier.hpp" bodystart="50" bodyend="317"/>
    <listofallmembers>
      <member refid="classsplinepy_1_1splines_1_1RationalBezier_1a1be695544b8f365ecfde807473a48087" prot="public" virt="non-virtual"><scope>splinepy::splines::RationalBezier</scope><name>Base_</name></member>
      <member refid="classsplinepy_1_1splines_1_1RationalBezier_1a4901bd43907ea496221048f74d61f402" prot="public" virt="non-virtual"><scope>splinepy::splines::RationalBezier</scope><name>BoundaryType_</name></member>
      <member refid="classsplinepy_1_1splines_1_1SplinepyBase_1a7f833d90cb628ca8f7c2f6a2d9607c1d" prot="protected" virt="non-virtual"><scope>splinepy::splines::RationalBezier</scope><name>control_point_pointers_</name></member>
      <member refid="classsplinepy_1_1splines_1_1SplinepyBase_1a047bd01588a876ffd02dca249fe94cb5" prot="public" virt="non-virtual"><scope>splinepy::splines::RationalBezier</scope><name>ControlPointPointers_</name></member>
      <member refid="classsplinepy_1_1splines_1_1RationalBezier_1a555d25d480de53786027bda44ac4ae59" prot="public" virt="non-virtual"><scope>splinepy::splines::RationalBezier</scope><name>ConvertComposeToBase</name></member>
      <member refid="classsplinepy_1_1splines_1_1RationalBezier_1aaca1d2c801d643e6975e97e82cb9b68b" prot="public" virt="non-virtual"><scope>splinepy::splines::RationalBezier</scope><name>Coordinate_</name></member>
      <member refid="classsplinepy_1_1splines_1_1RationalBezier_1a5ffc4405bae9fc25b79b0f9959d57ee2" prot="public" virt="non-virtual"><scope>splinepy::splines::RationalBezier</scope><name>Coordinates_</name></member>
      <member refid="classsplinepy_1_1splines_1_1RationalBezier_1af2418b2cbb12d2ce9df0a3a3cd7a2e1b" prot="public" virt="non-virtual"><scope>splinepy::splines::RationalBezier</scope><name>CreateBase</name></member>
      <member refid="classsplinepy_1_1splines_1_1RationalBezier_1abcf87a110cc88b5bd29c8d3ef1ff0c3b" prot="public" virt="non-virtual"><scope>splinepy::splines::RationalBezier</scope><name>Degrees_</name></member>
      <member refid="classsplinepy_1_1splines_1_1RationalBezier_1aa1b46e064c187fc4dcc6489713c5b69c" prot="public" virt="non-virtual"><scope>splinepy::splines::RationalBezier</scope><name>Derivative_</name></member>
      <member refid="classsplinepy_1_1splines_1_1RationalBezier_1aee53aa3b3dab35b50d619eb6d7d64940" prot="public" virt="non-virtual"><scope>splinepy::splines::RationalBezier</scope><name>Dimension_</name></member>
      <member refid="classsplinepy_1_1splines_1_1RationalBezier_1a295928c8177dccebb36ad246b2af01af" prot="public" virt="non-virtual"><scope>splinepy::splines::RationalBezier</scope><name>ElevateDegree</name></member>
      <member refid="classsplinepy_1_1splines_1_1RationalBezier_1a231be8c76cf795fc9f67fcc4db057bd8" prot="public" virt="non-virtual"><scope>splinepy::splines::RationalBezier</scope><name>GetProximity</name></member>
      <member refid="classsplinepy_1_1splines_1_1RationalBezier_1abc017c743d0c493a479bc984f013c0a6" prot="public" virt="non-virtual"><scope>splinepy::splines::RationalBezier</scope><name>GetProximity</name></member>
      <member refid="classsplinepy_1_1splines_1_1RationalBezier_1a09f7e0710eaf58e3a373b2c514e41967" prot="public" virt="non-virtual"><scope>splinepy::splines::RationalBezier</scope><name>kDim</name></member>
      <member refid="classsplinepy_1_1splines_1_1RationalBezier_1a2f325b26d4ab0f18cd453c784ff1d0c9" prot="public" virt="non-virtual"><scope>splinepy::splines::RationalBezier</scope><name>kHasKnotVectors</name></member>
      <member refid="classsplinepy_1_1splines_1_1RationalBezier_1a61ce0c82e3321630130cde7c22bba55d" prot="public" virt="non-virtual"><scope>splinepy::splines::RationalBezier</scope><name>kIsRational</name></member>
      <member refid="classsplinepy_1_1splines_1_1RationalBezier_1a8032d06d9c896fd0a551f5070eea21c5" prot="public" virt="non-virtual"><scope>splinepy::splines::RationalBezier</scope><name>kParaDim</name></member>
      <member refid="classsplinepy_1_1splines_1_1RationalBezier_1ac866d368a93d910cd1e150bc2ceeba2f" prot="public" virt="non-virtual"><scope>splinepy::splines::RationalBezier</scope><name>operator()</name></member>
      <member refid="classsplinepy_1_1splines_1_1RationalBezier_1ab10a0286f45741df4e09ab99300feef0" prot="public" virt="non-virtual"><scope>splinepy::splines::RationalBezier</scope><name>operator()</name></member>
      <member refid="classsplinepy_1_1splines_1_1RationalBezier_1a105d5d135cd13dfc2bdaaa5d518807c8" prot="public" virt="non-virtual"><scope>splinepy::splines::RationalBezier</scope><name>ParametricCoordinate_</name></member>
      <member refid="classsplinepy_1_1splines_1_1RationalBezier_1af25be4433e4f4a2cdaba20195b042eff" prot="public" virt="non-virtual"><scope>splinepy::splines::RationalBezier</scope><name>Proximity_</name></member>
      <member refid="classsplinepy_1_1splines_1_1RationalBezier_1a39f7fc544822bdc30499730036603f1c" prot="protected" virt="non-virtual"><scope>splinepy::splines::RationalBezier</scope><name>proximity_</name></member>
      <member refid="classsplinepy_1_1splines_1_1RationalBezier_1a2195be1cb2827491a2cbb4f5d41f0d56" prot="public" virt="non-virtual"><scope>splinepy::splines::RationalBezier</scope><name>RationalBezier</name></member>
      <member refid="classsplinepy_1_1splines_1_1RationalBezier_1aebc814e7556505fdbffacf8d70b18201" prot="public" virt="non-virtual"><scope>splinepy::splines::RationalBezier</scope><name>RationalBezier</name></member>
      <member refid="classsplinepy_1_1splines_1_1RationalBezier_1aac7f3625301a8ac787db50365049177a" prot="public" virt="non-virtual"><scope>splinepy::splines::RationalBezier</scope><name>SelfTemplate_</name></member>
      <member refid="classsplinepy_1_1splines_1_1RationalBezier_1a115e11c597c41143a487bac1564f306f" prot="public" virt="virtual"><scope>splinepy::splines::RationalBezier</scope><name>SplinepyAdd</name></member>
      <member refid="classsplinepy_1_1splines_1_1SplinepyBase_1a300fda0bc3091ee8328d7e3ccf83c889" prot="public" virt="non-virtual"><scope>splinepy::splines::RationalBezier</scope><name>SplinepyBase</name></member>
      <member refid="classsplinepy_1_1splines_1_1RationalBezier_1ad0d9b5c506ab3573df65a8d5a14ad73a" prot="public" virt="non-virtual"><scope>splinepy::splines::RationalBezier</scope><name>SplinepyBase_</name></member>
      <member refid="classsplinepy_1_1splines_1_1RationalBezier_1a5c804a4b323dcae914442ef3836f5ec9" prot="public" virt="virtual"><scope>splinepy::splines::RationalBezier</scope><name>SplinepyBasis</name></member>
      <member refid="classsplinepy_1_1splines_1_1RationalBezier_1a20722d779bdedf75284890abe61cce7f" prot="public" virt="virtual"><scope>splinepy::splines::RationalBezier</scope><name>SplinepyBasisAndSupport</name></member>
      <member refid="classsplinepy_1_1splines_1_1RationalBezier_1a2858ead137ca708d2bfeccdae6e7ac45" prot="public" virt="virtual"><scope>splinepy::splines::RationalBezier</scope><name>SplinepyBasisDerivative</name></member>
      <member refid="classsplinepy_1_1splines_1_1RationalBezier_1ac61583ad2cb14834fa073d1f0d58c604" prot="public" virt="virtual"><scope>splinepy::splines::RationalBezier</scope><name>SplinepyBasisDerivativeAndSupport</name></member>
      <member refid="classsplinepy_1_1splines_1_1RationalBezier_1af05fe3b20aed88bea1f16b634e3ddb19" prot="public" virt="virtual"><scope>splinepy::splines::RationalBezier</scope><name>SplinepyCompose</name></member>
      <member refid="classsplinepy_1_1splines_1_1RationalBezier_1a8e0877c5aa9d0880e837c4f8e081d651" prot="public" virt="virtual"><scope>splinepy::splines::RationalBezier</scope><name>SplinepyComposeSensitivities</name></member>
      <member refid="classsplinepy_1_1splines_1_1RationalBezier_1a04cd334a9c81663a688f9a42f10348d4" prot="public" virt="virtual"><scope>splinepy::splines::RationalBezier</scope><name>SplinepyCompositionDerivative</name></member>
      <member refid="classsplinepy_1_1splines_1_1RationalBezier_1a82c7531c75207a9c4c1ce2ee287d6d80" prot="public" virt="virtual"><scope>splinepy::splines::RationalBezier</scope><name>SplinepyControlMeshResolutions</name></member>
      <member refid="classsplinepy_1_1splines_1_1SplinepyBase_1af20c63586810ad81b86a126d2a3ebff2" prot="public" virt="virtual"><scope>splinepy::splines::RationalBezier</scope><name>SplinepyControlPointPointers</name></member>
      <member refid="classsplinepy_1_1splines_1_1SplinepyBase_1a2e9c51442eb4e2c6f083bbdf4a55bf4c" prot="public" virt="non-virtual"><scope>splinepy::splines::RationalBezier</scope><name>SplinepyCreate</name></member>
      <member refid="classsplinepy_1_1splines_1_1SplinepyBase_1a6197098cf037e4eac451a8e916b930ab" prot="public" virt="non-virtual"><scope>splinepy::splines::RationalBezier</scope><name>SplinepyCreateBezier</name></member>
      <member refid="classsplinepy_1_1splines_1_1SplinepyBase_1af05ef152f4c35beb5f5dc8ee944b8207" prot="public" virt="non-virtual"><scope>splinepy::splines::RationalBezier</scope><name>SplinepyCreateBSpline</name></member>
      <member refid="classsplinepy_1_1splines_1_1SplinepyBase_1aa4ae4ea664a834fdb369a4dfd69b35b7" prot="public" virt="non-virtual"><scope>splinepy::splines::RationalBezier</scope><name>SplinepyCreateNurbs</name></member>
      <member refid="classsplinepy_1_1splines_1_1SplinepyBase_1aad8af300d6750fbfdc9bd07e6b880a2f" prot="public" virt="non-virtual"><scope>splinepy::splines::RationalBezier</scope><name>SplinepyCreateRationalBezier</name></member>
      <member refid="classsplinepy_1_1splines_1_1RationalBezier_1a8da72da204720cf17f091b5de850ad14" prot="public" virt="virtual"><scope>splinepy::splines::RationalBezier</scope><name>SplinepyCurrentProperties</name></member>
      <member refid="classsplinepy_1_1splines_1_1RationalBezier_1aa1d06bf774a2ad58d3a3fe6e6e032cca" prot="public" virt="virtual"><scope>splinepy::splines::RationalBezier</scope><name>SplinepyDeepCopy</name></member>
      <member refid="classsplinepy_1_1splines_1_1RationalBezier_1a1623b3917d83d47770045b0277ae0702" prot="public" virt="virtual"><scope>splinepy::splines::RationalBezier</scope><name>SplinepyDerivative</name></member>
      <member refid="classsplinepy_1_1splines_1_1RationalBezier_1ad30620aeaaad6a9db0816696fbd87179" prot="public" virt="virtual"><scope>splinepy::splines::RationalBezier</scope><name>SplinepyDerivativeSpline</name></member>
      <member refid="classsplinepy_1_1splines_1_1RationalBezier_1addafa95d18f804ff9b6565cc69b9b441" prot="public" virt="virtual"><scope>splinepy::splines::RationalBezier</scope><name>SplinepyDim</name></member>
      <member refid="classsplinepy_1_1splines_1_1SplinepyBase_1a14e31715a0972b74b13776d636b700dc" prot="public" virt="non-virtual"><scope>splinepy::splines::RationalBezier</scope><name>SplinepyDimMatches</name></member>
      <member refid="classsplinepy_1_1splines_1_1RationalBezier_1afb7b9a66f7bb2a06001bbaa6fe4b059e" prot="public" virt="virtual"><scope>splinepy::splines::RationalBezier</scope><name>SplinepyElevateDegree</name></member>
      <member refid="classsplinepy_1_1splines_1_1RationalBezier_1af44d40483deab0f4f5d3901073b63c2c" prot="public" virt="virtual"><scope>splinepy::splines::RationalBezier</scope><name>SplinepyEvaluate</name></member>
      <member refid="classsplinepy_1_1splines_1_1RationalBezier_1a89017250bfdb853c3bd01a41d7828a13" prot="public" virt="virtual"><scope>splinepy::splines::RationalBezier</scope><name>SplinepyExtractBezierPatches</name></member>
      <member refid="classsplinepy_1_1splines_1_1RationalBezier_1a50217282b435afd4c8db596f147f88ce" prot="public" virt="virtual"><scope>splinepy::splines::RationalBezier</scope><name>SplinepyExtractBoundary</name></member>
      <member refid="classsplinepy_1_1splines_1_1RationalBezier_1a531c1b5ece7f10875a4d5dac7598668b" prot="public" virt="virtual"><scope>splinepy::splines::RationalBezier</scope><name>SplinepyExtractDim</name></member>
      <member refid="classsplinepy_1_1splines_1_1RationalBezier_1a937737f903b962b14b75911ad87ea980" prot="public" virt="virtual"><scope>splinepy::splines::RationalBezier</scope><name>SplinepyGrevilleAbscissae</name></member>
      <member refid="classsplinepy_1_1splines_1_1RationalBezier_1a11ac3093e1244d3bcf9e8434acc37a5f" prot="public" virt="virtual"><scope>splinepy::splines::RationalBezier</scope><name>SplinepyHasKnotVectors</name></member>
      <member refid="classsplinepy_1_1splines_1_1SplinepyBase_1aeee448dc5071048348878fb3f2cf6637" prot="public" virt="virtual"><scope>splinepy::splines::RationalBezier</scope><name>SplinepyInsertKnot</name></member>
      <member refid="classsplinepy_1_1splines_1_1SplinepyBase_1ae791a517504d63316946462ffd75a597" prot="public" virt="virtual"><scope>splinepy::splines::RationalBezier</scope><name>SplinepyIsNull</name></member>
      <member refid="classsplinepy_1_1splines_1_1RationalBezier_1aa69c5b2aa3411e4f1b78332e0b6a2265" prot="public" virt="virtual"><scope>splinepy::splines::RationalBezier</scope><name>SplinepyIsRational</name></member>
      <member refid="classsplinepy_1_1splines_1_1RationalBezier_1a082fa04363d7823b4657cb5a1b5669ac" prot="public" virt="virtual"><scope>splinepy::splines::RationalBezier</scope><name>SplinepyJacobian</name></member>
      <member refid="classsplinepy_1_1splines_1_1SplinepyBase_1a9b314b6a49745e77cce147e1ddde407e" prot="public" virt="virtual"><scope>splinepy::splines::RationalBezier</scope><name>SplinepyKnotMultiplicities</name></member>
      <member refid="classsplinepy_1_1splines_1_1SplinepyBase_1aec3f80474d3a3e1c2681b9b188c8f4b4" prot="public" virt="virtual"><scope>splinepy::splines::RationalBezier</scope><name>SplinepyKnotVector</name></member>
      <member refid="classsplinepy_1_1splines_1_1RationalBezier_1a99ff3ac5c14681c4a3410ac4fc15ec5a" prot="public" virt="virtual"><scope>splinepy::splines::RationalBezier</scope><name>SplinepyMultiply</name></member>
      <member refid="classsplinepy_1_1splines_1_1RationalBezier_1a7b497cd52107288f7bf90fefbfb313e2" prot="public" virt="virtual"><scope>splinepy::splines::RationalBezier</scope><name>SplinepyNumberOfControlPoints</name></member>
      <member refid="classsplinepy_1_1splines_1_1RationalBezier_1a14e0d96a5aa8c07d510779cc6b4a2d1c" prot="public" virt="virtual"><scope>splinepy::splines::RationalBezier</scope><name>SplinepyNumberOfSupports</name></member>
      <member refid="classsplinepy_1_1splines_1_1RationalBezier_1ad0b0e5b72a509032ee74ce3af1df08ca" prot="public" virt="virtual"><scope>splinepy::splines::RationalBezier</scope><name>SplinepyParaDim</name></member>
      <member refid="classsplinepy_1_1splines_1_1SplinepyBase_1a922a33f1754656830dda4933f294fa41" prot="public" virt="non-virtual"><scope>splinepy::splines::RationalBezier</scope><name>SplinepyParaDimMatches</name></member>
      <member refid="classsplinepy_1_1splines_1_1SplinepyBase_1a54dcf4b4f9ebd93c047a2de6b4b8ec23" prot="public" virt="virtual"><scope>splinepy::splines::RationalBezier</scope><name>SplinepyParameterSpace</name></member>
      <member refid="classsplinepy_1_1splines_1_1RationalBezier_1ad2869f6460d00786e925884afda6ab16" prot="public" virt="virtual"><scope>splinepy::splines::RationalBezier</scope><name>SplinepyParametricBounds</name></member>
      <member refid="classsplinepy_1_1splines_1_1RationalBezier_1a655dd76f93a8a1ca02b8bb1fecb83c82" prot="public" virt="virtual"><scope>splinepy::splines::RationalBezier</scope><name>SplinepyPlantNewKdTreeForProximity</name></member>
      <member refid="classsplinepy_1_1splines_1_1SplinepyBase_1abdc29d91239f8cbc6d80deab29327567" prot="public" virt="virtual"><scope>splinepy::splines::RationalBezier</scope><name>SplinepyReduceDegree</name></member>
      <member refid="classsplinepy_1_1splines_1_1SplinepyBase_1a87f592bab9442f544762bf187c21d819" prot="public" virt="virtual"><scope>splinepy::splines::RationalBezier</scope><name>SplinepyRemoveKnot</name></member>
      <member refid="classsplinepy_1_1splines_1_1RationalBezier_1ae9e589febdb3931dc5edf33b83e6ed81" prot="public" virt="virtual"><scope>splinepy::splines::RationalBezier</scope><name>SplinepySplineName</name></member>
      <member refid="classsplinepy_1_1splines_1_1SplinepyBase_1a9bc5332b3f0f6aa06e959d5c73e54f7f" prot="public" virt="non-virtual"><scope>splinepy::splines::RationalBezier</scope><name>SplinepySplineNameMatches</name></member>
      <member refid="classsplinepy_1_1splines_1_1RationalBezier_1a58e861256bd97c949018429e88bf2df9" prot="public" virt="virtual"><scope>splinepy::splines::RationalBezier</scope><name>SplinepySplit</name></member>
      <member refid="classsplinepy_1_1splines_1_1RationalBezier_1a80ef44d7b6a5f9250fc26fd0fe2923aa" prot="public" virt="virtual"><scope>splinepy::splines::RationalBezier</scope><name>SplinepySupport</name></member>
      <member refid="classsplinepy_1_1splines_1_1RationalBezier_1a311f2f145c25efbf07a4127a93fd728f" prot="public" virt="virtual"><scope>splinepy::splines::RationalBezier</scope><name>SplinepyVerboseProximity</name></member>
      <member refid="classsplinepy_1_1splines_1_1RationalBezier_1a8e0889eaef9c19858a2518d7ec702ee8" prot="public" virt="virtual"><scope>splinepy::splines::RationalBezier</scope><name>SplinepyWeightedControlPointPointers</name></member>
      <member refid="classsplinepy_1_1splines_1_1RationalBezier_1a1098dc0849393b10e09095c96f55d8d9" prot="public" virt="virtual"><scope>splinepy::splines::RationalBezier</scope><name>SplinepyWeightPointers</name></member>
      <member refid="classsplinepy_1_1splines_1_1RationalBezier_1a0164ebf3b3d2364894b747ab27772bfe" prot="public" virt="virtual"><scope>splinepy::splines::RationalBezier</scope><name>SplinepyWhatAmI</name></member>
      <member refid="classsplinepy_1_1splines_1_1RationalBezier_1a3431b783fae0066f058e1834f52ca36e" prot="public" virt="non-virtual"><scope>splinepy::splines::RationalBezier</scope><name>Weight_</name></member>
      <member refid="classsplinepy_1_1splines_1_1RationalBezier_1ad07398d0d22bba77389b66e5ade57d10" prot="public" virt="non-virtual"><scope>splinepy::splines::RationalBezier</scope><name>WeightedControlPointPointers_</name></member>
      <member refid="classsplinepy_1_1splines_1_1RationalBezier_1a8b515a4638167cbb3d30b30105ed49e4" prot="public" virt="non-virtual"><scope>splinepy::splines::RationalBezier</scope><name>WeightPointers_</name></member>
      <member refid="classsplinepy_1_1splines_1_1SplinepyBase_1aea386b22415f301117a669e1fa04d55c" prot="public" virt="virtual"><scope>splinepy::splines::RationalBezier</scope><name>~SplinepyBase</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
