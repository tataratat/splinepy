<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classsplinepy_1_1proximity_1_1Proximity" kind="class" language="C++" prot="public">
    <compoundname>splinepy::proximity::Proximity</compoundname>
    <includes refid="proximity_8hpp" local="no">proximity.hpp</includes>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classsplinepy_1_1proximity_1_1Proximity_1af670dc78d0fd5b6fea989d1d4bdab0bf" prot="public" static="no">
        <type>napf::ArrayCloud&lt; double, int &gt;</type>
        <definition>using Cloud_ =  napf::ArrayCloud&lt;double, int&gt;</definition>
        <argsstring></argsstring>
        <name>Cloud_</name>
        <qualifiedname>splinepy::proximity::Proximity::Cloud_</qualifiedname>
        <briefdescription>
<para>array cloud that wraps data of Array </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/proximity/proximity.hpp" line="233" column="3" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/proximity/proximity.hpp" bodystart="233" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classsplinepy_1_1proximity_1_1Proximity_1a8099212695aada5d3a94d0de42966d4e" prot="public" static="no">
        <type>napf::ArrayTree&lt; double, double, int, 2 &gt;</type>
        <definition>using Tree_ =  napf::ArrayTree&lt;double, double, int, 2&gt;</definition>
        <argsstring></argsstring>
        <name>Tree_</name>
        <qualifiedname>splinepy::proximity::Proximity::Tree_</qualifiedname>
        <briefdescription>
<para>metric is L2 and this returns squared distance </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/proximity/proximity.hpp" line="235" column="3" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/proximity/proximity.hpp" bodystart="235" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classsplinepy_1_1proximity_1_1Proximity_1a96864dcfe527491c13fb3f49fe817942" prot="protected" static="no" mutable="no">
        <type>const <ref refid="classsplinepy_1_1splines_1_1SplinepyBase" kindref="compound">splinepy::splines::SplinepyBase</ref> &amp;</type>
        <definition>const splinepy::splines::SplinepyBase&amp; spline_</definition>
        <argsstring></argsstring>
        <name>spline_</name>
        <qualifiedname>splinepy::proximity::Proximity::spline_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/proximity/proximity.hpp" line="239" column="41" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/proximity/proximity.hpp" bodystart="239" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classsplinepy_1_1proximity_1_1Proximity_1a2329b1ec8670869ea1dbdb85629d980b" prot="protected" static="no" mutable="no">
        <type><ref refid="classsplinepy_1_1utils_1_1GridPoints" kindref="compound">splinepy::utils::GridPoints</ref></type>
        <definition>splinepy::utils::GridPoints grid_points_</definition>
        <argsstring></argsstring>
        <name>grid_points_</name>
        <qualifiedname>splinepy::proximity::Proximity::grid_points_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/proximity/proximity.hpp" line="242" column="31" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/proximity/proximity.hpp" bodystart="242" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classsplinepy_1_1proximity_1_1Proximity_1a398bd36b3db46a6934adcbdde870f91c" prot="protected" static="no" mutable="no">
        <type><ref refid="namespacesplinepy_1_1proximity_1a70e0c33aa6fcbed8c056eb5f458d2ae4" kindref="member">RealArray</ref></type>
        <definition>RealArray sampled_spline_</definition>
        <argsstring></argsstring>
        <name>sampled_spline_</name>
        <qualifiedname>splinepy::proximity::Proximity::sampled_spline_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/proximity/proximity.hpp" line="243" column="13" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/proximity/proximity.hpp" bodystart="243" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classsplinepy_1_1proximity_1_1Proximity_1a3157abde4ecf99a5366c0d035daa262c" prot="protected" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="classsplinepy_1_1proximity_1_1Proximity_1af670dc78d0fd5b6fea989d1d4bdab0bf" kindref="member">Cloud_</ref> &gt;</type>
        <definition>std::unique_ptr&lt;Cloud_&gt; cloud_</definition>
        <argsstring></argsstring>
        <name>cloud_</name>
        <qualifiedname>splinepy::proximity::Proximity::cloud_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/proximity/proximity.hpp" line="244" column="19" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/proximity/proximity.hpp" bodystart="244" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classsplinepy_1_1proximity_1_1Proximity_1abbaea3ec19e8c761542f81acf6eaaacc" prot="protected" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="classsplinepy_1_1proximity_1_1Proximity_1a8099212695aada5d3a94d0de42966d4e" kindref="member">Tree_</ref> &gt;</type>
        <definition>std::unique_ptr&lt;Tree_&gt; kdtree_</definition>
        <argsstring></argsstring>
        <name>kdtree_</name>
        <qualifiedname>splinepy::proximity::Proximity::kdtree_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/proximity/proximity.hpp" line="245" column="19" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/proximity/proximity.hpp" bodystart="245" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classsplinepy_1_1proximity_1_1Proximity_1a324aaa9c890544e32bd1e7a4eacc07ca" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Proximity</definition>
        <argsstring>(const splinepy::splines::SplinepyBase &amp;spline)</argsstring>
        <name>Proximity</name>
        <qualifiedname>splinepy::proximity::Proximity::Proximity</qualifiedname>
        <param>
          <type>const <ref refid="classsplinepy_1_1splines_1_1SplinepyBase" kindref="compound">splinepy::splines::SplinepyBase</ref> &amp;</type>
          <declname>spline</declname>
        </param>
        <briefdescription>
<para>Constructor. As a spline helper class, always need a spline. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/proximity/proximity.hpp" line="249" column="3" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/proximity/proximity.hpp" bodystart="249" bodyend="249"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1proximity_1_1Proximity_1a78f057726c4086c6aaa4ef6f88e35b7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PlantNewKdTree</definition>
        <argsstring>(const int *resolutions, const int n_thread=1)</argsstring>
        <name>PlantNewKdTree</name>
        <qualifiedname>splinepy::proximity::Proximity::PlantNewKdTree</qualifiedname>
        <param>
          <type>const int *</type>
          <declname>resolutions</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>n_thread</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Plants a kdtree with given resolution. </para>
        </briefdescription>
        <detaileddescription>
<para>This needs to be built before BEFORE you request a proximity query with <computeroutput>InitialGuess::kdTree</computeroutput>. This will always plant a new tree: at runtime, if a finer tree is desired, you can plant it again.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>resolutions</parametername>
</parameternamelist>
<parameterdescription>
<para>parameter space sampling resolution </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n_thread</parametername>
</parameternamelist>
<parameterdescription>
<para>number of threads to be used for sampling </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/proximity/proximity.hpp" line="261" column="8" bodyfile="/home/runner/work/splinepy/splinepy/src/proximity/proximity.cpp" bodystart="145" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1proximity_1_1Proximity_1a5039b9171663bab0004f16d5f600c458" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void GuessMinusQuery</definition>
        <argsstring>(const RealArray &amp;guess, const ConstRealArray &amp;query, RealArray &amp;difference) const</argsstring>
        <name>GuessMinusQuery</name>
        <qualifiedname>splinepy::proximity::Proximity::GuessMinusQuery</qualifiedname>
        <param>
          <type>const <ref refid="namespacesplinepy_1_1proximity_1a70e0c33aa6fcbed8c056eb5f458d2ae4" kindref="member">RealArray</ref> &amp;</type>
          <declname>guess</declname>
        </param>
        <param>
          <type>const <ref refid="namespacesplinepy_1_1proximity_1a0268d731df47b1be3dbb96f91fa33a06" kindref="member">ConstRealArray</ref> &amp;</type>
          <declname>query</declname>
        </param>
        <param>
          <type><ref refid="namespacesplinepy_1_1proximity_1a70e0c33aa6fcbed8c056eb5f458d2ae4" kindref="member">RealArray</ref> &amp;</type>
          <declname>difference</declname>
        </param>
        <briefdescription>
<para>difference = spline(guess) - query. In current formulation, this is our objective function. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guess</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>query</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>difference</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/proximity/proximity.hpp" line="268" column="8" bodyfile="/home/runner/work/splinepy/splinepy/src/proximity/proximity.cpp" bodystart="188" bodyend="195"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1proximity_1_1Proximity_1a71df3d99818b62c0bee602e0e7cc9898" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void GuessMinusQuery</definition>
        <argsstring>(const RealArray &amp;guess, const ConstRealArray &amp;query, RealArray &amp;difference, RealArray &amp;guess_phys) const</argsstring>
        <name>GuessMinusQuery</name>
        <qualifiedname>splinepy::proximity::Proximity::GuessMinusQuery</qualifiedname>
        <param>
          <type>const <ref refid="namespacesplinepy_1_1proximity_1a70e0c33aa6fcbed8c056eb5f458d2ae4" kindref="member">RealArray</ref> &amp;</type>
          <declname>guess</declname>
        </param>
        <param>
          <type>const <ref refid="namespacesplinepy_1_1proximity_1a0268d731df47b1be3dbb96f91fa33a06" kindref="member">ConstRealArray</ref> &amp;</type>
          <declname>query</declname>
        </param>
        <param>
          <type><ref refid="namespacesplinepy_1_1proximity_1a70e0c33aa6fcbed8c056eb5f458d2ae4" kindref="member">RealArray</ref> &amp;</type>
          <declname>difference</declname>
        </param>
        <param>
          <type><ref refid="namespacesplinepy_1_1proximity_1a70e0c33aa6fcbed8c056eb5f458d2ae4" kindref="member">RealArray</ref> &amp;</type>
          <declname>guess_phys</declname>
        </param>
        <briefdescription>
<para>difference = spline(guess) - query. This returns spline(guess) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guess</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>query</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>difference</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>guess_phys</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/proximity/proximity.hpp" line="278" column="8" bodyfile="/home/runner/work/splinepy/splinepy/src/proximity/proximity.cpp" bodystart="197" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1proximity_1_1Proximity_1a059970b224c2b88401e267cda6056306" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MakeInitialGuess</definition>
        <argsstring>(const ConstRealArray &amp;goal, RealArray &amp;guess) const</argsstring>
        <name>MakeInitialGuess</name>
        <qualifiedname>splinepy::proximity::Proximity::MakeInitialGuess</qualifiedname>
        <param>
          <type>const <ref refid="namespacesplinepy_1_1proximity_1a0268d731df47b1be3dbb96f91fa33a06" kindref="member">ConstRealArray</ref> &amp;</type>
          <declname>goal</declname>
        </param>
        <param>
          <type><ref refid="namespacesplinepy_1_1proximity_1a70e0c33aa6fcbed8c056eb5f458d2ae4" kindref="member">RealArray</ref> &amp;</type>
          <declname>guess</declname>
        </param>
        <briefdescription>
<para>make initial guess - returns nearest neighbor from k-d tree </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>goal</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>guess</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/proximity/proximity.hpp" line="286" column="8" bodyfile="/home/runner/work/splinepy/splinepy/src/proximity/proximity.cpp" bodystart="205" bodyend="219"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1proximity_1_1Proximity_1ad3803fba4b510bc0032bb288aeca8474" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MakeInitialGuess</definition>
        <argsstring>(SearchData &amp;data) const</argsstring>
        <name>MakeInitialGuess</name>
        <qualifiedname>splinepy::proximity::Proximity::MakeInitialGuess</qualifiedname>
        <param>
          <type><ref refid="structsplinepy_1_1proximity_1_1SearchData" kindref="compound">SearchData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>make initial guess - returns nearest neighbor from k-d tree. Initial guess is saved to both initial_guess and current_guess </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/proximity/proximity.hpp" line="291" column="8" bodyfile="/home/runner/work/splinepy/splinepy/src/proximity/proximity.cpp" bodystart="221" bodyend="224"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1proximity_1_1Proximity_1abbfc07f94c7158549508652caf8d9970" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void UpdateAndClip</definition>
        <argsstring>(SearchData &amp;data) const</argsstring>
        <name>UpdateAndClip</name>
        <qualifiedname>splinepy::proximity::Proximity::UpdateAndClip</qualifiedname>
        <param>
          <type><ref refid="structsplinepy_1_1proximity_1_1SearchData" kindref="compound">SearchData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>updates current_guess with delta_guess and clips result </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/proximity/proximity.hpp" line="295" column="8" bodyfile="/home/runner/work/splinepy/splinepy/src/proximity/proximity.cpp" bodystart="226" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1proximity_1_1Proximity_1aa7f51b640993c400ef616904ecc88a04" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double J</definition>
        <argsstring>(const RealArray &amp;guess, const ConstRealArray &amp;query, RealArray &amp;difference, RealArray &amp;guess_phys) const</argsstring>
        <name>J</name>
        <qualifiedname>splinepy::proximity::Proximity::J</qualifiedname>
        <param>
          <type>const <ref refid="namespacesplinepy_1_1proximity_1a70e0c33aa6fcbed8c056eb5f458d2ae4" kindref="member">RealArray</ref> &amp;</type>
          <declname>guess</declname>
        </param>
        <param>
          <type>const <ref refid="namespacesplinepy_1_1proximity_1a0268d731df47b1be3dbb96f91fa33a06" kindref="member">ConstRealArray</ref> &amp;</type>
          <declname>query</declname>
        </param>
        <param>
          <type><ref refid="namespacesplinepy_1_1proximity_1a70e0c33aa6fcbed8c056eb5f458d2ae4" kindref="member">RealArray</ref> &amp;</type>
          <declname>difference</declname>
        </param>
        <param>
          <type><ref refid="namespacesplinepy_1_1proximity_1a70e0c33aa6fcbed8c056eb5f458d2ae4" kindref="member">RealArray</ref> &amp;</type>
          <declname>guess_phys</declname>
        </param>
        <briefdescription>
<para>returns J = .5 * distance^2. Where distance is norm of difference. Difference is defined as || query - spline(guess) ||. Byproducts, difference and guess_phys (=spline(guess)) are also returned. Used in <ref refid="classsplinepy_1_1proximity_1_1Proximity_1a763f998f2462d614816694590db82403" kindref="member">ComputeCostAndDerivatives()</ref> and corresponds to depth=0. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guess</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>query</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>difference</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>guess_phys</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>J </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/proximity/proximity.hpp" line="306" column="10" bodyfile="/home/runner/work/splinepy/splinepy/src/proximity/proximity.cpp" bodystart="231" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1proximity_1_1Proximity_1a44cdf9b5b9caf9ad32cbaef908273569" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dJdu</definition>
        <argsstring>(const RealArray &amp;guess, const RealArray &amp;difference, RealArray &amp;djdu, RealArray2D &amp;spline_gradient) const</argsstring>
        <name>dJdu</name>
        <qualifiedname>splinepy::proximity::Proximity::dJdu</qualifiedname>
        <param>
          <type>const <ref refid="namespacesplinepy_1_1proximity_1a70e0c33aa6fcbed8c056eb5f458d2ae4" kindref="member">RealArray</ref> &amp;</type>
          <declname>guess</declname>
        </param>
        <param>
          <type>const <ref refid="namespacesplinepy_1_1proximity_1a70e0c33aa6fcbed8c056eb5f458d2ae4" kindref="member">RealArray</ref> &amp;</type>
          <declname>difference</declname>
        </param>
        <param>
          <type><ref refid="namespacesplinepy_1_1proximity_1a70e0c33aa6fcbed8c056eb5f458d2ae4" kindref="member">RealArray</ref> &amp;</type>
          <declname>djdu</declname>
        </param>
        <param>
          <type><ref refid="namespacesplinepy_1_1proximity_1a6ffd1c98976d723d11bf5063020d9a7c" kindref="member">RealArray2D</ref> &amp;</type>
          <declname>spline_gradient</declname>
        </param>
        <briefdescription>
<para>Fills dJ/du and a byproduct spline_gradient (dS/du). Used in <ref refid="classsplinepy_1_1proximity_1_1Proximity_1a763f998f2462d614816694590db82403" kindref="member">ComputeCostAndDerivatives()</ref> and corresponds to depth=1. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guess</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>difference</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>djdu</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>spline_gradient</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/proximity/proximity.hpp" line="317" column="8" bodyfile="/home/runner/work/splinepy/splinepy/src/proximity/proximity.cpp" bodystart="239" bodyend="271"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1proximity_1_1Proximity_1a03467d5a9f33e023ef3dc9f27f98ee88" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void d2Jdu2</definition>
        <argsstring>(const RealArray &amp;guess, const RealArray &amp;difference, const RealArray2D &amp;spline_gradient_AAt, RealArray2D &amp;d2jdu2, RealArray3D &amp;spline_hessian) const</argsstring>
        <name>d2Jdu2</name>
        <qualifiedname>splinepy::proximity::Proximity::d2Jdu2</qualifiedname>
        <param>
          <type>const <ref refid="namespacesplinepy_1_1proximity_1a70e0c33aa6fcbed8c056eb5f458d2ae4" kindref="member">RealArray</ref> &amp;</type>
          <declname>guess</declname>
        </param>
        <param>
          <type>const <ref refid="namespacesplinepy_1_1proximity_1a70e0c33aa6fcbed8c056eb5f458d2ae4" kindref="member">RealArray</ref> &amp;</type>
          <declname>difference</declname>
        </param>
        <param>
          <type>const <ref refid="namespacesplinepy_1_1proximity_1a6ffd1c98976d723d11bf5063020d9a7c" kindref="member">RealArray2D</ref> &amp;</type>
          <declname>spline_gradient_AAt</declname>
        </param>
        <param>
          <type><ref refid="namespacesplinepy_1_1proximity_1a6ffd1c98976d723d11bf5063020d9a7c" kindref="member">RealArray2D</ref> &amp;</type>
          <declname>d2jdu2</declname>
        </param>
        <param>
          <type><ref refid="namespacesplinepy_1_1proximity_1a5905cb3ac9c10468cb620098703da388" kindref="member">RealArray3D</ref> &amp;</type>
          <declname>spline_hessian</declname>
        </param>
        <briefdescription>
<para>Fills hessian of J (d2J/du2) and a byproduct spline_hessian (d2S/du2). Used in <ref refid="classsplinepy_1_1proximity_1_1Proximity_1a763f998f2462d614816694590db82403" kindref="member">ComputeCostAndDerivatives()</ref> and corresponds to depth=2. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guess</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>difference</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>spline_gradient_AAt</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>d2jdu2</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>spline_hessian</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/proximity/proximity.hpp" line="329" column="8" bodyfile="/home/runner/work/splinepy/splinepy/src/proximity/proximity.cpp" bodystart="273" bodyend="321"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1proximity_1_1Proximity_1a763f998f2462d614816694590db82403" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ComputeCostAndDerivatives</definition>
        <argsstring>(SearchData &amp;data, int depth) const</argsstring>
        <name>ComputeCostAndDerivatives</name>
        <qualifiedname>splinepy::proximity::Proximity::ComputeCostAndDerivatives</qualifiedname>
        <param>
          <type><ref refid="structsplinepy_1_1proximity_1_1SearchData" kindref="compound">SearchData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int</type>
          <declname>depth</declname>
        </param>
        <briefdescription>
<para>computes J and its derivatives based on the value of depth. depth == 1 -&gt; jacobian, dept &gt; 1 -&gt; jacobian &amp; hessian. Negative value is considered as highest depth we can compute (currently hessian) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>depth</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/proximity/proximity.hpp" line="340" column="8" bodyfile="/home/runner/work/splinepy/splinepy/src/proximity/proximity.cpp" bodystart="323" bodyend="346"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1proximity_1_1Proximity_1afae8f61fe1415c8031027fcfdfd4b228" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ComputeStatus</definition>
        <argsstring>(SearchData &amp;data, const bool recompute_costs) const</argsstring>
        <name>ComputeStatus</name>
        <qualifiedname>splinepy::proximity::Proximity::ComputeStatus</qualifiedname>
        <param>
          <type><ref refid="structsplinepy_1_1proximity_1_1SearchData" kindref="compound">SearchData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>recompute_costs</declname>
        </param>
        <briefdescription>
<para>Computes status in <ref refid="structsplinepy_1_1proximity_1_1SearchData" kindref="compound">SearchData</ref> based on current values in <ref refid="structsplinepy_1_1proximity_1_1SearchData" kindref="compound">SearchData</ref>. If recompute_costs==true, it will compute the cost and its derivative again and store it. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>recompute_costs</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/proximity/proximity.hpp" line="347" column="8" bodyfile="/home/runner/work/splinepy/splinepy/src/proximity/proximity.cpp" bodystart="348" bodyend="359"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1proximity_1_1Proximity_1ac6afa3dce7d30dc3dfe64bd36084c5b6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void FindSearchBound</definition>
        <argsstring>(SearchData &amp;data, const bool tight=false) const</argsstring>
        <name>FindSearchBound</name>
        <qualifiedname>splinepy::proximity::Proximity::FindSearchBound</qualifiedname>
        <param>
          <type><ref refid="structsplinepy_1_1proximity_1_1SearchData" kindref="compound">SearchData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>tight</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>resets search bounds to spline&apos;s parametric bounds. if tight==true, current_guess +- grid_points_&apos;s sampling step size. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tight</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/proximity/proximity.hpp" line="353" column="8" bodyfile="/home/runner/work/splinepy/splinepy/src/proximity/proximity.cpp" bodystart="361" bodyend="380"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1proximity_1_1Proximity_1a5bccb0d823f7af2b0c6afec80bb78c50" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PrepareIterationNewton</definition>
        <argsstring>(SearchData &amp;data) const</argsstring>
        <name>PrepareIterationNewton</name>
        <qualifiedname>splinepy::proximity::Proximity::PrepareIterationNewton</qualifiedname>
        <param>
          <type><ref refid="structsplinepy_1_1proximity_1_1SearchData" kindref="compound">SearchData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Prepares lhs and rhs of newton iteration. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/proximity/proximity.hpp" line="356" column="8" bodyfile="/home/runner/work/splinepy/splinepy/src/proximity/proximity.cpp" bodystart="382" bodyend="389"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1proximity_1_1Proximity_1a1d37b48382b994fe06b16d7932310b34" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Newton</definition>
        <argsstring>(SearchData &amp;data) const</argsstring>
        <name>Newton</name>
        <qualifiedname>splinepy::proximity::Proximity::Newton</qualifiedname>
        <param>
          <type><ref refid="structsplinepy_1_1proximity_1_1SearchData" kindref="compound">SearchData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Performs newton iterations using PrepareIterationNewton. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
<para>set lhs matrix to d2jdu2</para>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/proximity/proximity.hpp" line="360" column="8" bodyfile="/home/runner/work/splinepy/splinepy/src/proximity/proximity.cpp" bodystart="391" bodyend="427"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1proximity_1_1Proximity_1a9e634d5142db53be3cc71cbeb037e459" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PrepareIterationLevenbergMarquart</definition>
        <argsstring>(SearchData &amp;data) const</argsstring>
        <name>PrepareIterationLevenbergMarquart</name>
        <qualifiedname>splinepy::proximity::Proximity::PrepareIterationLevenbergMarquart</qualifiedname>
        <param>
          <type><ref refid="structsplinepy_1_1proximity_1_1SearchData" kindref="compound">SearchData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Prepares lhs and rhs of LM iteration. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/proximity/proximity.hpp" line="364" column="8" bodyfile="/home/runner/work/splinepy/splinepy/src/proximity/proximity.cpp" bodystart="429" bodyend="453"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1proximity_1_1Proximity_1a12ca9dd0e254380b14981ac41e12f5d7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void LevenbergMarquart</definition>
        <argsstring>(SearchData &amp;data) const</argsstring>
        <name>LevenbergMarquart</name>
        <qualifiedname>splinepy::proximity::Proximity::LevenbergMarquart</qualifiedname>
        <param>
          <type><ref refid="structsplinepy_1_1proximity_1_1SearchData" kindref="compound">SearchData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Levenberg-Marquart method. Intended to be used as a fallback method for newton. Uses <ref refid="classsplinepy_1_1proximity_1_1Proximity_1a9e634d5142db53be3cc71cbeb037e459" kindref="member">PrepareIterationLevenbergMarquart()</ref> </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/proximity/proximity.hpp" line="369" column="8" bodyfile="/home/runner/work/splinepy/splinepy/src/proximity/proximity.cpp" bodystart="455" bodyend="551"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1proximity_1_1Proximity_1aee8736b8c0d27df9ec6be2e300882a34" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PrepareIterationSlsqp</definition>
        <argsstring>(SearchData &amp;data) const</argsstring>
        <name>PrepareIterationSlsqp</name>
        <qualifiedname>splinepy::proximity::Proximity::PrepareIterationSlsqp</qualifiedname>
        <param>
          <type><ref refid="structsplinepy_1_1proximity_1_1SearchData" kindref="compound">SearchData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Prepares lhs and rhs of slsqp iteration and other parameters. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/proximity/proximity.hpp" line="372" column="8" bodyfile="/home/runner/work/splinepy/splinepy/src/proximity/proximity.cpp" bodystart="553" bodyend="571"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1proximity_1_1Proximity_1a8bf129e56e5e69cefd73b046cfad68dc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Slsqp</definition>
        <argsstring>(SearchData &amp;data) const</argsstring>
        <name>Slsqp</name>
        <qualifiedname>splinepy::proximity::Proximity::Slsqp</qualifiedname>
        <param>
          <type><ref refid="structsplinepy_1_1proximity_1_1SearchData" kindref="compound">SearchData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Performs slsqp iterations using PrepareIterationSlsqp. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/proximity/proximity.hpp" line="376" column="8" bodyfile="/home/runner/work/splinepy/splinepy/src/proximity/proximity.cpp" bodystart="573" bodyend="641"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1proximity_1_1Proximity_1af82b608c2d0ceac506ffa6b8230efd5e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void VerboseQuery</definition>
        <argsstring>(const double *query, const double &amp;tolerance, const int &amp;max_iterations, const bool tight_bounds, double *final_guess, double *nearest, double *nearest_minus_query, double &amp;distance, double &amp;convergence_norm, double *first_derivatives, double *second_derivatives) const</argsstring>
        <name>VerboseQuery</name>
        <qualifiedname>splinepy::proximity::Proximity::VerboseQuery</qualifiedname>
        <param>
          <type>const double *</type>
          <declname>query</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>tolerance</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>max_iterations</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>tight_bounds</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>final_guess</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>nearest</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>nearest_minus_query</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>distance</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>convergence_norm</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>first_derivatives</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>second_derivatives</declname>
        </param>
        <briefdescription>
<para>Given physical coordinate, finds closest parametric coordinate. Always takes initial guess based on kdtree. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">query</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">tolerance</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">max_iterations</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">tight_bounds</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">final_guess</parametername>
</parameternamelist>
<parameterdescription>
<para>(para_dim) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">nearest</parametername>
</parameternamelist>
<parameterdescription>
<para>(dim) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">nearest_minus_query</parametername>
</parameternamelist>
<parameterdescription>
<para>(dim) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">distance</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">convergence_norm</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">first_derivatives</parametername>
</parameternamelist>
<parameterdescription>
<para>(para_dim x dim) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">second_derivatives</parametername>
</parameternamelist>
<parameterdescription>
<para>(para_dim x para_dim x dim) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/proximity/proximity.hpp" line="392" column="8" bodyfile="/home/runner/work/splinepy/splinepy/src/proximity/proximity.cpp" bodystart="643" bodyend="745"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>A helper class to perform proximity operations for splines. </para>
    </briefdescription>
    <detaileddescription>
<para>Given a physical coordinate, this tries to find parametric coordinate that maps to the closest physical coordinate. Often referred as &quot;point inversion&quot;. This is done by searching for a root of first derivative of squared distance between mapped coordinate and query coordinate. For detailed information, please take a look at splinepy python documentation.</para>
<para>J = 1 / 2 * (p - S(u))^2 </para>
    </detaileddescription>
    <collaborationgraph>
      <node id="4">
        <label>Array&lt; double &gt;</label>
        <link refid="classsplinepy_1_1utils_1_1Array"/>
        <childnode refid="5" relation="template-instance">
          <edgelabel>&lt; double &gt;</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>Proximity</label>
        <link refid="classsplinepy_1_1proximity_1_1Proximity"/>
        <childnode refid="2" relation="usage">
          <edgelabel>#spline_</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>#grid_points_</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>#sampled_spline_</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>SplinepyBase</label>
        <link refid="classsplinepy_1_1splines_1_1SplinepyBase"/>
      </node>
      <node id="5">
        <label>Array&lt; DataType, dim, IndexType &gt;</label>
        <link refid="classsplinepy_1_1utils_1_1Array"/>
      </node>
      <node id="3">
        <label>GridPoints</label>
        <link refid="classsplinepy_1_1utils_1_1GridPoints"/>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/splinepy/splinepy/include/splinepy/proximity/proximity.hpp" line="230" column="1" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/proximity/proximity.hpp" bodystart="230" bodyend="403"/>
    <listofallmembers>
      <member refid="classsplinepy_1_1proximity_1_1Proximity_1af670dc78d0fd5b6fea989d1d4bdab0bf" prot="public" virt="non-virtual"><scope>splinepy::proximity::Proximity</scope><name>Cloud_</name></member>
      <member refid="classsplinepy_1_1proximity_1_1Proximity_1a3157abde4ecf99a5366c0d035daa262c" prot="protected" virt="non-virtual"><scope>splinepy::proximity::Proximity</scope><name>cloud_</name></member>
      <member refid="classsplinepy_1_1proximity_1_1Proximity_1a763f998f2462d614816694590db82403" prot="public" virt="non-virtual"><scope>splinepy::proximity::Proximity</scope><name>ComputeCostAndDerivatives</name></member>
      <member refid="classsplinepy_1_1proximity_1_1Proximity_1afae8f61fe1415c8031027fcfdfd4b228" prot="public" virt="non-virtual"><scope>splinepy::proximity::Proximity</scope><name>ComputeStatus</name></member>
      <member refid="classsplinepy_1_1proximity_1_1Proximity_1a03467d5a9f33e023ef3dc9f27f98ee88" prot="public" virt="non-virtual"><scope>splinepy::proximity::Proximity</scope><name>d2Jdu2</name></member>
      <member refid="classsplinepy_1_1proximity_1_1Proximity_1a44cdf9b5b9caf9ad32cbaef908273569" prot="public" virt="non-virtual"><scope>splinepy::proximity::Proximity</scope><name>dJdu</name></member>
      <member refid="classsplinepy_1_1proximity_1_1Proximity_1ac6afa3dce7d30dc3dfe64bd36084c5b6" prot="public" virt="non-virtual"><scope>splinepy::proximity::Proximity</scope><name>FindSearchBound</name></member>
      <member refid="classsplinepy_1_1proximity_1_1Proximity_1a2329b1ec8670869ea1dbdb85629d980b" prot="protected" virt="non-virtual"><scope>splinepy::proximity::Proximity</scope><name>grid_points_</name></member>
      <member refid="classsplinepy_1_1proximity_1_1Proximity_1a5039b9171663bab0004f16d5f600c458" prot="public" virt="non-virtual"><scope>splinepy::proximity::Proximity</scope><name>GuessMinusQuery</name></member>
      <member refid="classsplinepy_1_1proximity_1_1Proximity_1a71df3d99818b62c0bee602e0e7cc9898" prot="public" virt="non-virtual"><scope>splinepy::proximity::Proximity</scope><name>GuessMinusQuery</name></member>
      <member refid="classsplinepy_1_1proximity_1_1Proximity_1aa7f51b640993c400ef616904ecc88a04" prot="public" virt="non-virtual"><scope>splinepy::proximity::Proximity</scope><name>J</name></member>
      <member refid="classsplinepy_1_1proximity_1_1Proximity_1abbaea3ec19e8c761542f81acf6eaaacc" prot="protected" virt="non-virtual"><scope>splinepy::proximity::Proximity</scope><name>kdtree_</name></member>
      <member refid="classsplinepy_1_1proximity_1_1Proximity_1a12ca9dd0e254380b14981ac41e12f5d7" prot="public" virt="non-virtual"><scope>splinepy::proximity::Proximity</scope><name>LevenbergMarquart</name></member>
      <member refid="classsplinepy_1_1proximity_1_1Proximity_1a059970b224c2b88401e267cda6056306" prot="public" virt="non-virtual"><scope>splinepy::proximity::Proximity</scope><name>MakeInitialGuess</name></member>
      <member refid="classsplinepy_1_1proximity_1_1Proximity_1ad3803fba4b510bc0032bb288aeca8474" prot="public" virt="non-virtual"><scope>splinepy::proximity::Proximity</scope><name>MakeInitialGuess</name></member>
      <member refid="classsplinepy_1_1proximity_1_1Proximity_1a1d37b48382b994fe06b16d7932310b34" prot="public" virt="non-virtual"><scope>splinepy::proximity::Proximity</scope><name>Newton</name></member>
      <member refid="classsplinepy_1_1proximity_1_1Proximity_1a78f057726c4086c6aaa4ef6f88e35b7a" prot="public" virt="non-virtual"><scope>splinepy::proximity::Proximity</scope><name>PlantNewKdTree</name></member>
      <member refid="classsplinepy_1_1proximity_1_1Proximity_1a9e634d5142db53be3cc71cbeb037e459" prot="public" virt="non-virtual"><scope>splinepy::proximity::Proximity</scope><name>PrepareIterationLevenbergMarquart</name></member>
      <member refid="classsplinepy_1_1proximity_1_1Proximity_1a5bccb0d823f7af2b0c6afec80bb78c50" prot="public" virt="non-virtual"><scope>splinepy::proximity::Proximity</scope><name>PrepareIterationNewton</name></member>
      <member refid="classsplinepy_1_1proximity_1_1Proximity_1aee8736b8c0d27df9ec6be2e300882a34" prot="public" virt="non-virtual"><scope>splinepy::proximity::Proximity</scope><name>PrepareIterationSlsqp</name></member>
      <member refid="classsplinepy_1_1proximity_1_1Proximity_1a324aaa9c890544e32bd1e7a4eacc07ca" prot="public" virt="non-virtual"><scope>splinepy::proximity::Proximity</scope><name>Proximity</name></member>
      <member refid="classsplinepy_1_1proximity_1_1Proximity_1a398bd36b3db46a6934adcbdde870f91c" prot="protected" virt="non-virtual"><scope>splinepy::proximity::Proximity</scope><name>sampled_spline_</name></member>
      <member refid="classsplinepy_1_1proximity_1_1Proximity_1a8bf129e56e5e69cefd73b046cfad68dc" prot="public" virt="non-virtual"><scope>splinepy::proximity::Proximity</scope><name>Slsqp</name></member>
      <member refid="classsplinepy_1_1proximity_1_1Proximity_1a96864dcfe527491c13fb3f49fe817942" prot="protected" virt="non-virtual"><scope>splinepy::proximity::Proximity</scope><name>spline_</name></member>
      <member refid="classsplinepy_1_1proximity_1_1Proximity_1a8099212695aada5d3a94d0de42966d4e" prot="public" virt="non-virtual"><scope>splinepy::proximity::Proximity</scope><name>Tree_</name></member>
      <member refid="classsplinepy_1_1proximity_1_1Proximity_1abbfc07f94c7158549508652caf8d9970" prot="public" virt="non-virtual"><scope>splinepy::proximity::Proximity</scope><name>UpdateAndClip</name></member>
      <member refid="classsplinepy_1_1proximity_1_1Proximity_1af82b608c2d0ceac506ffa6b8230efd5e" prot="public" virt="non-virtual"><scope>splinepy::proximity::Proximity</scope><name>VerboseQuery</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
