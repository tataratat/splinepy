<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="arrays_8hpp" kind="file" language="C++">
    <compoundname>arrays.hpp</compoundname>
    <includes local="no">algorithm</includes>
    <includes local="no">array</includes>
    <includes local="no">cmath</includes>
    <includes local="no">iterator</includes>
    <includes local="no">numeric</includes>
    <includes local="no">type_traits</includes>
    <includes refid="print_8hpp" local="yes">splinepy/utils/print.hpp</includes>
    <includedby refid="extract_8hpp" local="yes">extract.hpp</includedby>
    <includedby refid="proximity_8hpp" local="yes">proximity.hpp</includedby>
    <includedby refid="py__parameter__space_8cpp" local="yes">py_parameter_space.cpp</includedby>
    <includedby refid="py__spline_8cpp" local="yes">py_spline.cpp</includedby>
    <includedby refid="py__spline__extensions_8cpp" local="yes">py_spline_extensions.cpp</includedby>
    <includedby refid="scalar__type__wrapper_8hpp" local="no">scalar_type_wrapper.hpp</includedby>
    <incdepgraph>
      <node id="1">
        <label>arrays.hpp</label>
        <link refid="arrays_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>splinepy/utils/print.hpp</label>
        <link refid="print_8hpp"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>algorithm</label>
      </node>
      <node id="3">
        <label>array</label>
      </node>
      <node id="4">
        <label>cmath</label>
      </node>
      <node id="9">
        <label>iostream</label>
      </node>
      <node id="5">
        <label>iterator</label>
      </node>
      <node id="6">
        <label>numeric</label>
      </node>
      <node id="10">
        <label>sstream</label>
      </node>
      <node id="11">
        <label>stdexcept</label>
      </node>
      <node id="7">
        <label>type_traits</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="44">
        <label>proximity.hpp</label>
        <link refid="proximity_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>bezier.hpp</label>
        <link refid="splines_2bezier_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>bezier.inl</label>
        <link refid="bezier_8inl"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>bspline.hpp</label>
        <link refid="splines_2bspline_8hpp"/>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>create_bezier.hpp</label>
        <link refid="create__bezier_8hpp"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>create_rational_bezier.hpp</label>
        <link refid="create__rational__bezier_8hpp"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>extract.hpp</label>
        <link refid="extract_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>scalar_type_wrapper.hpp</label>
        <link refid="scalar__type__wrapper_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>nurbs.hpp</label>
        <link refid="splines_2nurbs_8hpp"/>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>rational_bezier.hpp</label>
        <link refid="splines_2rational__bezier_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>rational_bezier.inl</label>
        <link refid="rational__bezier_8inl"/>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>arrays.hpp</label>
        <link refid="arrays_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>bezier_explicit1.cpp</label>
        <link refid="bezier__explicit1_8cpp"/>
      </node>
      <node id="6">
        <label>bezier_explicit10.cpp</label>
        <link refid="bezier__explicit10_8cpp"/>
      </node>
      <node id="7">
        <label>bezier_explicit2.cpp</label>
        <link refid="bezier__explicit2_8cpp"/>
      </node>
      <node id="8">
        <label>bezier_explicit3.cpp</label>
        <link refid="bezier__explicit3_8cpp"/>
      </node>
      <node id="9">
        <label>bezier_explicit4.cpp</label>
        <link refid="bezier__explicit4_8cpp"/>
      </node>
      <node id="10">
        <label>bezier_explicit5.cpp</label>
        <link refid="bezier__explicit5_8cpp"/>
      </node>
      <node id="11">
        <label>bezier_explicit6.cpp</label>
        <link refid="bezier__explicit6_8cpp"/>
      </node>
      <node id="12">
        <label>bezier_explicit7.cpp</label>
        <link refid="bezier__explicit7_8cpp"/>
      </node>
      <node id="13">
        <label>bezier_explicit8.cpp</label>
        <link refid="bezier__explicit8_8cpp"/>
      </node>
      <node id="14">
        <label>bezier_explicit9.cpp</label>
        <link refid="bezier__explicit9_8cpp"/>
      </node>
      <node id="38">
        <label>bspline_explicit.cpp</label>
        <link refid="bspline__explicit_8cpp"/>
      </node>
      <node id="42">
        <label>nurbs_explicit.cpp</label>
        <link refid="nurbs__explicit_8cpp"/>
      </node>
      <node id="27">
        <label>rational_bezier_explicit1.cpp</label>
        <link refid="rational__bezier__explicit1_8cpp"/>
      </node>
      <node id="28">
        <label>rational_bezier_explicit10.cpp</label>
        <link refid="rational__bezier__explicit10_8cpp"/>
      </node>
      <node id="29">
        <label>rational_bezier_explicit2.cpp</label>
        <link refid="rational__bezier__explicit2_8cpp"/>
      </node>
      <node id="30">
        <label>rational_bezier_explicit3.cpp</label>
        <link refid="rational__bezier__explicit3_8cpp"/>
      </node>
      <node id="31">
        <label>rational_bezier_explicit4.cpp</label>
        <link refid="rational__bezier__explicit4_8cpp"/>
      </node>
      <node id="32">
        <label>rational_bezier_explicit5.cpp</label>
        <link refid="rational__bezier__explicit5_8cpp"/>
      </node>
      <node id="33">
        <label>rational_bezier_explicit6.cpp</label>
        <link refid="rational__bezier__explicit6_8cpp"/>
      </node>
      <node id="34">
        <label>rational_bezier_explicit7.cpp</label>
        <link refid="rational__bezier__explicit7_8cpp"/>
      </node>
      <node id="35">
        <label>rational_bezier_explicit8.cpp</label>
        <link refid="rational__bezier__explicit8_8cpp"/>
      </node>
      <node id="36">
        <label>rational_bezier_explicit9.cpp</label>
        <link refid="rational__bezier__explicit9_8cpp"/>
      </node>
      <node id="45">
        <label>proximity.cpp</label>
        <link refid="proximity_8cpp"/>
      </node>
      <node id="43">
        <label>py_knot_insertion_matrix.cpp</label>
        <link refid="py__knot__insertion__matrix_8cpp"/>
      </node>
      <node id="49">
        <label>py_multipatch.cpp</label>
        <link refid="py__multipatch_8cpp"/>
      </node>
      <node id="46">
        <label>py_parameter_space.cpp</label>
        <link refid="py__parameter__space_8cpp"/>
      </node>
      <node id="20">
        <label>py_spline.cpp</label>
        <link refid="py__spline_8cpp"/>
      </node>
      <node id="47">
        <label>py_spline_extensions.cpp</label>
        <link refid="py__spline__extensions_8cpp"/>
      </node>
      <node id="39">
        <label>py_spline_reader.cpp</label>
        <link refid="py__spline__reader_8cpp"/>
      </node>
      <node id="16">
        <label>bezier1.cpp</label>
        <link refid="bezier1_8cpp"/>
      </node>
      <node id="17">
        <label>bezier2.cpp</label>
        <link refid="bezier2_8cpp"/>
      </node>
      <node id="18">
        <label>bezier3.cpp</label>
        <link refid="bezier3_8cpp"/>
      </node>
      <node id="24">
        <label>rational_bezier1.cpp</label>
        <link refid="rational__bezier1_8cpp"/>
      </node>
      <node id="25">
        <label>rational_bezier2.cpp</label>
        <link refid="rational__bezier2_8cpp"/>
      </node>
      <node id="26">
        <label>rational_bezier3.cpp</label>
        <link refid="rational__bezier3_8cpp"/>
      </node>
      <node id="40">
        <label>extract.cpp</label>
        <link refid="extract_8cpp"/>
      </node>
      <node id="19">
        <label>splinepy_base.cpp</label>
        <link refid="splinepy__base_8cpp"/>
      </node>
    </invincdepgraph>
    <innerclass refid="classsplinepy_1_1utils_1_1Array" prot="public">splinepy::utils::Array</innerclass>
    <innerclass refid="classsplinepy_1_1utils_1_1Matrix" prot="public">splinepy::utils::Matrix</innerclass>
    <innernamespace refid="namespacesplinepy">splinepy</innernamespace>
    <innernamespace refid="namespacesplinepy_1_1utils">splinepy::utils</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment">MIT<sp/>License</highlight></codeline>
<codeline lineno="3"><highlight class="comment"></highlight></codeline>
<codeline lineno="4"><highlight class="comment">Copyright<sp/>(c)<sp/>2021<sp/>Jaewook<sp/>Lee</highlight></codeline>
<codeline lineno="5"><highlight class="comment"></highlight></codeline>
<codeline lineno="6"><highlight class="comment">Permission<sp/>is<sp/>hereby<sp/>granted,<sp/>free<sp/>of<sp/>charge,<sp/>to<sp/>any<sp/>person<sp/>obtaining<sp/>a<sp/>copy</highlight></codeline>
<codeline lineno="7"><highlight class="comment">of<sp/>this<sp/>software<sp/>and<sp/>associated<sp/>documentation<sp/>files<sp/>(the<sp/>&quot;Software&quot;),<sp/>to<sp/>deal</highlight></codeline>
<codeline lineno="8"><highlight class="comment">in<sp/>the<sp/>Software<sp/>without<sp/>restriction,<sp/>including<sp/>without<sp/>limitation<sp/>the<sp/>rights</highlight></codeline>
<codeline lineno="9"><highlight class="comment">to<sp/>use,<sp/>copy,<sp/>modify,<sp/>merge,<sp/>publish,<sp/>distribute,<sp/>sublicense,<sp/>and/or<sp/>sell</highlight></codeline>
<codeline lineno="10"><highlight class="comment">copies<sp/>of<sp/>the<sp/>Software,<sp/>and<sp/>to<sp/>permit<sp/>persons<sp/>to<sp/>whom<sp/>the<sp/>Software<sp/>is</highlight></codeline>
<codeline lineno="11"><highlight class="comment">furnished<sp/>to<sp/>do<sp/>so,<sp/>subject<sp/>to<sp/>the<sp/>following<sp/>conditions:</highlight></codeline>
<codeline lineno="12"><highlight class="comment"></highlight></codeline>
<codeline lineno="13"><highlight class="comment">The<sp/>above<sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>shall<sp/>be<sp/>included<sp/>in<sp/>all</highlight></codeline>
<codeline lineno="14"><highlight class="comment">copies<sp/>or<sp/>substantial<sp/>portions<sp/>of<sp/>the<sp/>Software.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"></highlight></codeline>
<codeline lineno="16"><highlight class="comment">THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/>IS&quot;,<sp/>WITHOUT<sp/>WARRANTY<sp/>OF<sp/>ANY<sp/>KIND,<sp/>EXPRESS<sp/>OR</highlight></codeline>
<codeline lineno="17"><highlight class="comment">IMPLIED,<sp/>INCLUDING<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO<sp/>THE<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY,</highlight></codeline>
<codeline lineno="18"><highlight class="comment">FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND<sp/>NONINFRINGEMENT.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE</highlight></codeline>
<codeline lineno="19"><highlight class="comment">AUTHORS<sp/>OR<sp/>COPYRIGHT<sp/>HOLDERS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>CLAIM,<sp/>DAMAGES<sp/>OR<sp/>OTHER</highlight></codeline>
<codeline lineno="20"><highlight class="comment">LIABILITY,<sp/>WHETHER<sp/>IN<sp/>AN<sp/>ACTION<sp/>OF<sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING<sp/>FROM,</highlight></codeline>
<codeline lineno="21"><highlight class="comment">OUT<sp/>OF<sp/>OR<sp/>IN<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>SOFTWARE<sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/>OTHER<sp/>DEALINGS<sp/>IN<sp/>THE</highlight></codeline>
<codeline lineno="22"><highlight class="comment">SOFTWARE.</highlight></codeline>
<codeline lineno="23"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;array&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iterator&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;numeric&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;type_traits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="print_8hpp" kindref="compound">splinepy/utils/print.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36" refid="namespacesplinepy_1_1utils" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacesplinepy_1_1utils" kindref="compound">splinepy::utils</ref><sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DataType,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim<sp/>=<sp/>1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IndexType<sp/>=<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="42" refid="classsplinepy_1_1utils_1_1Array" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classsplinepy_1_1utils_1_1Array" kindref="compound">Array</ref><sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(dim<sp/>&gt;<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;dim<sp/>needs<sp/>to<sp/>be<sp/>positive<sp/>value<sp/>bigger<sp/>than<sp/>zero.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(std::is_integral_v&lt;IndexType&gt;,</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;IndexType<sp/>should<sp/>be<sp/>an<sp/>integral<sp/>type&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="48" refid="classsplinepy_1_1utils_1_1Array_1ace8c7b9eba68e41a0d6c21ea971637f6" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="classsplinepy_1_1utils_1_1Array_1ace8c7b9eba68e41a0d6c21ea971637f6" kindref="member">ShapeType_</ref><sp/>=<sp/>std::array&lt;IndexType,<sp/>dim&gt;;</highlight></codeline>
<codeline lineno="49" refid="classsplinepy_1_1utils_1_1Array_1a844c863e21272c53f7a12829e69d8c59" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="classsplinepy_1_1utils_1_1Array_1a844c863e21272c53f7a12829e69d8c59" kindref="member">StridesType_</ref><sp/>=<sp/>std::array&lt;IndexType,<sp/>dim<sp/>-<sp/>1&gt;;</highlight></codeline>
<codeline lineno="50" refid="classsplinepy_1_1utils_1_1Array_1a0ada8d0106954f4b35edcd9ffe678686" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IndexType<sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a0ada8d0106954f4b35edcd9ffe678686" kindref="member">kDim</ref><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">IndexType</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(dim);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52" refid="classsplinepy_1_1utils_1_1Array_1a7df28105bea7ae6d0d78a1a4da44e86b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="classsplinepy_1_1utils_1_1Array_1a7df28105bea7ae6d0d78a1a4da44e86b" kindref="member">DataType_</ref><sp/>=<sp/>DataType;</highlight></codeline>
<codeline lineno="53" refid="classsplinepy_1_1utils_1_1Array_1a95d51f45162d74c83a7e3c20471dcd6e" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="classsplinepy_1_1utils_1_1Array_1a95d51f45162d74c83a7e3c20471dcd6e" kindref="member">IndexType_</ref><sp/>=<sp/>IndexType;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>std<sp/>container<sp/>like<sp/>types</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56" refid="classsplinepy_1_1utils_1_1Array_1a12946efe528d48c02aa751c0d42f3017" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="classsplinepy_1_1utils_1_1Array_1a12946efe528d48c02aa751c0d42f3017" kindref="member">value_type</ref><sp/>=<sp/>DataType;</highlight></codeline>
<codeline lineno="57" refid="classsplinepy_1_1utils_1_1Array_1a1ed20642c504789b157f2aa44832ada2" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="classsplinepy_1_1utils_1_1Array_1a1ed20642c504789b157f2aa44832ada2" kindref="member">size_type</ref><sp/>=<sp/>IndexType;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="60" refid="classsplinepy_1_1utils_1_1Array_1aa0a52906d4a2a37abafe4fd8e2b40668" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classsplinepy_1_1utils_1_1Array_1aa0a52906d4a2a37abafe4fd8e2b40668" kindref="member">own_data_</ref>{</highlight><highlight class="keyword">false</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="62" refid="classsplinepy_1_1utils_1_1Array_1a446297c547ebaf652c826cae0dcb96e8" refkind="member"><highlight class="normal"><sp/><sp/>DataType*<sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a446297c547ebaf652c826cae0dcb96e8" kindref="member">data_</ref>{</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="65" refid="classsplinepy_1_1utils_1_1Array_1a88aa79a90b0954ba0d578f5c3c40cd21" refkind="member"><highlight class="normal"><sp/><sp/>IndexType<sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a88aa79a90b0954ba0d578f5c3c40cd21" kindref="member">size_</ref>{};</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="69" refid="classsplinepy_1_1utils_1_1Array_1af8dc82d16f06e9409cc71ff795f9bd05" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a844c863e21272c53f7a12829e69d8c59" kindref="member">StridesType_</ref><sp/><ref refid="classsplinepy_1_1utils_1_1Array_1af8dc82d16f06e9409cc71ff795f9bd05" kindref="member">strides_</ref>;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="72" refid="classsplinepy_1_1utils_1_1Array_1a7baad4f9456800401f5dd9fc0991fbf4" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classsplinepy_1_1utils_1_1Array_1ace8c7b9eba68e41a0d6c21ea971637f6" kindref="member">ShapeType_</ref><sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a7baad4f9456800401f5dd9fc0991fbf4" kindref="member">shape_</ref>;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Ts&gt;</highlight></codeline>
<codeline lineno="81" refid="classsplinepy_1_1utils_1_1Array_1a517efc7086142a8b2b4be72a184dd4e7" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a517efc7086142a8b2b4be72a184dd4e7" kindref="member">ComputeRemainingOffset</ref>(IndexType&amp;<sp/>index,</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IndexType&amp;<sp/>counter,</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IndexType&amp;<sp/>id0,</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Ts&amp;...<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>last<sp/>element<sp/>should<sp/>be<sp/>just<sp/>added</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(Ts)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>+=<sp/>id0;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>intentionally<sp/>skipping</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>++counter;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>strides<sp/>*<sp/>id</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>index<sp/>+=<sp/><ref refid="classsplinepy_1_1utils_1_1Array_1af8dc82d16f06e9409cc71ff795f9bd05" kindref="member">strides_</ref>[counter++]<sp/>*<sp/>id0;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>the<sp/>rest</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(Ts)<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a517efc7086142a8b2b4be72a184dd4e7" kindref="member">ComputeRemainingOffset</ref>(index,<sp/>counter,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">...);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="103" refid="classsplinepy_1_1utils_1_1Array_1a0d0cd9e243926ae8f9f0e13144e7f5ad" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>DataType*<sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a0d0cd9e243926ae8f9f0e13144e7f5ad" kindref="member">data</ref>()<sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="classsplinepy_1_1utils_1_1Array_1a446297c547ebaf652c826cae0dcb96e8" kindref="member">data_</ref>);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a446297c547ebaf652c826cae0dcb96e8" kindref="member">data_</ref>;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108" refid="classsplinepy_1_1utils_1_1Array_1ab46285c56bb025fccc33d39d05e0a60f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DataType*<sp/><ref refid="classsplinepy_1_1utils_1_1Array_1ab46285c56bb025fccc33d39d05e0a60f" kindref="member">data</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="classsplinepy_1_1utils_1_1Array_1a446297c547ebaf652c826cae0dcb96e8" kindref="member">data_</ref>);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a446297c547ebaf652c826cae0dcb96e8" kindref="member">data_</ref>;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113" refid="classsplinepy_1_1utils_1_1Array_1a40fdb350a061dc85e4f5729d013e701c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>DataType*<sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a40fdb350a061dc85e4f5729d013e701c" kindref="member">begin</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="classsplinepy_1_1utils_1_1Array_1a446297c547ebaf652c826cae0dcb96e8" kindref="member">data_</ref>);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a446297c547ebaf652c826cae0dcb96e8" kindref="member">data_</ref>;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118" refid="classsplinepy_1_1utils_1_1Array_1af84a72c8309221e4487f0089cefea1c7" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>DataType*<sp/><ref refid="classsplinepy_1_1utils_1_1Array_1af84a72c8309221e4487f0089cefea1c7" kindref="member">end</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="classsplinepy_1_1utils_1_1Array_1a446297c547ebaf652c826cae0dcb96e8" kindref="member">data_</ref>);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="classsplinepy_1_1utils_1_1Array_1a88aa79a90b0954ba0d578f5c3c40cd21" kindref="member">size_</ref><sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a446297c547ebaf652c826cae0dcb96e8" kindref="member">data_</ref><sp/>+<sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a88aa79a90b0954ba0d578f5c3c40cd21" kindref="member">size_</ref>;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124" refid="classsplinepy_1_1utils_1_1Array_1a708367ba8eb3d60de426241f8b74ccae" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DataType*<sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a708367ba8eb3d60de426241f8b74ccae" kindref="member">cbegin</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="classsplinepy_1_1utils_1_1Array_1a446297c547ebaf652c826cae0dcb96e8" kindref="member">data_</ref>);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a446297c547ebaf652c826cae0dcb96e8" kindref="member">data_</ref>;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129" refid="classsplinepy_1_1utils_1_1Array_1ae252bc8d9bbfda005dc6a1bd7314bf96" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DataType*<sp/><ref refid="classsplinepy_1_1utils_1_1Array_1ae252bc8d9bbfda005dc6a1bd7314bf96" kindref="member">cend</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="classsplinepy_1_1utils_1_1Array_1a446297c547ebaf652c826cae0dcb96e8" kindref="member">data_</ref>);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="classsplinepy_1_1utils_1_1Array_1a88aa79a90b0954ba0d578f5c3c40cd21" kindref="member">size_</ref><sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a446297c547ebaf652c826cae0dcb96e8" kindref="member">data_</ref><sp/>+<sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a88aa79a90b0954ba0d578f5c3c40cd21" kindref="member">size_</ref>;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135" refid="classsplinepy_1_1utils_1_1Array_1ae6357bd53aff150a8d3c7b28c434bae9" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>IndexType<sp/><ref refid="classsplinepy_1_1utils_1_1Array_1ae6357bd53aff150a8d3c7b28c434bae9" kindref="member">size</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a88aa79a90b0954ba0d578f5c3c40cd21" kindref="member">size_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137" refid="classsplinepy_1_1utils_1_1Array_1a03613a20fdeae22f60eaac6bf7fab4b7" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a03613a20fdeae22f60eaac6bf7fab4b7" kindref="member">OwnsData</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classsplinepy_1_1utils_1_1Array_1aa0a52906d4a2a37abafe4fd8e2b40668" kindref="member">own_data_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139" refid="classsplinepy_1_1utils_1_1Array_1af7f370671a60aa288380d6a31f28d12d" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classsplinepy_1_1utils_1_1Array_1af7f370671a60aa288380d6a31f28d12d" kindref="member">DestroyData</ref>()<sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classsplinepy_1_1utils_1_1Array_1aa0a52906d4a2a37abafe4fd8e2b40668" kindref="member">own_data_</ref><sp/>&amp;&amp;<sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a446297c547ebaf652c826cae0dcb96e8" kindref="member">data_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a446297c547ebaf652c826cae0dcb96e8" kindref="member">data_</ref>;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a446297c547ebaf652c826cae0dcb96e8" kindref="member">data_</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsplinepy_1_1utils_1_1Array_1aa0a52906d4a2a37abafe4fd8e2b40668" kindref="member">own_data_</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="150" refid="classsplinepy_1_1utils_1_1Array_1ab18e11dbcf6d82749f74437b18ca1341" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classsplinepy_1_1utils_1_1Array_1ab18e11dbcf6d82749f74437b18ca1341" kindref="member">SetData</ref>(DataType*<sp/>data_pointer)<sp/>{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsplinepy_1_1utils_1_1Array_1af7f370671a60aa288380d6a31f28d12d" kindref="member">DestroyData</ref>();</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a446297c547ebaf652c826cae0dcb96e8" kindref="member">data_</ref><sp/>=<sp/>data_pointer;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Ts&gt;</highlight></codeline>
<codeline lineno="160" refid="classsplinepy_1_1utils_1_1Array_1a57a41e6c9403d8093ff5bbb1a61ca8d9" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a57a41e6c9403d8093ff5bbb1a61ca8d9" kindref="member">SetData</ref>(DataType*<sp/>data_pointer,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Ts&amp;...<sp/>shape)<sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsplinepy_1_1utils_1_1Array_1af7f370671a60aa288380d6a31f28d12d" kindref="member">DestroyData</ref>();</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a446297c547ebaf652c826cae0dcb96e8" kindref="member">data_</ref><sp/>=<sp/>data_pointer;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a34f61cd94ee615fbf76f998c21e50c77" kindref="member">SetShape</ref>(shape...);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Ts&gt;</highlight></codeline>
<codeline lineno="171" refid="classsplinepy_1_1utils_1_1Array_1a89e795b04534e87e863089160f2c7a4c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a89e795b04534e87e863089160f2c7a4c" kindref="member">SetOrReallocateData</ref>(DataType*<sp/>data_pointer,</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Ts&amp;...<sp/>shape)<sp/>{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(data_pointer)<sp/>{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsplinepy_1_1utils_1_1Array_1ab18e11dbcf6d82749f74437b18ca1341" kindref="member">SetData</ref>(data_pointer,<sp/>shape...);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a68c19a2b0c830726dc9070fc61e054c6" kindref="member">Reallocate</ref>(shape...);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180" refid="classsplinepy_1_1utils_1_1Array_1a574182e5d66d9245406e3943f28a69f3" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>DataType*<sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a574182e5d66d9245406e3943f28a69f3" kindref="member">GetData</ref>()<sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="classsplinepy_1_1utils_1_1Array_1a446297c547ebaf652c826cae0dcb96e8" kindref="member">data_</ref>);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a446297c547ebaf652c826cae0dcb96e8" kindref="member">data_</ref>;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185" refid="classsplinepy_1_1utils_1_1Array_1a0d2ddc103cb10577f04df4dd5c1984df" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DataType*<sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a0d2ddc103cb10577f04df4dd5c1984df" kindref="member">GetData</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="classsplinepy_1_1utils_1_1Array_1a446297c547ebaf652c826cae0dcb96e8" kindref="member">data_</ref>);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a446297c547ebaf652c826cae0dcb96e8" kindref="member">data_</ref>;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="193" refid="classsplinepy_1_1utils_1_1Array_1acac93cd450c2b162dcc058a7850e5d7f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>DataType*<sp/><ref refid="classsplinepy_1_1utils_1_1Array_1acac93cd450c2b162dcc058a7850e5d7f" kindref="member">TransferOwnership</ref>()<sp/>{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="classsplinepy_1_1utils_1_1Array_1a446297c547ebaf652c826cae0dcb96e8" kindref="member">data_</ref>);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsplinepy_1_1utils_1_1Array_1aa0a52906d4a2a37abafe4fd8e2b40668" kindref="member">own_data_</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a446297c547ebaf652c826cae0dcb96e8" kindref="member">data_</ref>;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="201" refid="classsplinepy_1_1utils_1_1Array_1a68c19a2b0c830726dc9070fc61e054c6" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a68c19a2b0c830726dc9070fc61e054c6" kindref="member">Reallocate</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IndexType&amp;<sp/><ref refid="classsplinepy_1_1utils_1_1Array_1ae6357bd53aff150a8d3c7b28c434bae9" kindref="member">size</ref>)<sp/>{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>destroy<sp/>and<sp/>reallocate<sp/>space</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsplinepy_1_1utils_1_1Array_1af7f370671a60aa288380d6a31f28d12d" kindref="member">DestroyData</ref>();</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a446297c547ebaf652c826cae0dcb96e8" kindref="member">data_</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>DataType[<ref refid="classsplinepy_1_1utils_1_1Array_1ae6357bd53aff150a8d3c7b28c434bae9" kindref="member">size</ref>];</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsplinepy_1_1utils_1_1Array_1aa0a52906d4a2a37abafe4fd8e2b40668" kindref="member">own_data_</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>size<sp/>-<sp/>don&apos;t<sp/>forget<sp/>to<sp/>set<sp/>shape<sp/>in<sp/>case<sp/>this<sp/>is<sp/>multi-dim<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a88aa79a90b0954ba0d578f5c3c40cd21" kindref="member">size_</ref><sp/>=<sp/><ref refid="classsplinepy_1_1utils_1_1Array_1ae6357bd53aff150a8d3c7b28c434bae9" kindref="member">size</ref>;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>shape<sp/>if<sp/>this<sp/>is<sp/>a<sp/>1d<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(dim<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a7baad4f9456800401f5dd9fc0991fbf4" kindref="member">shape_</ref>[0]<sp/>=<sp/><ref refid="classsplinepy_1_1utils_1_1Array_1ae6357bd53aff150a8d3c7b28c434bae9" kindref="member">size</ref>;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Ts&gt;</highlight></codeline>
<codeline lineno="219" refid="classsplinepy_1_1utils_1_1Array_1a5936300d802fdbb05407bcd51d53c8b5" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a5936300d802fdbb05407bcd51d53c8b5" kindref="member">Reallocate</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Ts&amp;...<sp/>shape)<sp/>{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a34f61cd94ee615fbf76f998c21e50c77" kindref="member">SetShape</ref>(shape...);<sp/></highlight><highlight class="comment">//<sp/>computes<sp/>size_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a68c19a2b0c830726dc9070fc61e054c6" kindref="member">Reallocate</ref>(<ref refid="classsplinepy_1_1utils_1_1Array_1a88aa79a90b0954ba0d578f5c3c40cd21" kindref="member">size_</ref>);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Ts&gt;</highlight></codeline>
<codeline lineno="225" refid="classsplinepy_1_1utils_1_1Array_1a34f61cd94ee615fbf76f998c21e50c77" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a34f61cd94ee615fbf76f998c21e50c77" kindref="member">SetShape</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IndexType&amp;<sp/>shape0,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Ts&amp;...<sp/>shape)<sp/>{</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(Ts)<sp/>==<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(dim<sp/>-<sp/>1),</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;shape<sp/>should<sp/>match<sp/>the<sp/>dim&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>early<sp/>exit<sp/>in<sp/>case<sp/>of<sp/>dim<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(Ts)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a88aa79a90b0954ba0d578f5c3c40cd21" kindref="member">size_</ref><sp/>=<sp/>shape0;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a7baad4f9456800401f5dd9fc0991fbf4" kindref="member">shape_</ref>[0]<sp/>=<sp/>shape0;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(re)initialize<sp/>shape_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a7baad4f9456800401f5dd9fc0991fbf4" kindref="member">shape_</ref><sp/>=<sp/>{shape0,<sp/>shape...};</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(re)initialize<sp/><sp/>strides_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsplinepy_1_1utils_1_1Array_1af8dc82d16f06e9409cc71ff795f9bd05" kindref="member">strides_</ref><sp/>=<sp/>{shape...};</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>reverse<sp/>iter<sp/>and<sp/>accumulate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>IndexType<sp/>sub_total{1};</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>StridesType_::reverse_iterator<sp/>r_stride_iter<sp/>=<sp/><ref refid="classsplinepy_1_1utils_1_1Array_1af8dc82d16f06e9409cc71ff795f9bd05" kindref="member">strides_</ref>.rbegin();</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>r_stride_iter<sp/>!=<sp/><ref refid="classsplinepy_1_1utils_1_1Array_1af8dc82d16f06e9409cc71ff795f9bd05" kindref="member">strides_</ref>.rend();<sp/>++r_stride_iter)<sp/>{</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>accumulate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sub_total<sp/>*=<sp/>*r_stride_iter;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>assign</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*r_stride_iter<sp/>=<sp/>sub_total;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>at<sp/>this<sp/>point,<sp/>sub<sp/>total<sp/>has<sp/>accumulated<sp/>shape<sp/>values<sp/>except<sp/>shape0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a88aa79a90b0954ba0d578f5c3c40cd21" kindref="member">size_</ref><sp/>=<sp/>sub_total<sp/>*<sp/>shape0;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="258" refid="classsplinepy_1_1utils_1_1Array_1aa097499ba4e6215595411f02110c6e16" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classsplinepy_1_1utils_1_1Array_1aa097499ba4e6215595411f02110c6e16" kindref="member">Array</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Ts&gt;</highlight></codeline>
<codeline lineno="264" refid="classsplinepy_1_1utils_1_1Array_1a6b50ed29ea8e97fdd0510a4fee427fa6" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a6b50ed29ea8e97fdd0510a4fee427fa6" kindref="member">Array</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Ts&amp;...<sp/>shape)<sp/>{</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a34f61cd94ee615fbf76f998c21e50c77" kindref="member">SetShape</ref>(shape...);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a68c19a2b0c830726dc9070fc61e054c6" kindref="member">Reallocate</ref>(<ref refid="classsplinepy_1_1utils_1_1Array_1a88aa79a90b0954ba0d578f5c3c40cd21" kindref="member">size_</ref>);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Ts&gt;</highlight></codeline>
<codeline lineno="274" refid="classsplinepy_1_1utils_1_1Array_1a1af0d7406b19289d4821975af1289061" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a1af0d7406b19289d4821975af1289061" kindref="member">Array</ref>(DataType*<sp/>data_pointer,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Ts&amp;...<sp/>shape)<sp/>{</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsplinepy_1_1utils_1_1Array_1ab18e11dbcf6d82749f74437b18ca1341" kindref="member">SetData</ref>(data_pointer);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a34f61cd94ee615fbf76f998c21e50c77" kindref="member">SetShape</ref>(shape...);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="281" refid="classsplinepy_1_1utils_1_1Array_1a0b2d2aba2e64b58c980399838f60205c" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a0b2d2aba2e64b58c980399838f60205c" kindref="member">Array</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classsplinepy_1_1utils_1_1Array" kindref="compound">Array</ref>&amp;<sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>memory<sp/>alloc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a68c19a2b0c830726dc9070fc61e054c6" kindref="member">Reallocate</ref>(other.<ref refid="classsplinepy_1_1utils_1_1Array_1a88aa79a90b0954ba0d578f5c3c40cd21" kindref="member">size_</ref>);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>std::copy_n(other.<ref refid="classsplinepy_1_1utils_1_1Array_1a0d0cd9e243926ae8f9f0e13144e7f5ad" kindref="member">data</ref>(),<sp/>other.<ref refid="classsplinepy_1_1utils_1_1Array_1a88aa79a90b0954ba0d578f5c3c40cd21" kindref="member">size_</ref>,<sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a446297c547ebaf652c826cae0dcb96e8" kindref="member">data_</ref>);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>shape</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a7baad4f9456800401f5dd9fc0991fbf4" kindref="member">shape_</ref><sp/>=<sp/>other.<ref refid="classsplinepy_1_1utils_1_1Array_1a7baad4f9456800401f5dd9fc0991fbf4" kindref="member">shape_</ref>;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>strides</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsplinepy_1_1utils_1_1Array_1af8dc82d16f06e9409cc71ff795f9bd05" kindref="member">strides_</ref><sp/>=<sp/>other.<ref refid="classsplinepy_1_1utils_1_1Array_1af8dc82d16f06e9409cc71ff795f9bd05" kindref="member">strides_</ref>;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="294" refid="classsplinepy_1_1utils_1_1Array_1a2306865a953375e882f08d37e2ec3612" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a2306865a953375e882f08d37e2ec3612" kindref="member">Array</ref>(<ref refid="classsplinepy_1_1utils_1_1Array" kindref="compound">Array</ref>&amp;&amp;<sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsplinepy_1_1utils_1_1Array_1aa0a52906d4a2a37abafe4fd8e2b40668" kindref="member">own_data_</ref><sp/>=<sp/>other.own_data_;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a446297c547ebaf652c826cae0dcb96e8" kindref="member">data_</ref><sp/>=<sp/>std::move(other.data_);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a88aa79a90b0954ba0d578f5c3c40cd21" kindref="member">size_</ref><sp/>=<sp/>std::move(other.size_);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsplinepy_1_1utils_1_1Array_1af8dc82d16f06e9409cc71ff795f9bd05" kindref="member">strides_</ref><sp/>=<sp/>std::move(other.strides_);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a7baad4f9456800401f5dd9fc0991fbf4" kindref="member">shape_</ref><sp/>=<sp/>std::move(other.shape_);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>other.own_data_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="306" refid="classsplinepy_1_1utils_1_1Array_1a3a5ccbef9e99b2b924031b41581915b6" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/><ref refid="classsplinepy_1_1utils_1_1Array" kindref="compound">Array</ref>&amp;<sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a3a5ccbef9e99b2b924031b41581915b6" kindref="member">operator=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classsplinepy_1_1utils_1_1Array" kindref="compound">Array</ref>&amp;<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>size<sp/>check<sp/>is<sp/>crucial,<sp/>so<sp/>runtime<sp/>check</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classsplinepy_1_1utils_1_1Array_1a88aa79a90b0954ba0d578f5c3c40cd21" kindref="member">size_</ref><sp/>!=<sp/>rhs.<ref refid="classsplinepy_1_1utils_1_1Array_1a88aa79a90b0954ba0d578f5c3c40cd21" kindref="member">size_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacesplinepy_1_1utils_1a3e3aaa6844b55c96f7b5b81be2f1b339" kindref="member">splinepy::utils::PrintAndThrowError</ref>(</highlight><highlight class="stringliteral">&quot;Array::operator=(const<sp/>Array&amp;)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;size<sp/>mismatch<sp/>between<sp/>rhs&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>std::copy_n(rhs.<ref refid="classsplinepy_1_1utils_1_1Array_1a0d0cd9e243926ae8f9f0e13144e7f5ad" kindref="member">data</ref>(),<sp/>rhs.<ref refid="classsplinepy_1_1utils_1_1Array_1ae6357bd53aff150a8d3c7b28c434bae9" kindref="member">size</ref>(),<sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a446297c547ebaf652c826cae0dcb96e8" kindref="member">data_</ref>);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>shape<sp/>and<sp/>stride<sp/>info</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a7baad4f9456800401f5dd9fc0991fbf4" kindref="member">shape_</ref><sp/>=<sp/>rhs.<ref refid="classsplinepy_1_1utils_1_1Array_1a02db495ee010f9bece0253abd19be955" kindref="member">Shape</ref>();</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsplinepy_1_1utils_1_1Array_1af8dc82d16f06e9409cc71ff795f9bd05" kindref="member">strides_</ref><sp/>=<sp/>rhs.<ref refid="classsplinepy_1_1utils_1_1Array_1a844d2ec67b63cbe3e7f52c229f148c77" kindref="member">Strides</ref>();</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="324" refid="classsplinepy_1_1utils_1_1Array_1acb8f743733b16d62d90621e05c767ae5" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/><ref refid="classsplinepy_1_1utils_1_1Array" kindref="compound">Array</ref>&amp;<sp/><ref refid="classsplinepy_1_1utils_1_1Array_1acb8f743733b16d62d90621e05c767ae5" kindref="member">operator=</ref>(<ref refid="classsplinepy_1_1utils_1_1Array" kindref="compound">Array</ref>&amp;&amp;<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsplinepy_1_1utils_1_1Array_1af7f370671a60aa288380d6a31f28d12d" kindref="member">DestroyData</ref>();</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsplinepy_1_1utils_1_1Array_1aa0a52906d4a2a37abafe4fd8e2b40668" kindref="member">own_data_</ref><sp/>=<sp/>rhs.own_data_;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a446297c547ebaf652c826cae0dcb96e8" kindref="member">data_</ref><sp/>=<sp/>std::move(rhs.data_);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a88aa79a90b0954ba0d578f5c3c40cd21" kindref="member">size_</ref><sp/>=<sp/>std::move(rhs.size_);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsplinepy_1_1utils_1_1Array_1af8dc82d16f06e9409cc71ff795f9bd05" kindref="member">strides_</ref><sp/>=<sp/>std::move(rhs.strides_);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a7baad4f9456800401f5dd9fc0991fbf4" kindref="member">shape_</ref><sp/>=<sp/>std::move(rhs.shape_);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/>rhs.own_data_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="337" refid="classsplinepy_1_1utils_1_1Array_1a9338ffdafb6c90a0d192ade96b24550a" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a9338ffdafb6c90a0d192ade96b24550a" kindref="member">~Array</ref>()<sp/>{<sp/><ref refid="classsplinepy_1_1utils_1_1Array_1af7f370671a60aa288380d6a31f28d12d" kindref="member">DestroyData</ref>();<sp/>}</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="341" refid="classsplinepy_1_1utils_1_1Array_1a02db495ee010f9bece0253abd19be955" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classsplinepy_1_1utils_1_1Array_1ace8c7b9eba68e41a0d6c21ea971637f6" kindref="member">ShapeType_</ref>&amp;<sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a02db495ee010f9bece0253abd19be955" kindref="member">Shape</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a7baad4f9456800401f5dd9fc0991fbf4" kindref="member">shape_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="345" refid="classsplinepy_1_1utils_1_1Array_1a844d2ec67b63cbe3e7f52c229f148c77" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a844c863e21272c53f7a12829e69d8c59" kindref="member">StridesType_</ref>&amp;<sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a844d2ec67b63cbe3e7f52c229f148c77" kindref="member">Strides</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classsplinepy_1_1utils_1_1Array_1af8dc82d16f06e9409cc71ff795f9bd05" kindref="member">strides_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="350" refid="classsplinepy_1_1utils_1_1Array_1afdf4f712668b497a832e44e9af958bd2" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>DataType&amp;<sp/><ref refid="classsplinepy_1_1utils_1_1Array_1afdf4f712668b497a832e44e9af958bd2" kindref="member">operator[]</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IndexType&amp;<sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(index<sp/>&gt;<sp/>-1<sp/>&amp;&amp;<sp/>index<sp/>&lt;<sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a88aa79a90b0954ba0d578f5c3c40cd21" kindref="member">size_</ref>);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a446297c547ebaf652c826cae0dcb96e8" kindref="member">data_</ref>[index];</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="359" refid="classsplinepy_1_1utils_1_1Array_1a0a18fa8d9a07d6e81de831272ff86e75" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DataType&amp;<sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a0a18fa8d9a07d6e81de831272ff86e75" kindref="member">operator[]</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IndexType&amp;<sp/>index)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(index<sp/>&gt;<sp/>-1<sp/>&amp;&amp;<sp/>index<sp/>&lt;<sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a88aa79a90b0954ba0d578f5c3c40cd21" kindref="member">size_</ref>);</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a446297c547ebaf652c826cae0dcb96e8" kindref="member">data_</ref>[index];</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Ts&gt;</highlight></codeline>
<codeline lineno="371" refid="classsplinepy_1_1utils_1_1Array_1a5a23bd1dcb38a3d875ff0a683dc3c76d" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>DataType&amp;<sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a5a23bd1dcb38a3d875ff0a683dc3c76d" kindref="member">operator()</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IndexType&amp;<sp/>id0,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Ts&amp;...<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(Ts)<sp/>==<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(dim<sp/>-<sp/>1),</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;number<sp/>of<sp/>index<sp/>should<sp/>match<sp/>dim&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(dim<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classsplinepy_1_1utils_1_1Array_1afdf4f712668b497a832e44e9af958bd2" kindref="member">operator[]</ref>(id0);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/>IndexType<sp/>final_id{id0<sp/>*<sp/><ref refid="classsplinepy_1_1utils_1_1Array_1af8dc82d16f06e9409cc71ff795f9bd05" kindref="member">strides_</ref>[0]},<sp/>i{1};</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(Ts)<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a517efc7086142a8b2b4be72a184dd4e7" kindref="member">ComputeRemainingOffset</ref>(final_id,<sp/>i,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">...);</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(final_id<sp/>&gt;<sp/>-1<sp/>&amp;&amp;<sp/>final_id<sp/>&lt;<sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a88aa79a90b0954ba0d578f5c3c40cd21" kindref="member">size_</ref>);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a446297c547ebaf652c826cae0dcb96e8" kindref="member">data_</ref>[final_id];</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Ts&gt;</highlight></codeline>
<codeline lineno="395" refid="classsplinepy_1_1utils_1_1Array_1ac0e7a6495d26c5ca09d3fc43442aa6db" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DataType&amp;<sp/><ref refid="classsplinepy_1_1utils_1_1Array_1ac0e7a6495d26c5ca09d3fc43442aa6db" kindref="member">operator()</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IndexType&amp;<sp/>id0,</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Ts&amp;...<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(Ts)<sp/>==<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(dim<sp/>-<sp/>1),</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;number<sp/>of<sp/>index<sp/>should<sp/>match<sp/>dim&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(dim<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classsplinepy_1_1utils_1_1Array_1afdf4f712668b497a832e44e9af958bd2" kindref="member">operator[]</ref>(id0);</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/>IndexType<sp/>final_id{id0<sp/>*<sp/><ref refid="classsplinepy_1_1utils_1_1Array_1af8dc82d16f06e9409cc71ff795f9bd05" kindref="member">strides_</ref>[0]},<sp/>i{1};</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(Ts)<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a517efc7086142a8b2b4be72a184dd4e7" kindref="member">ComputeRemainingOffset</ref>(final_id,<sp/>i,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">...);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(final_id<sp/>&gt;<sp/>-1<sp/>&amp;&amp;<sp/>final_id<sp/>&lt;<sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a88aa79a90b0954ba0d578f5c3c40cd21" kindref="member">size_</ref>);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a446297c547ebaf652c826cae0dcb96e8" kindref="member">data_</ref>[final_id];</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="417" refid="classsplinepy_1_1utils_1_1Array_1a2a3ae24956524ab6b4b09d26074dd4a9" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a2a3ae24956524ab6b4b09d26074dd4a9" kindref="member">Fill</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DataType&amp;<sp/>v)<sp/>{</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="classsplinepy_1_1utils_1_1Array_1a446297c547ebaf652c826cae0dcb96e8" kindref="member">data_</ref>);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/>std::fill_n(<ref refid="classsplinepy_1_1utils_1_1Array_1a446297c547ebaf652c826cae0dcb96e8" kindref="member">data_</ref>,<sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a88aa79a90b0954ba0d578f5c3c40cd21" kindref="member">size_</ref>,<sp/>v);</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Iterable&gt;</highlight></codeline>
<codeline lineno="427" refid="classsplinepy_1_1utils_1_1Array_1a20a0c63283fd0ead1d700b1cfdb9197e" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a20a0c63283fd0ead1d700b1cfdb9197e" kindref="member">Add</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Iterable&amp;<sp/>a)<sp/>{</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(a.size()<sp/>==<sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a88aa79a90b0954ba0d578f5c3c40cd21" kindref="member">size_</ref>);</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="classsplinepy_1_1utils_1_1Array_1a446297c547ebaf652c826cae0dcb96e8" kindref="member">data_</ref>);</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(IndexType<sp/>i{};<sp/>i<sp/>&lt;<sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a88aa79a90b0954ba0d578f5c3c40cd21" kindref="member">size_</ref>;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a446297c547ebaf652c826cae0dcb96e8" kindref="member">data_</ref>[i]<sp/>+=<sp/>a[i];</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Iterable&gt;</highlight></codeline>
<codeline lineno="440" refid="classsplinepy_1_1utils_1_1Array_1a7661b3f6307753f2d8a977462aba7833" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a7661b3f6307753f2d8a977462aba7833" kindref="member">Subtract</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Iterable&amp;<sp/>a)<sp/>{</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(a.size()<sp/>==<sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a88aa79a90b0954ba0d578f5c3c40cd21" kindref="member">size_</ref>);</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="classsplinepy_1_1utils_1_1Array_1a446297c547ebaf652c826cae0dcb96e8" kindref="member">data_</ref>);</highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(IndexType<sp/>i{};<sp/>i<sp/>&lt;<sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a88aa79a90b0954ba0d578f5c3c40cd21" kindref="member">size_</ref>;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a446297c547ebaf652c826cae0dcb96e8" kindref="member">data_</ref>[i]<sp/>-=<sp/>a[i];</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Iterable&gt;</highlight></codeline>
<codeline lineno="454" refid="classsplinepy_1_1utils_1_1Array_1ae8cfd9d9b04b87cff9ff818f960e5b3e" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>DataType<sp/><ref refid="classsplinepy_1_1utils_1_1Array_1ae8cfd9d9b04b87cff9ff818f960e5b3e" kindref="member">InnerProduct</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Iterable&amp;<sp/>a)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(dim<sp/>==<sp/>1,</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;inner<sp/>product<sp/>is<sp/>only<sp/>applicable<sp/>for<sp/>dim=1<sp/>Array.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(a.size()<sp/>==<sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a88aa79a90b0954ba0d578f5c3c40cd21" kindref="member">size_</ref>);</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="classsplinepy_1_1utils_1_1Array_1a446297c547ebaf652c826cae0dcb96e8" kindref="member">data_</ref>);</highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/>DataType<sp/>dot{};</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(IndexType<sp/>i{};<sp/>i<sp/>&lt;<sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a88aa79a90b0954ba0d578f5c3c40cd21" kindref="member">size_</ref>;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dot<sp/>+=<sp/>a[i]<sp/>*<sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a446297c547ebaf652c826cae0dcb96e8" kindref="member">data_</ref>[i];</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dot;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight></codeline>
<codeline lineno="471" refid="classsplinepy_1_1utils_1_1Array_1ac133624a314eb42f8d550c9342670f54" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>DataType<sp/><ref refid="classsplinepy_1_1utils_1_1Array_1ac133624a314eb42f8d550c9342670f54" kindref="member">InnerProduct</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DataType*<sp/>a)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(dim<sp/>==<sp/>1,</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;inner<sp/>product<sp/>is<sp/>only<sp/>applicable<sp/>for<sp/>dim=1<sp/>Array.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="classsplinepy_1_1utils_1_1Array_1a446297c547ebaf652c826cae0dcb96e8" kindref="member">data_</ref>);</highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/>DataType<sp/>dot{};</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(IndexType<sp/>i{};<sp/>i<sp/>&lt;<sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a88aa79a90b0954ba0d578f5c3c40cd21" kindref="member">size_</ref>;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dot<sp/>+=<sp/>a[i]<sp/>*<sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a446297c547ebaf652c826cae0dcb96e8" kindref="member">data_</ref>[i];</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dot;</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight></codeline>
<codeline lineno="484" refid="classsplinepy_1_1utils_1_1Array_1a1dd42fb743734067f2f27248c16fb0c4" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a1dd42fb743734067f2f27248c16fb0c4" kindref="member">AAt</ref>(<ref refid="classsplinepy_1_1utils_1_1Array" kindref="compound">Array</ref>&amp;<sp/>aa_t)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(dim<sp/>==<sp/>2,<sp/></highlight><highlight class="stringliteral">&quot;AAt<sp/>is<sp/>only<sp/>applicable<sp/>for<sp/>dim=2<sp/>array.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>height<sp/>=<sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a7baad4f9456800401f5dd9fc0991fbf4" kindref="member">shape_</ref>[0];</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>width<sp/>=<sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a7baad4f9456800401f5dd9fc0991fbf4" kindref="member">shape_</ref>[1];</highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i{};<sp/>i<sp/>&lt;<sp/>height;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>upper<sp/>triangle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j{i};<sp/>j<sp/>&lt;<sp/>height;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>element<sp/>to<sp/>fill</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DataType&amp;<sp/>ij<sp/>=<sp/>aa_t(i,<sp/>j);</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>init</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ij<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>beginning<sp/>of<sp/>i<sp/>and<sp/>j<sp/>row</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DataType*<sp/>i_ptr<sp/>=<sp/>&amp;<ref refid="classsplinepy_1_1utils_1_1Array_1a5a23bd1dcb38a3d875ff0a683dc3c76d" kindref="member">operator()</ref>(i,<sp/>0);</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DataType*<sp/>j_ptr<sp/>=<sp/>&amp;<ref refid="classsplinepy_1_1utils_1_1Array_1a5a23bd1dcb38a3d875ff0a683dc3c76d" kindref="member">operator()</ref>(j,<sp/>0);</highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>inner<sp/>product</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k{};<sp/>k<sp/>&lt;<sp/>width;<sp/>++k)<sp/>{</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ij<sp/>+=<sp/>i_ptr[k]<sp/>*<sp/>j_ptr[k];</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fill<sp/>symmetric<sp/>part<sp/>-<sp/>this<sp/>will<sp/>write<sp/>diagonal<sp/>twice.<sp/>it&apos;s<sp/>okay.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aa_t(j,<sp/>i)<sp/>=<sp/>ij;</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Iterable,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IntegerType&gt;</highlight></codeline>
<codeline lineno="520" refid="classsplinepy_1_1utils_1_1Array_1ae1ebfece8e76a5f9b074691cc6928845" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classsplinepy_1_1utils_1_1Array_1ae1ebfece8e76a5f9b074691cc6928845" kindref="member">Clip</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Iterable&amp;<sp/>lower_bound,</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Iterable&amp;<sp/>upper_bound,</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsplinepy_1_1utils_1_1Array" kindref="compound">Array&lt;IntegerType, dim, IndexType&gt;</ref>&amp;<sp/>clipped)<sp/>{</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(std::is_integral_v&lt;IntegerType&gt;,</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;clipped<sp/>array<sp/>should<sp/>be<sp/>an<sp/>integral<sp/>type&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(std::is_signed_v&lt;IntegerType&gt;,</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;clipped<sp/>array<sp/>should<sp/>be<sp/>a<sp/>signed<sp/>type&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(lower_bound.size()<sp/>==<sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a88aa79a90b0954ba0d578f5c3c40cd21" kindref="member">size_</ref>);</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(upper_bound.size()<sp/>==<sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a88aa79a90b0954ba0d578f5c3c40cd21" kindref="member">size_</ref>);</highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(IndexType<sp/>i{};<sp/>i<sp/>&lt;<sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a88aa79a90b0954ba0d578f5c3c40cd21" kindref="member">size_</ref>;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>deref<sp/>values<sp/>to<sp/>write</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DataType&amp;<sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a0d0cd9e243926ae8f9f0e13144e7f5ad" kindref="member">data</ref><sp/>=<sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a446297c547ebaf652c826cae0dcb96e8" kindref="member">data_</ref>[i];</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>IntegerType&amp;<sp/>clip<sp/>=<sp/>clipped[i];</highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DataType&amp;<sp/>ub<sp/>=<sp/>upper_bound[i];<sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a0d0cd9e243926ae8f9f0e13144e7f5ad" kindref="member">data</ref><sp/>&gt;<sp/>ub)<sp/>{</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>upper<sp/>bound<sp/>check</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clip<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a0d0cd9e243926ae8f9f0e13144e7f5ad" kindref="member">data</ref><sp/>=<sp/>ub;</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DataType&amp;<sp/>lb<sp/>=<sp/>lower_bound[i];<sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a0d0cd9e243926ae8f9f0e13144e7f5ad" kindref="member">data</ref><sp/>&lt;<sp/>lb)<sp/>{</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>lower<sp/>bound<sp/>check</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clip<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a0d0cd9e243926ae8f9f0e13144e7f5ad" kindref="member">data</ref><sp/>=<sp/>lb;</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>within<sp/>the<sp/>bounds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clip<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight></codeline>
<codeline lineno="554" refid="classsplinepy_1_1utils_1_1Array_1ae833ba8788874c754dd5f98bdbe00519" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>DataType<sp/><ref refid="classsplinepy_1_1utils_1_1Array_1ae833ba8788874c754dd5f98bdbe00519" kindref="member">NormL2</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::sqrt(<ref refid="classsplinepy_1_1utils_1_1Array_1a7a904d0bfdde84468684f346057524de" kindref="member">NormL2Squared</ref>());<sp/>}</highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight></codeline>
<codeline lineno="558" refid="classsplinepy_1_1utils_1_1Array_1a7a904d0bfdde84468684f346057524de" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>DataType<sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a7a904d0bfdde84468684f346057524de" kindref="member">NormL2Squared</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/>DataType<sp/>norm{};</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(IndexType<sp/>i{};<sp/>i<sp/>&lt;<sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a88aa79a90b0954ba0d578f5c3c40cd21" kindref="member">size_</ref>;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DataType&amp;<sp/>data_i<sp/>=<sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a446297c547ebaf652c826cae0dcb96e8" kindref="member">data_</ref>[i];</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>norm<sp/>+=<sp/>data_i<sp/>*<sp/>data_i;</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>norm;</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight></codeline>
<codeline lineno="569" refid="classsplinepy_1_1utils_1_1Array_1ac0db01798eb38c7569046d27e38065f0" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>IndexType<sp/><ref refid="classsplinepy_1_1utils_1_1Array_1ac0db01798eb38c7569046d27e38065f0" kindref="member">NonZeros</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/>IndexType<sp/>n{};</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(IndexType<sp/>i{};<sp/>i<sp/>&lt;<sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a88aa79a90b0954ba0d578f5c3c40cd21" kindref="member">size_</ref>;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>!=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">DataType</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(0))<sp/>{</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++n;</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight></codeline>
<codeline lineno="580" refid="classsplinepy_1_1utils_1_1Array_1a5f7ec1968ea2e9be6e8a783eb60cdf33" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a5f7ec1968ea2e9be6e8a783eb60cdf33" kindref="member">FlipSign</ref>()<sp/>{</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(IndexType<sp/>i{};<sp/>i<sp/>&lt;<sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a88aa79a90b0954ba0d578f5c3c40cd21" kindref="member">size_</ref>;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>data_i<sp/>=<sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a446297c547ebaf652c826cae0dcb96e8" kindref="member">data_</ref>[i];</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>data_i<sp/>=<sp/>-data_i;</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>OutIndexType&gt;</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="589" refid="classsplinepy_1_1utils_1_1Array_1ac3d8d88fe12b48b6dde88e47255cb591" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classsplinepy_1_1utils_1_1Array_1ac3d8d88fe12b48b6dde88e47255cb591" kindref="member">ArgSort</ref>(<ref refid="classsplinepy_1_1utils_1_1Array" kindref="compound">Array&lt;OutIndexType, 1, OutIndexType&gt;</ref>&amp;<sp/>arg_sorted)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fill<sp/>indices</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/>arg_sorted.<ref refid="classsplinepy_1_1utils_1_1Array_1a68c19a2b0c830726dc9070fc61e054c6" kindref="member">Reallocate</ref>(<ref refid="classsplinepy_1_1utils_1_1Array_1a88aa79a90b0954ba0d578f5c3c40cd21" kindref="member">size_</ref>);</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/>std::iota(arg_sorted.<ref refid="classsplinepy_1_1utils_1_1Array_1a40fdb350a061dc85e4f5729d013e701c" kindref="member">begin</ref>(),<sp/>arg_sorted.<ref refid="classsplinepy_1_1utils_1_1Array_1af84a72c8309221e4487f0089cefea1c7" kindref="member">end</ref>(),<sp/>0);</highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>comparison<sp/>takes<sp/>a<sp/>look<sp/>at<sp/>the<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>arg_compare<sp/>=<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>OutIndexType&amp;<sp/>a,</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>OutIndexType&amp;<sp/>b)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a446297c547ebaf652c826cae0dcb96e8" kindref="member">data_</ref>[a]<sp/>&lt;<sp/><ref refid="classsplinepy_1_1utils_1_1Array_1a446297c547ebaf652c826cae0dcb96e8" kindref="member">data_</ref>[b];</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stable_sort(arg_sorted.<ref refid="classsplinepy_1_1utils_1_1Array_1a40fdb350a061dc85e4f5729d013e701c" kindref="member">begin</ref>(),<sp/>arg_sorted.<ref refid="classsplinepy_1_1utils_1_1Array_1af84a72c8309221e4487f0089cefea1c7" kindref="member">end</ref>(),<sp/>arg_compare);</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="602"><highlight class="normal">};</highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>InputArray,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>OutIndexType&gt;</highlight></codeline>
<codeline lineno="605" refid="namespacesplinepy_1_1utils_1a1d335ae1cfa4b71bb235ae1bcddf33d6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacesplinepy_1_1utils_1a1d335ae1cfa4b71bb235ae1bcddf33d6" kindref="member">UniqueIndicesAndMultiplicities</ref>(</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>InputArray&amp;<sp/>input,</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classsplinepy_1_1utils_1_1Array" kindref="compound">Array&lt;OutIndexType, 1, OutIndexType&gt;</ref>&amp;<sp/>arg_sorted,</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsplinepy_1_1utils_1_1Array" kindref="compound">Array&lt;OutIndexType, 1, OutIndexType&gt;</ref>&amp;<sp/>unique,</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsplinepy_1_1utils_1_1Array" kindref="compound">Array&lt;OutIndexType, 1, OutIndexType&gt;</ref>&amp;<sp/>multiplicity)<sp/>{</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(std::is_integral_v&lt;OutIndexType&gt;,</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;OutIndexType<sp/>should<sp/>be<sp/>an<sp/>integral<sp/>type&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">InputType<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>InputArray::value_type;</highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>argsort<sp/>to<sp/>use<sp/>it<sp/>for<sp/>unique<sp/>search</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/>unique.<ref refid="classsplinepy_1_1utils_1_1Array_1a68c19a2b0c830726dc9070fc61e054c6" kindref="member">Reallocate</ref>(arg_sorted.<ref refid="classsplinepy_1_1utils_1_1Array_1ae6357bd53aff150a8d3c7b28c434bae9" kindref="member">size</ref>());</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/>unique<sp/>=<sp/>arg_sorted;</highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>comparison<sp/>for<sp/>unique<sp/>check<sp/>-<sp/>need<sp/>to<sp/>look<sp/>at<sp/>input<sp/>element<sp/>of<sp/>given<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>is_same<sp/>=<sp/>[&amp;input](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>InputType&amp;<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>InputType&amp;<sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(std::is_floating_point_v&lt;InputType&gt;)<sp/>{</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::abs(input[a]<sp/>-<sp/>input[b])</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;<sp/>std::numeric_limits&lt;InputType&gt;::epsilon();</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>input[a]<sp/>==<sp/>input[b];</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>find<sp/>unique<sp/>and<sp/>reshape</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>last<sp/>=<sp/>std::unique(unique.<ref refid="classsplinepy_1_1utils_1_1Array_1a40fdb350a061dc85e4f5729d013e701c" kindref="member">begin</ref>(),<sp/>unique.<ref refid="classsplinepy_1_1utils_1_1Array_1af84a72c8309221e4487f0089cefea1c7" kindref="member">end</ref>(),<sp/>is_same);</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/>unique.<ref refid="classsplinepy_1_1utils_1_1Array_1a34f61cd94ee615fbf76f998c21e50c77" kindref="member">SetShape</ref>(std::distance(unique.<ref refid="classsplinepy_1_1utils_1_1Array_1a40fdb350a061dc85e4f5729d013e701c" kindref="member">begin</ref>(),<sp/>last));</highlight></codeline>
<codeline lineno="631"><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>loop<sp/>and<sp/>fill<sp/>return<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/>multiplicity.<ref refid="classsplinepy_1_1utils_1_1Array_1a68c19a2b0c830726dc9070fc61e054c6" kindref="member">Reallocate</ref>(unique.<ref refid="classsplinepy_1_1utils_1_1Array_1ae6357bd53aff150a8d3c7b28c434bae9" kindref="member">size</ref>());</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/>OutIndexType*<sp/>unique_ptr<sp/>=<sp/>unique.<ref refid="classsplinepy_1_1utils_1_1Array_1a40fdb350a061dc85e4f5729d013e701c" kindref="member">begin</ref>();</highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>iterate<sp/>unique<sp/>and<sp/>count<sp/>multiplicity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>will<sp/>check<sp/>if<sp/>the<sp/>next<sp/>indices<sp/>are<sp/>the<sp/>same.<sp/>if<sp/>so,<sp/>we<sp/>will<sp/>stop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>counting<sp/>multiplicity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>OutIndexType*<sp/>arg_ptr<sp/>=<sp/>arg_sorted.<ref refid="classsplinepy_1_1utils_1_1Array_1a40fdb350a061dc85e4f5729d013e701c" kindref="member">begin</ref>();</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(OutIndexType<sp/>i{};<sp/>i<sp/>&lt;<sp/>unique.<ref refid="classsplinepy_1_1utils_1_1Array_1ae6357bd53aff150a8d3c7b28c434bae9" kindref="member">size</ref>()<sp/>-<sp/>1;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>OutIndexType<sp/>u_next<sp/>=<sp/>unique[i<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/>OutIndexType&amp;<sp/>m<sp/>=<sp/>multiplicity[i];</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/>m<sp/>=<sp/>1;<sp/></highlight><highlight class="comment">//<sp/>at<sp/>start,<sp/>we<sp/>always<sp/>have<sp/>the<sp/>same<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*(++arg_ptr)<sp/>!=<sp/>u_next)<sp/>{</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++m;<sp/></highlight><highlight class="comment">//<sp/>increase<sp/>counter<sp/>if<sp/>the<sp/>next<sp/>argument<sp/>matches</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>last<sp/>value<sp/>of<sp/>multiplicity<sp/>is<sp/>distance<sp/>between</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/>OutIndexType*<sp/>last_multiplicity<sp/>=<sp/>multiplicity.<ref refid="classsplinepy_1_1utils_1_1Array_1af84a72c8309221e4487f0089cefea1c7" kindref="member">end</ref>()<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/>*last_multiplicity<sp/>=<sp/>std::distance(arg_ptr,<sp/>arg_sorted.<ref refid="classsplinepy_1_1utils_1_1Array_1ae252bc8d9bbfda005dc6a1bd7314bf96" kindref="member">cend</ref>());</highlight></codeline>
<codeline lineno="652"><highlight class="normal">}</highlight></codeline>
<codeline lineno="653"><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IterableA,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IterableB,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IterableC&gt;</highlight></codeline>
<codeline lineno="662" refid="namespacesplinepy_1_1utils_1aafe936aafaeded5b357fa9b26e1e8457" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacesplinepy_1_1utils_1aafe936aafaeded5b357fa9b26e1e8457" kindref="member">Subtract</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IterableA&amp;<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IterableB&amp;<sp/>b,<sp/>IterableC&amp;<sp/>c)<sp/>{</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/>assert(a.size()<sp/>==<sp/>b.size());</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/>assert(b.size()<sp/>==<sp/>c.size());</highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>len<sp/>=<sp/>c.size();</highlight></codeline>
<codeline lineno="667"><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::remove_const_t&lt;</highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(len)&gt;<sp/>i{};<sp/>i<sp/>&lt;<sp/>len;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/>c[i]<sp/>=<sp/>a[i]<sp/>-<sp/>b[i];</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="671"><highlight class="normal">}</highlight></codeline>
<codeline lineno="672"><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DataType,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IndexType&gt;</highlight></codeline>
<codeline lineno="674" refid="classsplinepy_1_1utils_1_1Matrix" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classsplinepy_1_1utils_1_1Matrix" kindref="compound">Matrix</ref><sp/>{</highlight></codeline>
<codeline lineno="675" refid="classsplinepy_1_1utils_1_1Matrix_1a7df28105bea7ae6d0d78a1a4da44e86b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="classsplinepy_1_1utils_1_1Matrix_1a7df28105bea7ae6d0d78a1a4da44e86b" kindref="member">DataType_</ref><sp/>=<sp/>DataType;</highlight></codeline>
<codeline lineno="676" refid="classsplinepy_1_1utils_1_1Matrix_1a95d51f45162d74c83a7e3c20471dcd6e" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="classsplinepy_1_1utils_1_1Matrix_1a95d51f45162d74c83a7e3c20471dcd6e" kindref="member">IndexType_</ref><sp/>=<sp/>IndexType;</highlight></codeline>
<codeline lineno="677" refid="classsplinepy_1_1utils_1_1Matrix_1ac682d757a445e98c3c5bf361e87f25fa" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="classsplinepy_1_1utils_1_1Matrix_1ac682d757a445e98c3c5bf361e87f25fa" kindref="member">SignedIndexType</ref><sp/>=<sp/>std::make_signed_t&lt;IndexType&gt;;</highlight></codeline>
<codeline lineno="678" refid="classsplinepy_1_1utils_1_1Matrix_1aee16503916dd43752a05cf0f2c25b07a" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="classsplinepy_1_1utils_1_1Array" kindref="compound">DataArray_</ref><sp/>=<sp/><ref refid="classsplinepy_1_1utils_1_1Array" kindref="compound">Array&lt;DataType, 2, IndexType&gt;</ref>;</highlight></codeline>
<codeline lineno="679" refid="classsplinepy_1_1utils_1_1Matrix_1a4f52aaf7a6e13951fcc5993fb6f9a16a" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="classsplinepy_1_1utils_1_1Array" kindref="compound">RowOrderArray_</ref><sp/>=<sp/><ref refid="classsplinepy_1_1utils_1_1Array" kindref="compound">Array&lt;IndexType, 1, IndexType&gt;</ref>;</highlight></codeline>
<codeline lineno="680"><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="683" refid="classsplinepy_1_1utils_1_1Matrix_1a9110ae4bd5bcba9e063dfda1e52d94b9" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classsplinepy_1_1utils_1_1Array" kindref="compound">DataArray_</ref>&amp;<sp/><ref refid="classsplinepy_1_1utils_1_1Matrix_1a9110ae4bd5bcba9e063dfda1e52d94b9" kindref="member">array_</ref>;</highlight></codeline>
<codeline lineno="684"><highlight class="normal"></highlight></codeline>
<codeline lineno="686" refid="classsplinepy_1_1utils_1_1Matrix_1a22397158d4670294c2102a32f091dff1" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classsplinepy_1_1utils_1_1Array" kindref="compound">RowOrderArray_</ref><sp/><ref refid="classsplinepy_1_1utils_1_1Matrix_1a22397158d4670294c2102a32f091dff1" kindref="member">row_order_</ref>;</highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="689" refid="classsplinepy_1_1utils_1_1Matrix_1a55beb63b16f478d69e28b577124a86f7" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classsplinepy_1_1utils_1_1Matrix_1a55beb63b16f478d69e28b577124a86f7" kindref="member">Matrix</ref>(<ref refid="classsplinepy_1_1utils_1_1Array" kindref="compound">DataArray_</ref>&amp;<sp/>array)<sp/>:<sp/><ref refid="classsplinepy_1_1utils_1_1Matrix_1a9110ae4bd5bcba9e063dfda1e52d94b9" kindref="member">array_</ref>(array)<sp/>{</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IndexType&amp;<sp/>height<sp/>=<sp/>array.<ref refid="classsplinepy_1_1utils_1_1Array_1a02db495ee010f9bece0253abd19be955" kindref="member">Shape</ref>()[0];</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>alloc<sp/>n_rows</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsplinepy_1_1utils_1_1Matrix_1a22397158d4670294c2102a32f091dff1" kindref="member">row_order_</ref>.<ref refid="classsplinepy_1_1utils_1_1Array_1a68c19a2b0c830726dc9070fc61e054c6" kindref="member">Reallocate</ref>(height);</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>arange<sp/>n_rows</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classsplinepy_1_1utils_1_1Matrix_1a1676ce98ba97c9736c56f4ffa77b9bda" kindref="member">ResetRowOrder</ref>();</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="696"><highlight class="normal"></highlight></codeline>
<codeline lineno="697" refid="classsplinepy_1_1utils_1_1Matrix_1a1676ce98ba97c9736c56f4ffa77b9bda" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classsplinepy_1_1utils_1_1Matrix_1a1676ce98ba97c9736c56f4ffa77b9bda" kindref="member">ResetRowOrder</ref>()<sp/>{</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/>std::iota(<ref refid="classsplinepy_1_1utils_1_1Matrix_1a22397158d4670294c2102a32f091dff1" kindref="member">row_order_</ref>.<ref refid="classsplinepy_1_1utils_1_1Array_1a40fdb350a061dc85e4f5729d013e701c" kindref="member">begin</ref>(),<sp/><ref refid="classsplinepy_1_1utils_1_1Matrix_1a22397158d4670294c2102a32f091dff1" kindref="member">row_order_</ref>.<ref refid="classsplinepy_1_1utils_1_1Array_1af84a72c8309221e4487f0089cefea1c7" kindref="member">end</ref>(),<sp/>0);</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="700"><highlight class="normal"></highlight></codeline>
<codeline lineno="701" refid="classsplinepy_1_1utils_1_1Matrix_1a9227fb4c50059a1aca60aced4c5fa10e" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classsplinepy_1_1utils_1_1Matrix_1a9227fb4c50059a1aca60aced4c5fa10e" kindref="member">SwapRow</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IndexType&amp;<sp/>i,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IndexType<sp/>j)<sp/>{</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/>std::swap(<ref refid="classsplinepy_1_1utils_1_1Matrix_1a22397158d4670294c2102a32f091dff1" kindref="member">row_order_</ref>[i],<sp/><ref refid="classsplinepy_1_1utils_1_1Matrix_1a22397158d4670294c2102a32f091dff1" kindref="member">row_order_</ref>[j]);</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="704"><highlight class="normal"></highlight></codeline>
<codeline lineno="705" refid="classsplinepy_1_1utils_1_1Matrix_1ab67f1ab0d37dd65a65bcf0fbd5ec7da9" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classsplinepy_1_1utils_1_1Array" kindref="compound">RowOrderArray_</ref>&amp;<sp/><ref refid="classsplinepy_1_1utils_1_1Matrix_1ab67f1ab0d37dd65a65bcf0fbd5ec7da9" kindref="member">RowOrder</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classsplinepy_1_1utils_1_1Matrix_1a22397158d4670294c2102a32f091dff1" kindref="member">row_order_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="706"><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IterableB,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IterableX&gt;</highlight></codeline>
<codeline lineno="708" refid="classsplinepy_1_1utils_1_1Matrix_1ac8c1ab3dee2ccc51054c0445abba858f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classsplinepy_1_1utils_1_1Matrix_1ac8c1ab3dee2ccc51054c0445abba858f" kindref="member">Solve</ref>(IterableB&amp;<sp/>b,<sp/>IterableX&amp;<sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="709"><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>length<sp/>of<sp/>the<sp/>array/matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IndexType&amp;<sp/>len<sp/>=<sp/><ref refid="classsplinepy_1_1utils_1_1Matrix_1a9110ae4bd5bcba9e063dfda1e52d94b9" kindref="member">array_</ref>.<ref refid="classsplinepy_1_1utils_1_1Array_1a02db495ee010f9bece0253abd19be955" kindref="member">Shape</ref>()[0];</highlight></codeline>
<codeline lineno="712"><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>array_<sp/>should<sp/>be<sp/>a<sp/>square<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(len<sp/>==<sp/><ref refid="classsplinepy_1_1utils_1_1Matrix_1a9110ae4bd5bcba9e063dfda1e52d94b9" kindref="member">array_</ref>.<ref refid="classsplinepy_1_1utils_1_1Array_1a02db495ee010f9bece0253abd19be955" kindref="member">Shape</ref>()[1]);</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>len<sp/>should<sp/>match<sp/>the<sp/>size<sp/>of<sp/>b<sp/>and<sp/>x</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(len<sp/>==<sp/>b.size());</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(len<sp/>==<sp/>x.size());</highlight></codeline>
<codeline lineno="718"><highlight class="normal"></highlight></codeline>
<codeline lineno="719"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NDEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>linear<sp/>system<sp/>for<sp/>debugging</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>array_copy<sp/>=<sp/><ref refid="classsplinepy_1_1utils_1_1Matrix_1a9110ae4bd5bcba9e063dfda1e52d94b9" kindref="member">array_</ref>;</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>b_copy<sp/>=<sp/>b;</highlight></codeline>
<codeline lineno="723"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="724"><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>partial<sp/>pivoting<sp/>and<sp/>forward<sp/>reduction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>since<sp/>we<sp/>reorder<sp/>indices<sp/>only,<sp/>we<sp/>append<sp/>*_r<sp/>to<sp/>reordered<sp/>ids</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(IndexType<sp/>i{0};<sp/>i<sp/>&lt;<sp/>len;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>sneak<sp/>in<sp/>x<sp/>initialization<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>it<sp/>doesn&apos;t<sp/>matter<sp/>if<sp/>this<sp/>is<sp/>i<sp/>or<sp/>i_r</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x[i]<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="731"><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ignore<sp/>clipped<sp/>entries</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>(skipmask[i]<sp/>!=<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>continue;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="735"><highlight class="normal"></highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>swap<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>go<sp/>through<sp/>the<sp/>rows<sp/>and<sp/>compare<sp/>magnitude<sp/>and<sp/>find<sp/>max<sp/>row<sp/>at<sp/>col<sp/>i.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>use<sp/>reordered<sp/>index<sp/>here<sp/>to<sp/>retrieve<sp/>rows,<sp/>but<sp/>keep<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>true<sp/>index<sp/>for<sp/>everything<sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IndexType&amp;<sp/>i_r<sp/>=<sp/><ref refid="classsplinepy_1_1utils_1_1Matrix_1a22397158d4670294c2102a32f091dff1" kindref="member">row_order_</ref>[i];</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>IndexType<sp/>max_row{i};</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DataType<sp/>current_max{std::abs(<ref refid="classsplinepy_1_1utils_1_1Matrix_1a9110ae4bd5bcba9e063dfda1e52d94b9" kindref="member">array_</ref>(i_r,<sp/>i))};</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>loop<sp/>with<sp/>true<sp/>row<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(IndexType<sp/>j{i<sp/>+<sp/>1};<sp/>j<sp/>&lt;<sp/>len;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>but<sp/>look<sp/>up<sp/>reordered<sp/>row&apos;s<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DataType<sp/>maybe_max{std::abs(<ref refid="classsplinepy_1_1utils_1_1Matrix_1a9110ae4bd5bcba9e063dfda1e52d94b9" kindref="member">array_</ref>(<ref refid="classsplinepy_1_1utils_1_1Matrix_1a22397158d4670294c2102a32f091dff1" kindref="member">row_order_</ref>[j],<sp/>i))};</highlight></codeline>
<codeline lineno="747"><highlight class="normal"></highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(maybe_max<sp/>&gt;<sp/>current_max)<sp/>{</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current_max<sp/>=<sp/>std::move(maybe_max);</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_row<sp/>=<sp/>j;</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>swap<sp/>if<sp/>needed.<sp/>max<sp/>entry<sp/>row<sp/>goes<sp/>to<sp/>i-th<sp/>row.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(max_row<sp/>!=<sp/>i)<sp/>{</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsplinepy_1_1utils_1_1Matrix_1a9227fb4c50059a1aca60aced4c5fa10e" kindref="member">SwapRow</ref>(max_row,<sp/>i);</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::swap(skipmask[maxrow],<sp/>skipmask[i]);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>END<sp/>swap<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>forward<sp/>reduction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DataType<sp/>a_ii<sp/>=<sp/><ref refid="classsplinepy_1_1utils_1_1Matrix_1a9110ae4bd5bcba9e063dfda1e52d94b9" kindref="member">array_</ref>(i_r,<sp/>i);</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(IndexType<sp/>j{i<sp/>+<sp/>1};<sp/>j<sp/>&lt;<sp/>len;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>retrieved<sp/>reordered<sp/>j-th<sp/>row</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IndexType&amp;<sp/>j_r<sp/>=<sp/><ref refid="classsplinepy_1_1utils_1_1Matrix_1a22397158d4670294c2102a32f091dff1" kindref="member">row_order_</ref>[j];</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>reduction<sp/>factor<sp/>for<sp/>this<sp/>row</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DataType<sp/>reduction_factor<sp/>=<sp/><ref refid="classsplinepy_1_1utils_1_1Matrix_1a9110ae4bd5bcba9e063dfda1e52d94b9" kindref="member">array_</ref>(j_r,<sp/>i)<sp/>/<sp/>a_ii;</highlight></codeline>
<codeline lineno="767"><highlight class="normal"></highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>matrix<sp/>reduction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>the<sp/>beginnings<sp/>of<sp/>i<sp/>and<sp/>j<sp/>rows</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DataType*<sp/>a_i<sp/>=<sp/>&amp;<ref refid="classsplinepy_1_1utils_1_1Matrix_1a9110ae4bd5bcba9e063dfda1e52d94b9" kindref="member">array_</ref>(i_r,<sp/>0);</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DataType*<sp/>a_j<sp/>=<sp/>&amp;<ref refid="classsplinepy_1_1utils_1_1Matrix_1a9110ae4bd5bcba9e063dfda1e52d94b9" kindref="member">array_</ref>(j_r,<sp/>0);</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>start<sp/>with<sp/>setting<sp/>the<sp/>i<sp/>th<sp/>column<sp/>zero.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a_j[i]<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>is<sp/>column<sp/>entry,<sp/>so<sp/>true<sp/>indices</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>reduce<sp/>the<sp/>rest<sp/>of<sp/>the<sp/>column</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(IndexType<sp/>k{i<sp/>+<sp/>1};<sp/>k<sp/>&lt;<sp/>len;<sp/>++k)<sp/>{</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a_j[k]<sp/>-=<sp/>a_i[k]<sp/>*<sp/>reduction_factor;</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="779"><highlight class="normal"></highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>row-vec<sp/>reduction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b[j_r]<sp/>-=<sp/>b[i_r]<sp/>*<sp/>reduction_factor;</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>END<sp/>forward<sp/>reduction<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>back<sp/>substitution</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Loop<sp/>backwards</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="classsplinepy_1_1utils_1_1Matrix_1ac682d757a445e98c3c5bf361e87f25fa" kindref="member">SignedIndexType</ref><sp/>i{len<sp/>-<sp/>1};<sp/>i<sp/>&gt;<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="classsplinepy_1_1utils_1_1Matrix_1ac682d757a445e98c3c5bf361e87f25fa" kindref="member">SignedIndexType</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(-1);</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--i)<sp/>{</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ignore<sp/>clipped<sp/>entries</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>(skipmask[i]<sp/>!=<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>continue;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal"></highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IndexType&amp;<sp/>i_r<sp/>=<sp/><ref refid="classsplinepy_1_1utils_1_1Matrix_1a22397158d4670294c2102a32f091dff1" kindref="member">row_order_</ref>[i];</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DataType*<sp/>a_i<sp/>=<sp/>&amp;<ref refid="classsplinepy_1_1utils_1_1Matrix_1a9110ae4bd5bcba9e063dfda1e52d94b9" kindref="member">array_</ref>(i_r,<sp/>0);</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DataType<sp/>sum{};</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(IndexType<sp/>j{i<sp/>+<sp/>1};<sp/>j<sp/>&lt;<sp/>len;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>a_i[j]<sp/>*<sp/>x[j];</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x[i]<sp/>=<sp/>(b[i_r]<sp/>-<sp/>sum)<sp/>/<sp/>a_i[i];</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="801"><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NDEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>norm{};</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(IndexType<sp/>i{};<sp/>i<sp/>&lt;<sp/>len;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>row_val{};</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(IndexType<sp/>j{};<sp/>j<sp/>&lt;<sp/>len;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>row_val<sp/>+=<sp/>array_copy(i,<sp/>j)<sp/>*<sp/>x[j];</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>row_val<sp/>-=<sp/>b_copy[i];</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>norm<sp/>+=<sp/>row_val<sp/>*<sp/>row_val;</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="812"><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::sqrt(norm)<sp/>&gt;<sp/>1e-4)<sp/>{</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacesplinepy_1_1utils_1a3e3aaa6844b55c96f7b5b81be2f1b339" kindref="member">splinepy::utils::PrintAndThrowError</ref>(</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Solving<sp/>linear<sp/>system<sp/>failed,<sp/>error<sp/>is<sp/>:<sp/>&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>norm);</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="818"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="820"><highlight class="normal">};</highlight></codeline>
<codeline lineno="821"><highlight class="normal"></highlight></codeline>
<codeline lineno="822"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DataType,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IndexType&gt;</highlight></codeline>
<codeline lineno="823" refid="namespacesplinepy_1_1utils_1ab77dc35439743aec410f40afd0590520" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacesplinepy_1_1utils_1ab77dc35439743aec410f40afd0590520" kindref="member">CopyUpperToLowerTriangle</ref>(<ref refid="classsplinepy_1_1utils_1_1Array" kindref="compound">Array&lt;DataType, 3, IndexType&gt;</ref>&amp;<sp/>arr3d)<sp/>{</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>shape<sp/>=<sp/>arr3d.<ref refid="classsplinepy_1_1utils_1_1Array_1a02db495ee010f9bece0253abd19be955" kindref="member">Shape</ref>();</highlight></codeline>
<codeline lineno="825"><highlight class="normal"></highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shape[0]<sp/>!=<sp/>shape[1])<sp/>{</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacesplinepy_1_1utils_1a3e3aaa6844b55c96f7b5b81be2f1b339" kindref="member">splinepy::utils::PrintAndThrowError</ref>(</highlight><highlight class="stringliteral">&quot;Array<sp/>does<sp/>not<sp/>have<sp/>a<sp/>squared<sp/>shape.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="829"><highlight class="normal"></highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i{};<sp/>i<sp/>&lt;<sp/>shape[0];<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j{i<sp/>+<sp/>1};<sp/>j<sp/>&lt;<sp/>shape[1];<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::copy_n(&amp;arr3d(i,<sp/>j,<sp/>0),<sp/>shape[2],<sp/>&amp;arr3d(j,<sp/>i,<sp/>0));</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="835"><highlight class="normal">}</highlight></codeline>
<codeline lineno="836"><highlight class="normal"></highlight></codeline>
<codeline lineno="843"><highlight class="keyword">template</highlight><highlight class="normal">&lt;std::</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>para_dim&gt;</highlight></codeline>
<codeline lineno="844"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="845" refid="namespacesplinepy_1_1utils_1ad5d5f838a69da5b429407a7a29d90d8c" refkind="member"><highlight class="normal"><ref refid="namespacesplinepy_1_1utils_1ad5d5f838a69da5b429407a7a29d90d8c" kindref="member">GaussWithPivot</ref>(std::array&lt;std::array&lt;double,<sp/>para_dim&gt;,<sp/>para_dim&gt;&amp;<sp/>A,</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::array&lt;double,<sp/>para_dim&gt;&amp;<sp/>b,</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::array&lt;int,<sp/>para_dim&gt;&amp;<sp/>skipmask,</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::array&lt;double,<sp/>para_dim&gt;&amp;<sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/>std::size_t<sp/>maxrow;</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>maxval,<sp/>maybemax;</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/>std::array&lt;int,<sp/>para_dim&gt;<sp/>indexmap;</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/>std::iota(indexmap.begin(),<sp/>indexmap.end(),<sp/>0);</highlight></codeline>
<codeline lineno="853"><highlight class="normal"></highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>partial<sp/>pivoting<sp/>and<sp/>forward<sp/>reduction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i{0};<sp/>i<sp/>&lt;<sp/>para_dim;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>sneak<sp/>in<sp/>x<sp/>initialization<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>done<sp/>first,<sp/>so<sp/>that<sp/>skipping<sp/>it<sp/>will<sp/>have<sp/>no<sp/>effect<sp/>on<sp/>update<sp/>later</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/>x[i]<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="859"><highlight class="normal"></highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ignore<sp/>clipped<sp/>entries</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(skipmask[i]<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="863"><highlight class="normal"></highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>swap<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>go<sp/>through<sp/>the<sp/>rows<sp/>and<sp/>compare<sp/>magnitude<sp/>and<sp/>mark<sp/>it<sp/>if<sp/>needed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/>maxrow<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/>maxval<sp/>=<sp/>std::abs(A[i][i]);</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>j{i<sp/>+<sp/>1};<sp/>j<sp/>&lt;<sp/>para_dim;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>maybemax<sp/>=<sp/>std::abs(A[j][i]);</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(maybemax<sp/>&gt;<sp/>maxval)<sp/>{</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxval<sp/>=<sp/>maybemax;</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxrow<sp/>=<sp/>j;</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>swap<sp/>if<sp/>needed.<sp/>max<sp/>entry<sp/>row<sp/>goes<sp/>to<sp/>i-th<sp/>row.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(maxrow<sp/>!=<sp/>i)<sp/>{</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>swap<sp/>A&apos;s<sp/>rows,<sp/>entries<sp/>of<sp/>b,<sp/>indexmap,<sp/>and<sp/>skipmask</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::swap(A[maxrow],<sp/>A[i]);</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::swap(b[maxrow],<sp/>b[i]);</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::swap(indexmap[maxrow],<sp/>indexmap[i]);</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::swap(skipmask[maxrow],<sp/>skipmask[i]);</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>END<sp/>swap<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="884"><highlight class="normal"></highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>forward<sp/>reduction<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Aii<sp/>=<sp/>A[i][i];</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>j{i<sp/>+<sp/>1};<sp/>j<sp/>&lt;<sp/>para_dim;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>redfac<sp/>=<sp/>A[j][i]<sp/>/<sp/>Aii;</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>matrix<sp/>reduction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>k{i<sp/>+<sp/>1};<sp/>k<sp/>&lt;<sp/>para_dim;<sp/>k++)<sp/>{</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A[j][k]<sp/>-=<sp/>A[i][k]<sp/>*<sp/>redfac;</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>A[j][i]<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="894"><highlight class="normal"></highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>row-vec<sp/>reduction0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>b[j]<sp/>-=<sp/>b[i]<sp/>*<sp/>redfac;</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>END<sp/>forward<sp/>reduction<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="900"><highlight class="normal"></highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>back<sp/>substitution</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sum;</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Looping<sp/>backwards,<sp/>stopping<sp/>once<sp/>overflow<sp/>is<sp/>reached,<sp/>which<sp/>corresponds<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(-1),<sp/>i.e.,<sp/>such<sp/>that<sp/>the<sp/>last<sp/>value<sp/>is<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i{para_dim<sp/>-<sp/>1};<sp/>i<sp/>!=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(-1);<sp/>--i)<sp/>{</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ignore<sp/>clipped<sp/>entries</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(skipmask[i]<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="909"><highlight class="normal"></highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/>sum<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>j{i<sp/>+<sp/>1};<sp/>j<sp/>&lt;<sp/>para_dim;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>A[i][j]<sp/>*<sp/>x[j];</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/>x[i]<sp/>=<sp/>(b[i]<sp/>-<sp/>sum)<sp/>/<sp/>A[i][i];</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="916"><highlight class="normal"></highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>reorder</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/>CopyReorder(x,<sp/>indexmap);</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/>CopyReorder(skipmask,<sp/>indexmap);</highlight></codeline>
<codeline lineno="920"><highlight class="normal">}</highlight></codeline>
<codeline lineno="921"><highlight class="normal"></highlight></codeline>
<codeline lineno="922"><highlight class="normal">}<sp/></highlight><highlight class="comment">/*<sp/>namespace<sp/>splinepy::utils<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/runner/work/splinepy/splinepy/include/splinepy/utils/arrays.hpp"/>
  </compounddef>
</doxygen>
