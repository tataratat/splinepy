<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classsplinepy_1_1py_1_1PySpline" kind="class" language="C++" prot="public">
    <compoundname>splinepy::py::PySpline</compoundname>
    <includes refid="py__spline_8hpp" local="no">py_spline.hpp</includes>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classsplinepy_1_1py_1_1PySpline_1a8d8fafeb4c9e6e2e9ecfdae2e32c224f" prot="public" static="no">
        <type>typename std::shared_ptr&lt; <ref refid="classsplinepy_1_1splines_1_1SplinepyBase" kindref="compound">splinepy::splines::SplinepyBase</ref> &gt;</type>
        <definition>using CoreSpline_ =  typename std::shared_ptr&lt;splinepy::splines::SplinepyBase&gt;</definition>
        <argsstring></argsstring>
        <name>CoreSpline_</name>
        <qualifiedname>splinepy::py::PySpline::CoreSpline_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/py/py_spline.hpp" line="95" column="3" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/py/py_spline.hpp" bodystart="95" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classsplinepy_1_1py_1_1PySpline_1af22fc033a28da611de197aeb49448c6c" prot="public" static="no" mutable="no">
        <type><ref refid="classsplinepy_1_1py_1_1PySpline_1a8d8fafeb4c9e6e2e9ecfdae2e32c224f" kindref="member">CoreSpline_</ref></type>
        <definition>CoreSpline_ c_spline_</definition>
        <argsstring></argsstring>
        <name>c_spline_</name>
        <qualifiedname>splinepy::py::PySpline::c_spline_</qualifiedname>
        <initializer>= nullptr</initializer>
        <briefdescription>
<para>Core spline. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/py/py_spline.hpp" line="98" column="15" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/py/py_spline.hpp" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classsplinepy_1_1py_1_1PySpline_1a96fb3e6b8f86a70c6fe8091b478e46a9" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int para_dim_</definition>
        <argsstring></argsstring>
        <name>para_dim_</name>
        <qualifiedname>splinepy::py::PySpline::para_dim_</qualifiedname>
        <initializer>= -1</initializer>
        <briefdescription>
<para>Dimension of parameter space. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/py/py_spline.hpp" line="102" column="7" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/py/py_spline.hpp" bodystart="102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classsplinepy_1_1py_1_1PySpline_1a844805bf936642eb8849d76b506abf8d" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int dim_</definition>
        <argsstring></argsstring>
        <name>dim_</name>
        <qualifiedname>splinepy::py::PySpline::dim_</qualifiedname>
        <initializer>= -1</initializer>
        <briefdescription>
<para>Dimension of physical space. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/py/py_spline.hpp" line="104" column="7" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/py/py_spline.hpp" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classsplinepy_1_1py_1_1PySpline_1aa3b9f0460d2b251a6cff4ac28881e040" prot="public" static="no" mutable="no">
        <type>py::dict</type>
        <definition>py::dict data_</definition>
        <argsstring></argsstring>
        <name>data_</name>
        <qualifiedname>splinepy::py::PySpline::data_</qualifiedname>
        <briefdescription>
<para>Place to store and access from both python and cpp side. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/py/py_spline.hpp" line="107" column="12" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/py/py_spline.hpp" bodystart="107" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classsplinepy_1_1py_1_1PySpline_1a76dea4c59b29d5361d4bc8f39fdf5522" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PySpline</definition>
        <argsstring>()=default</argsstring>
        <name>PySpline</name>
        <qualifiedname>splinepy::py::PySpline::PySpline</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/py/py_spline.hpp" line="110" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1py_1_1PySpline_1a26998f8662cb1ceab252a129907228a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PySpline</definition>
        <argsstring>(PySpline &amp;&amp;)=default</argsstring>
        <name>PySpline</name>
        <qualifiedname>splinepy::py::PySpline::PySpline</qualifiedname>
        <param>
          <type><ref refid="classsplinepy_1_1py_1_1PySpline" kindref="compound">PySpline</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
<para>Move constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/py/py_spline.hpp" line="112" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1py_1_1PySpline_1abc8b793a4130adf17324b21ca82ffb50" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>PySpline</definition>
        <argsstring>(const py::kwargs &amp;kwargs)</argsstring>
        <name>PySpline</name>
        <qualifiedname>splinepy::py::PySpline::PySpline</qualifiedname>
        <param>
          <type>const py::kwargs &amp;</type>
          <declname>kwargs</declname>
        </param>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>kwargs</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/py/py_spline.hpp" line="115" column="3" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/py/py_spline.hpp" bodystart="115" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1py_1_1PySpline_1ae468b1186fafd7422f3c48457cf27d1a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>PySpline</definition>
        <argsstring>(const CoreSpline_ &amp;another_core)</argsstring>
        <name>PySpline</name>
        <qualifiedname>splinepy::py::PySpline::PySpline</qualifiedname>
        <param>
          <type>const <ref refid="classsplinepy_1_1py_1_1PySpline_1a8d8fafeb4c9e6e2e9ecfdae2e32c224f" kindref="member">CoreSpline_</ref> &amp;</type>
          <declname>another_core</declname>
        </param>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>another_core</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/py/py_spline.hpp" line="118" column="3" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/py/py_spline.hpp" bodystart="118" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1py_1_1PySpline_1a1da7c5ae328bed5795683bb93f36a24d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>PySpline</definition>
        <argsstring>(PySpline &amp;another_py_spline)</argsstring>
        <name>PySpline</name>
        <qualifiedname>splinepy::py::PySpline::PySpline</qualifiedname>
        <param>
          <type><ref refid="classsplinepy_1_1py_1_1PySpline" kindref="compound">PySpline</ref> &amp;</type>
          <declname>another_py_spline</declname>
        </param>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>another_py_spline</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/py/py_spline.hpp" line="124" column="3" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/py/py_spline.hpp" bodystart="124" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1py_1_1PySpline_1a29daeecfc1b16e9298daf9f2018baaf8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>PySpline</definition>
        <argsstring>(const std::shared_ptr&lt; PySpline &gt; &amp;another_py_spline_ptr)</argsstring>
        <name>PySpline</name>
        <qualifiedname>splinepy::py::PySpline::PySpline</qualifiedname>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classsplinepy_1_1py_1_1PySpline" kindref="compound">PySpline</ref> &gt; &amp;</type>
          <declname>another_py_spline_ptr</declname>
        </param>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>another_py_spline_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/py/py_spline.hpp" line="132" column="3" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/py/py_spline.hpp" bodystart="132" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1py_1_1PySpline_1a46a29b83a9a47391c25a2d49219f5fc2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NewCore</definition>
        <argsstring>(const py::kwargs &amp;kwargs)</argsstring>
        <name>NewCore</name>
        <qualifiedname>splinepy::py::PySpline::NewCore</qualifiedname>
        <param>
          <type>const py::kwargs &amp;</type>
          <declname>kwargs</declname>
        </param>
        <briefdescription>
<para>Creates a corresponding spline based on kwargs similar to previous update_c() Runs sanity checks on inputs. </para>
        </briefdescription>
        <detaileddescription>
<para>Creates a corresponding spline based on kwargs similar to previous update_c() Runs sanity checks on inputs this will keep the reference of the kwargs that were used for init.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>kwargs</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/py/py_spline.hpp" line="138" column="8" bodyfile="/home/runner/work/splinepy/splinepy/src/py/py_spline.cpp" bodystart="50" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1py_1_1PySpline_1a359946f99148cf58ab49950b385f65b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsplinepy_1_1py_1_1PySpline_1a8d8fafeb4c9e6e2e9ecfdae2e32c224f" kindref="member">CoreSpline_</ref> &amp;</type>
        <definition>PySpline::CoreSpline_ &amp; Core</definition>
        <argsstring>()</argsstring>
        <name>Core</name>
        <qualifiedname>splinepy::py::PySpline::Core</qualifiedname>
        <briefdescription>
<para>will throw if c_spline_ is not initialized. use this for runtime core calls </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/py/py_spline.hpp" line="142" column="15" bodyfile="/home/runner/work/splinepy/splinepy/src/py/py_spline.cpp" bodystart="233" bodyend="240"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1py_1_1PySpline_1a509fb1c72ca532a607ff93c8181e511e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classsplinepy_1_1py_1_1PySpline_1a8d8fafeb4c9e6e2e9ecfdae2e32c224f" kindref="member">CoreSpline_</ref> &amp;</type>
        <definition>const PySpline::CoreSpline_ &amp; Core</definition>
        <argsstring>() const</argsstring>
        <name>Core</name>
        <qualifiedname>splinepy::py::PySpline::Core</qualifiedname>
        <briefdescription>
<para>Core spline. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/py/py_spline.hpp" line="145" column="21" bodyfile="/home/runner/work/splinepy/splinepy/src/py/py_spline.cpp" bodystart="243" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1py_1_1PySpline_1a15d38297a4b14f22d084eab95779e35c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string WhatAmI</definition>
        <argsstring>() const</argsstring>
        <name>WhatAmI</name>
        <qualifiedname>splinepy::py::PySpline::WhatAmI</qualifiedname>
        <briefdescription>
<para>What am I? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/py/py_spline.hpp" line="148" column="15" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/py/py_spline.hpp" bodystart="148" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1py_1_1PySpline_1a41087c5f2f732f7a2f336b45b952f199" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string Name</definition>
        <argsstring>() const</argsstring>
        <name>Name</name>
        <qualifiedname>splinepy::py::PySpline::Name</qualifiedname>
        <briefdescription>
<para>Get spline name. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/py/py_spline.hpp" line="150" column="15" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/py/py_spline.hpp" bodystart="150" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1py_1_1PySpline_1a129c6f541a94e7ae95577082a2cfedcc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool HasKnotVectors</definition>
        <argsstring>() const</argsstring>
        <name>HasKnotVectors</name>
        <qualifiedname>splinepy::py::PySpline::HasKnotVectors</qualifiedname>
        <briefdescription>
<para>Returns true iff spline has knot vectors. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/py/py_spline.hpp" line="152" column="8" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/py/py_spline.hpp" bodystart="152" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1py_1_1PySpline_1ab12b7cdceeccd010d3bbe04eb8b5c85b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool IsRational</definition>
        <argsstring>() const</argsstring>
        <name>IsRational</name>
        <qualifiedname>splinepy::py::PySpline::IsRational</qualifiedname>
        <briefdescription>
<para>Returns True iff spline is rational. NURBS is rational, for example. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/py/py_spline.hpp" line="155" column="8" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/py/py_spline.hpp" bodystart="155" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1py_1_1PySpline_1a64406e0b9ea41f6e74ea8e6cdb448ad3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>py::array_t&lt; int &gt;</type>
        <definition>py::array_t&lt; int &gt; CurrentCoreDegrees</definition>
        <argsstring>() const</argsstring>
        <name>CurrentCoreDegrees</name>
        <qualifiedname>splinepy::py::PySpline::CurrentCoreDegrees</qualifiedname>
        <briefdescription>
<para>As knot vectors and control points / weights has a specific initialization routines, we provide a separate degree getter to avoid calling <ref refid="classsplinepy_1_1py_1_1PySpline_1a1d5d763de9077626609705b8591202b5" kindref="member">CurrentCoreProperties()</ref> for a full properties copy. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/py/py_spline.hpp" line="160" column="15" bodyfile="/home/runner/work/splinepy/splinepy/src/py/py_spline.cpp" bodystart="252" bodyend="257"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1py_1_1PySpline_1a1d5d763de9077626609705b8591202b5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>py::dict</type>
        <definition>py::dict CurrentCoreProperties</definition>
        <argsstring>() const</argsstring>
        <name>CurrentCoreProperties</name>
        <qualifiedname>splinepy::py::PySpline::CurrentCoreProperties</qualifiedname>
        <briefdescription>
<para>Returns currunt properties of core spline similar to update_p. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/py/py_spline.hpp" line="164" column="12" bodyfile="/home/runner/work/splinepy/splinepy/src/py/py_spline.cpp" bodystart="259" bodyend="312"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1py_1_1PySpline_1a671e8c0d22cf78763ab8ccfcf5ac5f4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>py::tuple</type>
        <definition>py::tuple CoordinatePointers</definition>
        <argsstring>()</argsstring>
        <name>CoordinatePointers</name>
        <qualifiedname>splinepy::py::PySpline::CoordinatePointers</qualifiedname>
        <briefdescription>
<para>Returns coordinate pointers in a tuple. For rational splines, This will return control_point_pointers and weight_pointers For non-rational splines, only the former. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/py/py_spline.hpp" line="169" column="13" bodyfile="/home/runner/work/splinepy/splinepy/src/py/py_spline.cpp" bodystart="314" bodyend="322"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1py_1_1PySpline_1a52b23b4182a864a49ccb5f9d92c7c263" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; bsplinelib::parameter_spaces::ParameterSpaceBase &gt;</type>
        <definition>std::shared_ptr&lt; bsplinelib::parameter_spaces::ParameterSpaceBase &gt; ParameterSpace</definition>
        <argsstring>()</argsstring>
        <name>ParameterSpace</name>
        <qualifiedname>splinepy::py::PySpline::ParameterSpace</qualifiedname>
        <briefdescription>
<para>Returns ParameterSpace. meant to be called library internally to prepare ParameterSpaceBase (forms knot_vectors) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/py/py_spline.hpp" line="174" column="3" bodyfile="/home/runner/work/splinepy/splinepy/src/py/py_spline.cpp" bodystart="325" bodyend="327"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1py_1_1PySpline_1acc39b4da8816e8f99b4c1742c191a224" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; bsplinelib::parameter_spaces::KnotVector &gt;</type>
        <definition>std::shared_ptr&lt; bsplinelib::parameter_spaces::KnotVector &gt; KnotVector</definition>
        <argsstring>(const int para_dim)</argsstring>
        <name>KnotVector</name>
        <qualifiedname>splinepy::py::PySpline::KnotVector</qualifiedname>
        <param>
          <type>const int</type>
          <declname>para_dim</declname>
        </param>
        <briefdescription>
<para>Returns knot vector of given dimension. meant to be called library internally to prepare KnotVector (forms each elements in knot_vectors) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/py/py_spline.hpp" line="179" column="3" bodyfile="/home/runner/work/splinepy/splinepy/src/py/py_spline.cpp" bodystart="330" bodyend="332"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1py_1_1PySpline_1a552febdd775dae957792b82e0d530608" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>py::array_t&lt; double &gt;</type>
        <definition>py::array_t&lt; double &gt; ParametricBounds</definition>
        <argsstring>() const</argsstring>
        <name>ParametricBounds</name>
        <qualifiedname>splinepy::py::PySpline::ParametricBounds</qualifiedname>
        <briefdescription>
<para>AABB of spline parametric space. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/py/py_spline.hpp" line="182" column="15" bodyfile="/home/runner/work/splinepy/splinepy/src/py/py_spline.cpp" bodystart="334" bodyend="343"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1py_1_1PySpline_1aa635e6dc78e3e47607b7ecf8a24d7a4a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>py::list</type>
        <definition>py::list GrevilleAbscissae</definition>
        <argsstring>(const double) const</argsstring>
        <name>GrevilleAbscissae</name>
        <qualifiedname>splinepy::py::PySpline::GrevilleAbscissae</qualifiedname>
        <param>
          <type>const double</type>
          <defname>duplicate_tolerance</defname>
        </param>
        <briefdescription>
<para>Calculate Greville abscissae for Spline. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/py/py_spline.hpp" line="185" column="12" bodyfile="/home/runner/work/splinepy/splinepy/src/py/py_spline.cpp" bodystart="345" bodyend="365"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1py_1_1PySpline_1a364309e6bb44dcfae649369f7f02c2e9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>py::array_t&lt; int &gt;</type>
        <definition>py::array_t&lt; int &gt; ControlMeshResolutions</definition>
        <argsstring>() const</argsstring>
        <name>ControlMeshResolutions</name>
        <qualifiedname>splinepy::py::PySpline::ControlMeshResolutions</qualifiedname>
        <briefdescription>
<para>Returns control mesh resolutions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/py/py_spline.hpp" line="188" column="15" bodyfile="/home/runner/work/splinepy/splinepy/src/py/py_spline.cpp" bodystart="367" bodyend="375"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1py_1_1PySpline_1a6bc4484d5b815817d892cf9a4473c61a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>py::array_t&lt; double &gt;</type>
        <definition>py::array_t&lt; double &gt; Evaluate</definition>
        <argsstring>(py::array_t&lt; double &gt; queries, int nthreads) const</argsstring>
        <name>Evaluate</name>
        <qualifiedname>splinepy::py::PySpline::Evaluate</qualifiedname>
        <param>
          <type>py::array_t&lt; double &gt;</type>
          <declname>queries</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nthreads</declname>
        </param>
        <briefdescription>
<para>Evaluate spline at query points. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>queries</parametername>
</parameternamelist>
<parameterdescription>
<para>Query points </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nthreads</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of threads to use </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/py/py_spline.hpp" line="193" column="15" bodyfile="/home/runner/work/splinepy/splinepy/src/py/py_spline.cpp" bodystart="377" bodyend="399"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1py_1_1PySpline_1ab5608611d0f26d611ecf1d1154e6ecbc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>py::array_t&lt; double &gt;</type>
        <definition>py::array_t&lt; double &gt; Sample</definition>
        <argsstring>(py::array_t&lt; int &gt; resolutions, int nthreads) const</argsstring>
        <name>Sample</name>
        <qualifiedname>splinepy::py::PySpline::Sample</qualifiedname>
        <param>
          <type>py::array_t&lt; int &gt;</type>
          <declname>resolutions</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nthreads</declname>
        </param>
        <briefdescription>
<para>Sample wraps evaluate to allow nthread executions Requires SplinepyParametricBounds. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/py/py_spline.hpp" line="197" column="15" bodyfile="/home/runner/work/splinepy/splinepy/src/py/py_spline.cpp" bodystart="401" bodyend="433"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1py_1_1PySpline_1a71a3306452b75e110c517a7093d4fab4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>py::array_t&lt; double &gt;</type>
        <definition>py::array_t&lt; double &gt; Jacobian</definition>
        <argsstring>(const py::array_t&lt; double &gt; queries, const int nthreads) const</argsstring>
        <name>Jacobian</name>
        <qualifiedname>splinepy::py::PySpline::Jacobian</qualifiedname>
        <param>
          <type>const py::array_t&lt; double &gt;</type>
          <declname>queries</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>nthreads</declname>
        </param>
        <briefdescription>
<para>Evaluate the Jacobian at certain positions. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>queries</parametername>
</parameternamelist>
<parameterdescription>
<para>position in the parametric space </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nthreads</parametername>
</parameternamelist>
<parameterdescription>
<para>number of threads for evaluation </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>py::array_t&lt;double&gt; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/py/py_spline.hpp" line="206" column="15" bodyfile="/home/runner/work/splinepy/splinepy/src/py/py_spline.cpp" bodystart="435" bodyend="461"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1py_1_1PySpline_1aebaf7c32aec0f6efc4146d65d63662c2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>py::array_t&lt; double &gt;</type>
        <definition>py::array_t&lt; double &gt; Derivative</definition>
        <argsstring>(py::array_t&lt; double &gt; queries, py::array_t&lt; int &gt; orders, int nthreads) const</argsstring>
        <name>Derivative</name>
        <qualifiedname>splinepy::py::PySpline::Derivative</qualifiedname>
        <param>
          <type>py::array_t&lt; double &gt;</type>
          <declname>queries</declname>
        </param>
        <param>
          <type>py::array_t&lt; int &gt;</type>
          <declname>orders</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nthreads</declname>
        </param>
        <briefdescription>
<para>spline derivatives </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/py/py_spline.hpp" line="210" column="15" bodyfile="/home/runner/work/splinepy/splinepy/src/py/py_spline.cpp" bodystart="463" bodyend="507"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1py_1_1PySpline_1ab1f0a87f7f6c4d26012c624490203f10" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>py::array_t&lt; int &gt;</type>
        <definition>py::array_t&lt; int &gt; Support</definition>
        <argsstring>(py::array_t&lt; double &gt; queries, int nthreads) const</argsstring>
        <name>Support</name>
        <qualifiedname>splinepy::py::PySpline::Support</qualifiedname>
        <param>
          <type>py::array_t&lt; double &gt;</type>
          <declname>queries</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nthreads</declname>
        </param>
        <briefdescription>
<para>Basis support id. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/py/py_spline.hpp" line="215" column="15" bodyfile="/home/runner/work/splinepy/splinepy/src/py/py_spline.cpp" bodystart="509" bodyend="531"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1py_1_1PySpline_1ac9ec778787b12d40471a3b56a62d8654" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>py::array_t&lt; double &gt;</type>
        <definition>py::array_t&lt; double &gt; Basis</definition>
        <argsstring>(py::array_t&lt; double &gt; queries, int nthreads) const</argsstring>
        <name>Basis</name>
        <qualifiedname>splinepy::py::PySpline::Basis</qualifiedname>
        <param>
          <type>py::array_t&lt; double &gt;</type>
          <declname>queries</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nthreads</declname>
        </param>
        <briefdescription>
<para>Basis function values. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/py/py_spline.hpp" line="218" column="15" bodyfile="/home/runner/work/splinepy/splinepy/src/py/py_spline.cpp" bodystart="533" bodyend="555"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1py_1_1PySpline_1ac48d3b5c395957696c0773d2ede46717" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>py::tuple</type>
        <definition>py::tuple BasisAndSupport</definition>
        <argsstring>(py::array_t&lt; double &gt; queries, int nthreads) const</argsstring>
        <name>BasisAndSupport</name>
        <qualifiedname>splinepy::py::PySpline::BasisAndSupport</qualifiedname>
        <param>
          <type>py::array_t&lt; double &gt;</type>
          <declname>queries</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nthreads</declname>
        </param>
        <briefdescription>
<para>Basis function values and support id. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/py/py_spline.hpp" line="221" column="13" bodyfile="/home/runner/work/splinepy/splinepy/src/py/py_spline.cpp" bodystart="557" bodyend="585"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1py_1_1PySpline_1a93acd9db34aeb236e07da8e41f42e169" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>py::array_t&lt; double &gt;</type>
        <definition>py::array_t&lt; double &gt; BasisDerivative</definition>
        <argsstring>(py::array_t&lt; double &gt; queries, py::array_t&lt; int &gt; orders, int nthreads) const</argsstring>
        <name>BasisDerivative</name>
        <qualifiedname>splinepy::py::PySpline::BasisDerivative</qualifiedname>
        <param>
          <type>py::array_t&lt; double &gt;</type>
          <declname>queries</declname>
        </param>
        <param>
          <type>py::array_t&lt; int &gt;</type>
          <declname>orders</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nthreads</declname>
        </param>
        <briefdescription>
<para>Get basis derivative. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>queries</parametername>
</parameternamelist>
<parameterdescription>
<para>Query points </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>orders</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nthreads</parametername>
</parameternamelist>
<parameterdescription>
<para>number of threads to use </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/py/py_spline.hpp" line="227" column="15" bodyfile="/home/runner/work/splinepy/splinepy/src/py/py_spline.cpp" bodystart="587" bodyend="631"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1py_1_1PySpline_1a7689961cf31e06f07e5cbac49b8040c9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>py::tuple</type>
        <definition>py::tuple BasisDerivativeAndSupport</definition>
        <argsstring>(py::array_t&lt; double &gt; queries, py::array_t&lt; int &gt; orders, int nthreads) const</argsstring>
        <name>BasisDerivativeAndSupport</name>
        <qualifiedname>splinepy::py::PySpline::BasisDerivativeAndSupport</qualifiedname>
        <param>
          <type>py::array_t&lt; double &gt;</type>
          <declname>queries</declname>
        </param>
        <param>
          <type>py::array_t&lt; int &gt;</type>
          <declname>orders</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nthreads</declname>
        </param>
        <briefdescription>
<para>Basis function values and support id. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/py/py_spline.hpp" line="232" column="13" bodyfile="/home/runner/work/splinepy/splinepy/src/py/py_spline.cpp" bodystart="633" bodyend="685"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1py_1_1PySpline_1ae19ff20aa33ba4159b920983abcaa18c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>py::tuple</type>
        <definition>py::tuple Proximities</definition>
        <argsstring>(py::array_t&lt; double &gt; queries, py::array_t&lt; int &gt; initial_guess_sample_resolutions, const double tolerance, const int max_iterations, const bool aggresive_search_bounds, const int nthreads)</argsstring>
        <name>Proximities</name>
        <qualifiedname>splinepy::py::PySpline::Proximities</qualifiedname>
        <param>
          <type>py::array_t&lt; double &gt;</type>
          <declname>queries</declname>
        </param>
        <param>
          <type>py::array_t&lt; int &gt;</type>
          <declname>initial_guess_sample_resolutions</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>tolerance</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>max_iterations</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>aggresive_search_bounds</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>nthreads</declname>
        </param>
        <briefdescription>
<para>Proximity query (verbose) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/py/py_spline.hpp" line="237" column="13" bodyfile="/home/runner/work/splinepy/splinepy/src/py/py_spline.cpp" bodystart="688" bodyend="783"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1py_1_1PySpline_1acaaf8a6ec687d936f5881779bdde5958" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ElevateDegrees</definition>
        <argsstring>(py::array_t&lt; int &gt; para_dims)</argsstring>
        <name>ElevateDegrees</name>
        <qualifiedname>splinepy::py::PySpline::ElevateDegrees</qualifiedname>
        <param>
          <type>py::array_t&lt; int &gt;</type>
          <declname>para_dims</declname>
        </param>
        <briefdescription>
<para>(multiple) Degree elevation </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/py/py_spline.hpp" line="245" column="8" bodyfile="/home/runner/work/splinepy/splinepy/src/py/py_spline.cpp" bodystart="785" bodyend="807"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1py_1_1PySpline_1a00b28c3c7d392225ed4f6f3a106fc724" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>py::list</type>
        <definition>py::list ReduceDegrees</definition>
        <argsstring>(py::array_t&lt; int &gt; para_dims, double tolerance)</argsstring>
        <name>ReduceDegrees</name>
        <qualifiedname>splinepy::py::PySpline::ReduceDegrees</qualifiedname>
        <param>
          <type>py::array_t&lt; int &gt;</type>
          <declname>para_dims</declname>
        </param>
        <param>
          <type>double</type>
          <declname>tolerance</declname>
        </param>
        <briefdescription>
<para>(multiple) Degree Reduction returns a list of reduction result (bool) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/py/py_spline.hpp" line="249" column="12" bodyfile="/home/runner/work/splinepy/splinepy/src/py/py_spline.cpp" bodystart="809" bodyend="825"/>
      </memberdef>
      <memberdef kind="function" id="classsplinepy_1_1py_1_1PySpline_1ada50ed6d0db4819e5466827fd5085fe4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>py::object</type>
        <definition>py::object ToDerived</definition>
        <argsstring>()</argsstring>
        <name>ToDerived</name>
        <qualifiedname>splinepy::py::PySpline::ToDerived</qualifiedname>
        <briefdescription>
<para>returns current spline as package&apos;s derived spline types based on splinepy.settings.NAME_TO_TYPE </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para></para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/splinepy/splinepy/include/splinepy/py/py_spline.hpp" line="254" column="14" bodyfile="/home/runner/work/splinepy/splinepy/src/py/py_spline.cpp" bodystart="827" bodyend="830"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>True interface to python. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="1">
        <label>PySpline</label>
        <link refid="classsplinepy_1_1py_1_1PySpline"/>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/splinepy/splinepy/include/splinepy/py/py_spline.hpp" line="93" column="1" bodyfile="/home/runner/work/splinepy/splinepy/include/splinepy/py/py_spline.hpp" bodystart="93" bodyend="255"/>
    <listofallmembers>
      <member refid="classsplinepy_1_1py_1_1PySpline_1ac9ec778787b12d40471a3b56a62d8654" prot="public" virt="non-virtual"><scope>splinepy::py::PySpline</scope><name>Basis</name></member>
      <member refid="classsplinepy_1_1py_1_1PySpline_1ac48d3b5c395957696c0773d2ede46717" prot="public" virt="non-virtual"><scope>splinepy::py::PySpline</scope><name>BasisAndSupport</name></member>
      <member refid="classsplinepy_1_1py_1_1PySpline_1a93acd9db34aeb236e07da8e41f42e169" prot="public" virt="non-virtual"><scope>splinepy::py::PySpline</scope><name>BasisDerivative</name></member>
      <member refid="classsplinepy_1_1py_1_1PySpline_1a7689961cf31e06f07e5cbac49b8040c9" prot="public" virt="non-virtual"><scope>splinepy::py::PySpline</scope><name>BasisDerivativeAndSupport</name></member>
      <member refid="classsplinepy_1_1py_1_1PySpline_1af22fc033a28da611de197aeb49448c6c" prot="public" virt="non-virtual"><scope>splinepy::py::PySpline</scope><name>c_spline_</name></member>
      <member refid="classsplinepy_1_1py_1_1PySpline_1a364309e6bb44dcfae649369f7f02c2e9" prot="public" virt="non-virtual"><scope>splinepy::py::PySpline</scope><name>ControlMeshResolutions</name></member>
      <member refid="classsplinepy_1_1py_1_1PySpline_1a671e8c0d22cf78763ab8ccfcf5ac5f4d" prot="public" virt="non-virtual"><scope>splinepy::py::PySpline</scope><name>CoordinatePointers</name></member>
      <member refid="classsplinepy_1_1py_1_1PySpline_1a359946f99148cf58ab49950b385f65b7" prot="public" virt="non-virtual"><scope>splinepy::py::PySpline</scope><name>Core</name></member>
      <member refid="classsplinepy_1_1py_1_1PySpline_1a509fb1c72ca532a607ff93c8181e511e" prot="public" virt="non-virtual"><scope>splinepy::py::PySpline</scope><name>Core</name></member>
      <member refid="classsplinepy_1_1py_1_1PySpline_1a8d8fafeb4c9e6e2e9ecfdae2e32c224f" prot="public" virt="non-virtual"><scope>splinepy::py::PySpline</scope><name>CoreSpline_</name></member>
      <member refid="classsplinepy_1_1py_1_1PySpline_1a64406e0b9ea41f6e74ea8e6cdb448ad3" prot="public" virt="non-virtual"><scope>splinepy::py::PySpline</scope><name>CurrentCoreDegrees</name></member>
      <member refid="classsplinepy_1_1py_1_1PySpline_1a1d5d763de9077626609705b8591202b5" prot="public" virt="non-virtual"><scope>splinepy::py::PySpline</scope><name>CurrentCoreProperties</name></member>
      <member refid="classsplinepy_1_1py_1_1PySpline_1aa3b9f0460d2b251a6cff4ac28881e040" prot="public" virt="non-virtual"><scope>splinepy::py::PySpline</scope><name>data_</name></member>
      <member refid="classsplinepy_1_1py_1_1PySpline_1aebaf7c32aec0f6efc4146d65d63662c2" prot="public" virt="non-virtual"><scope>splinepy::py::PySpline</scope><name>Derivative</name></member>
      <member refid="classsplinepy_1_1py_1_1PySpline_1a844805bf936642eb8849d76b506abf8d" prot="public" virt="non-virtual"><scope>splinepy::py::PySpline</scope><name>dim_</name></member>
      <member refid="classsplinepy_1_1py_1_1PySpline_1acaaf8a6ec687d936f5881779bdde5958" prot="public" virt="non-virtual"><scope>splinepy::py::PySpline</scope><name>ElevateDegrees</name></member>
      <member refid="classsplinepy_1_1py_1_1PySpline_1a6bc4484d5b815817d892cf9a4473c61a" prot="public" virt="non-virtual"><scope>splinepy::py::PySpline</scope><name>Evaluate</name></member>
      <member refid="classsplinepy_1_1py_1_1PySpline_1aa635e6dc78e3e47607b7ecf8a24d7a4a" prot="public" virt="non-virtual"><scope>splinepy::py::PySpline</scope><name>GrevilleAbscissae</name></member>
      <member refid="classsplinepy_1_1py_1_1PySpline_1a129c6f541a94e7ae95577082a2cfedcc" prot="public" virt="non-virtual"><scope>splinepy::py::PySpline</scope><name>HasKnotVectors</name></member>
      <member refid="classsplinepy_1_1py_1_1PySpline_1ab12b7cdceeccd010d3bbe04eb8b5c85b" prot="public" virt="non-virtual"><scope>splinepy::py::PySpline</scope><name>IsRational</name></member>
      <member refid="classsplinepy_1_1py_1_1PySpline_1a71a3306452b75e110c517a7093d4fab4" prot="public" virt="non-virtual"><scope>splinepy::py::PySpline</scope><name>Jacobian</name></member>
      <member refid="classsplinepy_1_1py_1_1PySpline_1acc39b4da8816e8f99b4c1742c191a224" prot="public" virt="non-virtual"><scope>splinepy::py::PySpline</scope><name>KnotVector</name></member>
      <member refid="classsplinepy_1_1py_1_1PySpline_1a41087c5f2f732f7a2f336b45b952f199" prot="public" virt="non-virtual"><scope>splinepy::py::PySpline</scope><name>Name</name></member>
      <member refid="classsplinepy_1_1py_1_1PySpline_1a46a29b83a9a47391c25a2d49219f5fc2" prot="public" virt="non-virtual"><scope>splinepy::py::PySpline</scope><name>NewCore</name></member>
      <member refid="classsplinepy_1_1py_1_1PySpline_1a96fb3e6b8f86a70c6fe8091b478e46a9" prot="public" virt="non-virtual"><scope>splinepy::py::PySpline</scope><name>para_dim_</name></member>
      <member refid="classsplinepy_1_1py_1_1PySpline_1a52b23b4182a864a49ccb5f9d92c7c263" prot="public" virt="non-virtual"><scope>splinepy::py::PySpline</scope><name>ParameterSpace</name></member>
      <member refid="classsplinepy_1_1py_1_1PySpline_1a552febdd775dae957792b82e0d530608" prot="public" virt="non-virtual"><scope>splinepy::py::PySpline</scope><name>ParametricBounds</name></member>
      <member refid="classsplinepy_1_1py_1_1PySpline_1ae19ff20aa33ba4159b920983abcaa18c" prot="public" virt="non-virtual"><scope>splinepy::py::PySpline</scope><name>Proximities</name></member>
      <member refid="classsplinepy_1_1py_1_1PySpline_1a76dea4c59b29d5361d4bc8f39fdf5522" prot="public" virt="non-virtual"><scope>splinepy::py::PySpline</scope><name>PySpline</name></member>
      <member refid="classsplinepy_1_1py_1_1PySpline_1a26998f8662cb1ceab252a129907228a5" prot="public" virt="non-virtual"><scope>splinepy::py::PySpline</scope><name>PySpline</name></member>
      <member refid="classsplinepy_1_1py_1_1PySpline_1abc8b793a4130adf17324b21ca82ffb50" prot="public" virt="non-virtual"><scope>splinepy::py::PySpline</scope><name>PySpline</name></member>
      <member refid="classsplinepy_1_1py_1_1PySpline_1ae468b1186fafd7422f3c48457cf27d1a" prot="public" virt="non-virtual"><scope>splinepy::py::PySpline</scope><name>PySpline</name></member>
      <member refid="classsplinepy_1_1py_1_1PySpline_1a1da7c5ae328bed5795683bb93f36a24d" prot="public" virt="non-virtual"><scope>splinepy::py::PySpline</scope><name>PySpline</name></member>
      <member refid="classsplinepy_1_1py_1_1PySpline_1a29daeecfc1b16e9298daf9f2018baaf8" prot="public" virt="non-virtual"><scope>splinepy::py::PySpline</scope><name>PySpline</name></member>
      <member refid="classsplinepy_1_1py_1_1PySpline_1a00b28c3c7d392225ed4f6f3a106fc724" prot="public" virt="non-virtual"><scope>splinepy::py::PySpline</scope><name>ReduceDegrees</name></member>
      <member refid="classsplinepy_1_1py_1_1PySpline_1ab5608611d0f26d611ecf1d1154e6ecbc" prot="public" virt="non-virtual"><scope>splinepy::py::PySpline</scope><name>Sample</name></member>
      <member refid="classsplinepy_1_1py_1_1PySpline_1ab1f0a87f7f6c4d26012c624490203f10" prot="public" virt="non-virtual"><scope>splinepy::py::PySpline</scope><name>Support</name></member>
      <member refid="classsplinepy_1_1py_1_1PySpline_1ada50ed6d0db4819e5466827fd5085fe4" prot="public" virt="non-virtual"><scope>splinepy::py::PySpline</scope><name>ToDerived</name></member>
      <member refid="classsplinepy_1_1py_1_1PySpline_1a15d38297a4b14f22d084eab95779e35c" prot="public" virt="non-virtual"><scope>splinepy::py::PySpline</scope><name>WhatAmI</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
